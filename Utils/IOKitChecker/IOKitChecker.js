
{
    var g_proc_name = "proc_name_AAoAA";
    console.log('[*] Frida js is attached to: ' + g_proc_name)

 
    const g_IOAVAudioInterfaceCopyChannelLayoutElements_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCopyChannelLayoutElements');
    console.log("[i] g_IOAVAudioInterfaceCopyChannelLayoutElements_ptr addr: " + g_IOAVAudioInterfaceCopyChannelLayoutElements_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCopyChannelLayoutElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCopyChannelLayoutElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCopyChannelLayoutElements");
        }
    });        
 
    const g_IOAVAudioInterfaceCopyDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCopyDiagnosticsString');
    console.log("[i] g_IOAVAudioInterfaceCopyDiagnosticsString_ptr addr: " + g_IOAVAudioInterfaceCopyDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCopyDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCopyDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCopyDiagnosticsString");
        }
    });        
 
    const g_IOAVAudioInterfaceCopyElements_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCopyElements');
    console.log("[i] g_IOAVAudioInterfaceCopyElements_ptr addr: " + g_IOAVAudioInterfaceCopyElements_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCopyElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCopyElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCopyElements");
        }
    });        
 
    const g_IOAVAudioInterfaceCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCopyProperties');
    console.log("[i] g_IOAVAudioInterfaceCopyProperties_ptr addr: " + g_IOAVAudioInterfaceCopyProperties_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCopyProperties");
        }
    });        
 
    const g_IOAVAudioInterfaceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCopyProperty');
    console.log("[i] g_IOAVAudioInterfaceCopyProperty_ptr addr: " + g_IOAVAudioInterfaceCopyProperty_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCopyProperty");
        }
    });        
 
    const g_IOAVAudioInterfaceCreate_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCreate');
    console.log("[i] g_IOAVAudioInterfaceCreate_ptr addr: " + g_IOAVAudioInterfaceCreate_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCreate");
        }
    });        
 
    const g_IOAVAudioInterfaceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceCreateWithService');
    console.log("[i] g_IOAVAudioInterfaceCreateWithService_ptr addr: " + g_IOAVAudioInterfaceCreateWithService_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceCreateWithService");
        }
    });        
 
    const g_IOAVAudioInterfaceGetLinkData_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceGetLinkData');
    console.log("[i] g_IOAVAudioInterfaceGetLinkData_ptr addr: " + g_IOAVAudioInterfaceGetLinkData_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceGetLinkData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceGetLinkData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceGetLinkData");
        }
    });        
 
    const g_IOAVAudioInterfaceGetLinkDataWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceGetLinkDataWithSource');
    console.log("[i] g_IOAVAudioInterfaceGetLinkDataWithSource_ptr addr: " + g_IOAVAudioInterfaceGetLinkDataWithSource_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceGetLinkDataWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceGetLinkDataWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceGetLinkDataWithSource");
        }
    });        
 
    const g_IOAVAudioInterfaceGetLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceGetLocation');
    console.log("[i] g_IOAVAudioInterfaceGetLocation_ptr addr: " + g_IOAVAudioInterfaceGetLocation_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceGetLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceGetLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceGetLocation");
        }
    });        
 
    const g_IOAVAudioInterfaceGetService_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceGetService');
    console.log("[i] g_IOAVAudioInterfaceGetService_ptr addr: " + g_IOAVAudioInterfaceGetService_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceGetService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceGetService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceGetService");
        }
    });        
 
    const g_IOAVAudioInterfaceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceGetTypeID');
    console.log("[i] g_IOAVAudioInterfaceGetTypeID_ptr addr: " + g_IOAVAudioInterfaceGetTypeID_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceGetTypeID");
        }
    });        
 
    const g_IOAVAudioInterfaceSetLogLevel_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceSetLogLevel');
    console.log("[i] g_IOAVAudioInterfaceSetLogLevel_ptr addr: " + g_IOAVAudioInterfaceSetLogLevel_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceSetLogLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceSetLogLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceSetLogLevel");
        }
    });        
 
    const g_IOAVAudioInterfaceSetLogLevelMask_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceSetLogLevelMask');
    console.log("[i] g_IOAVAudioInterfaceSetLogLevelMask_ptr addr: " + g_IOAVAudioInterfaceSetLogLevelMask_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceSetLogLevelMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceSetLogLevelMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceSetLogLevelMask");
        }
    });        
 
    const g_IOAVAudioInterfaceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceSetProperty');
    console.log("[i] g_IOAVAudioInterfaceSetProperty_ptr addr: " + g_IOAVAudioInterfaceSetProperty_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceSetProperty");
        }
    });        
 
    const g_IOAVAudioInterfaceStartLink_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceStartLink');
    console.log("[i] g_IOAVAudioInterfaceStartLink_ptr addr: " + g_IOAVAudioInterfaceStartLink_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceStartLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceStartLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceStartLink");
        }
    });        
 
    const g_IOAVAudioInterfaceStartLinkWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceStartLinkWithSource');
    console.log("[i] g_IOAVAudioInterfaceStartLinkWithSource_ptr addr: " + g_IOAVAudioInterfaceStartLinkWithSource_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceStartLinkWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceStartLinkWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceStartLinkWithSource");
        }
    });        
 
    const g_IOAVAudioInterfaceStopLink_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceStopLink');
    console.log("[i] g_IOAVAudioInterfaceStopLink_ptr addr: " + g_IOAVAudioInterfaceStopLink_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceStopLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceStopLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceStopLink");
        }
    });        
 
    const g_IOAVAudioInterfaceStopLinkWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVAudioInterfaceStopLinkWithSource');
    console.log("[i] g_IOAVAudioInterfaceStopLinkWithSource_ptr addr: " + g_IOAVAudioInterfaceStopLinkWithSource_ptr)

    Interceptor.attach(g_IOAVAudioInterfaceStopLinkWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVAudioInterfaceStopLinkWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVAudioInterfaceStopLinkWithSource");
        }
    });        
 
    const g_IOAVConnectCallCopyMethod_ptr = Module.getExportByName(g_proc_name, 'IOAVConnectCallCopyMethod');
    console.log("[i] g_IOAVConnectCallCopyMethod_ptr addr: " + g_IOAVConnectCallCopyMethod_ptr)

    Interceptor.attach(g_IOAVConnectCallCopyMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVConnectCallCopyMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVConnectCallCopyMethod");
        }
    });        
 
    const g_IOAVConnectCallSetMethod_ptr = Module.getExportByName(g_proc_name, 'IOAVConnectCallSetMethod');
    console.log("[i] g_IOAVConnectCallSetMethod_ptr addr: " + g_IOAVConnectCallSetMethod_ptr)

    Interceptor.attach(g_IOAVConnectCallSetMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVConnectCallSetMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVConnectCallSetMethod");
        }
    });        
 
    const g_IOAVControlInterfaceCopyDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceCopyDiagnosticsString');
    console.log("[i] g_IOAVControlInterfaceCopyDiagnosticsString_ptr addr: " + g_IOAVControlInterfaceCopyDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVControlInterfaceCopyDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceCopyDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceCopyDiagnosticsString");
        }
    });        
 
    const g_IOAVControlInterfaceCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceCopyProperties');
    console.log("[i] g_IOAVControlInterfaceCopyProperties_ptr addr: " + g_IOAVControlInterfaceCopyProperties_ptr)

    Interceptor.attach(g_IOAVControlInterfaceCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceCopyProperties");
        }
    });        
 
    const g_IOAVControlInterfaceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceCopyProperty');
    console.log("[i] g_IOAVControlInterfaceCopyProperty_ptr addr: " + g_IOAVControlInterfaceCopyProperty_ptr)

    Interceptor.attach(g_IOAVControlInterfaceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceCopyProperty");
        }
    });        
 
    const g_IOAVControlInterfaceCreate_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceCreate');
    console.log("[i] g_IOAVControlInterfaceCreate_ptr addr: " + g_IOAVControlInterfaceCreate_ptr)

    Interceptor.attach(g_IOAVControlInterfaceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceCreate");
        }
    });        
 
    const g_IOAVControlInterfaceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceCreateWithService');
    console.log("[i] g_IOAVControlInterfaceCreateWithService_ptr addr: " + g_IOAVControlInterfaceCreateWithService_ptr)

    Interceptor.attach(g_IOAVControlInterfaceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceCreateWithService");
        }
    });        
 
    const g_IOAVControlInterfaceGetLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceGetLocation');
    console.log("[i] g_IOAVControlInterfaceGetLocation_ptr addr: " + g_IOAVControlInterfaceGetLocation_ptr)

    Interceptor.attach(g_IOAVControlInterfaceGetLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceGetLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceGetLocation");
        }
    });        
 
    const g_IOAVControlInterfaceGetService_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceGetService');
    console.log("[i] g_IOAVControlInterfaceGetService_ptr addr: " + g_IOAVControlInterfaceGetService_ptr)

    Interceptor.attach(g_IOAVControlInterfaceGetService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceGetService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceGetService");
        }
    });        
 
    const g_IOAVControlInterfaceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceGetTypeID');
    console.log("[i] g_IOAVControlInterfaceGetTypeID_ptr addr: " + g_IOAVControlInterfaceGetTypeID_ptr)

    Interceptor.attach(g_IOAVControlInterfaceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceGetTypeID");
        }
    });        
 
    const g_IOAVControlInterfaceSetLogLevel_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceSetLogLevel');
    console.log("[i] g_IOAVControlInterfaceSetLogLevel_ptr addr: " + g_IOAVControlInterfaceSetLogLevel_ptr)

    Interceptor.attach(g_IOAVControlInterfaceSetLogLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceSetLogLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceSetLogLevel");
        }
    });        
 
    const g_IOAVControlInterfaceSetLogLevelMask_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceSetLogLevelMask');
    console.log("[i] g_IOAVControlInterfaceSetLogLevelMask_ptr addr: " + g_IOAVControlInterfaceSetLogLevelMask_ptr)

    Interceptor.attach(g_IOAVControlInterfaceSetLogLevelMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceSetLogLevelMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceSetLogLevelMask");
        }
    });        
 
    const g_IOAVControlInterfaceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVControlInterfaceSetProperty');
    console.log("[i] g_IOAVControlInterfaceSetProperty_ptr addr: " + g_IOAVControlInterfaceSetProperty_ptr)

    Interceptor.attach(g_IOAVControlInterfaceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControlInterfaceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControlInterfaceSetProperty");
        }
    });        
 
    const g_IOAVControllerClearEventLog_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerClearEventLog');
    console.log("[i] g_IOAVControllerClearEventLog_ptr addr: " + g_IOAVControllerClearEventLog_ptr)

    Interceptor.attach(g_IOAVControllerClearEventLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerClearEventLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerClearEventLog");
        }
    });        
 
    const g_IOAVControllerCopyDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerCopyDiagnosticsString');
    console.log("[i] g_IOAVControllerCopyDiagnosticsString_ptr addr: " + g_IOAVControllerCopyDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVControllerCopyDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerCopyDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerCopyDiagnosticsString");
        }
    });        
 
    const g_IOAVControllerCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerCopyProperties');
    console.log("[i] g_IOAVControllerCopyProperties_ptr addr: " + g_IOAVControllerCopyProperties_ptr)

    Interceptor.attach(g_IOAVControllerCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerCopyProperties");
        }
    });        
 
    const g_IOAVControllerCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerCopyProperty');
    console.log("[i] g_IOAVControllerCopyProperty_ptr addr: " + g_IOAVControllerCopyProperty_ptr)

    Interceptor.attach(g_IOAVControllerCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerCopyProperty");
        }
    });        
 
    const g_IOAVControllerCreate_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerCreate');
    console.log("[i] g_IOAVControllerCreate_ptr addr: " + g_IOAVControllerCreate_ptr)

    Interceptor.attach(g_IOAVControllerCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerCreate");
        }
    });        
 
    const g_IOAVControllerCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerCreateWithLocation');
    console.log("[i] g_IOAVControllerCreateWithLocation_ptr addr: " + g_IOAVControllerCreateWithLocation_ptr)

    Interceptor.attach(g_IOAVControllerCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerCreateWithLocation");
        }
    });        
 
    const g_IOAVControllerCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerCreateWithService');
    console.log("[i] g_IOAVControllerCreateWithService_ptr addr: " + g_IOAVControllerCreateWithService_ptr)

    Interceptor.attach(g_IOAVControllerCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerCreateWithService");
        }
    });        
 
    const g_IOAVControllerForceHotPlugDetect_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerForceHotPlugDetect');
    console.log("[i] g_IOAVControllerForceHotPlugDetect_ptr addr: " + g_IOAVControllerForceHotPlugDetect_ptr)

    Interceptor.attach(g_IOAVControllerForceHotPlugDetect_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerForceHotPlugDetect")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerForceHotPlugDetect");
        }
    });        
 
    const g_IOAVControllerGetLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerGetLocation');
    console.log("[i] g_IOAVControllerGetLocation_ptr addr: " + g_IOAVControllerGetLocation_ptr)

    Interceptor.attach(g_IOAVControllerGetLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerGetLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerGetLocation");
        }
    });        
 
    const g_IOAVControllerGetPower_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerGetPower');
    console.log("[i] g_IOAVControllerGetPower_ptr addr: " + g_IOAVControllerGetPower_ptr)

    Interceptor.attach(g_IOAVControllerGetPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerGetPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerGetPower");
        }
    });        
 
    const g_IOAVControllerGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerGetTypeID');
    console.log("[i] g_IOAVControllerGetTypeID_ptr addr: " + g_IOAVControllerGetTypeID_ptr)

    Interceptor.attach(g_IOAVControllerGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerGetTypeID");
        }
    });        
 
    const g_IOAVControllerSetEventLogCommandMask_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetEventLogCommandMask');
    console.log("[i] g_IOAVControllerSetEventLogCommandMask_ptr addr: " + g_IOAVControllerSetEventLogCommandMask_ptr)

    Interceptor.attach(g_IOAVControllerSetEventLogCommandMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetEventLogCommandMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetEventLogCommandMask");
        }
    });        
 
    const g_IOAVControllerSetEventLogEventMask_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetEventLogEventMask');
    console.log("[i] g_IOAVControllerSetEventLogEventMask_ptr addr: " + g_IOAVControllerSetEventLogEventMask_ptr)

    Interceptor.attach(g_IOAVControllerSetEventLogEventMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetEventLogEventMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetEventLogEventMask");
        }
    });        
 
    const g_IOAVControllerSetEventLogSize_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetEventLogSize');
    console.log("[i] g_IOAVControllerSetEventLogSize_ptr addr: " + g_IOAVControllerSetEventLogSize_ptr)

    Interceptor.attach(g_IOAVControllerSetEventLogSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetEventLogSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetEventLogSize");
        }
    });        
 
    const g_IOAVControllerSetLogLevel_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetLogLevel');
    console.log("[i] g_IOAVControllerSetLogLevel_ptr addr: " + g_IOAVControllerSetLogLevel_ptr)

    Interceptor.attach(g_IOAVControllerSetLogLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetLogLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetLogLevel");
        }
    });        
 
    const g_IOAVControllerSetLogLevelMask_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetLogLevelMask');
    console.log("[i] g_IOAVControllerSetLogLevelMask_ptr addr: " + g_IOAVControllerSetLogLevelMask_ptr)

    Interceptor.attach(g_IOAVControllerSetLogLevelMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetLogLevelMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetLogLevelMask");
        }
    });        
 
    const g_IOAVControllerSetPower_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetPower');
    console.log("[i] g_IOAVControllerSetPower_ptr addr: " + g_IOAVControllerSetPower_ptr)

    Interceptor.attach(g_IOAVControllerSetPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetPower");
        }
    });        
 
    const g_IOAVControllerSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetProperty');
    console.log("[i] g_IOAVControllerSetProperty_ptr addr: " + g_IOAVControllerSetProperty_ptr)

    Interceptor.attach(g_IOAVControllerSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetProperty");
        }
    });        
 
    const g_IOAVControllerSetProtectionType_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetProtectionType');
    console.log("[i] g_IOAVControllerSetProtectionType_ptr addr: " + g_IOAVControllerSetProtectionType_ptr)

    Interceptor.attach(g_IOAVControllerSetProtectionType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetProtectionType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetProtectionType");
        }
    });        
 
    const g_IOAVControllerSetVirtualDeviceMode_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSetVirtualDeviceMode');
    console.log("[i] g_IOAVControllerSetVirtualDeviceMode_ptr addr: " + g_IOAVControllerSetVirtualDeviceMode_ptr)

    Interceptor.attach(g_IOAVControllerSetVirtualDeviceMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSetVirtualDeviceMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSetVirtualDeviceMode");
        }
    });        
 
    const g_IOAVControllerSleepDisplay_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerSleepDisplay');
    console.log("[i] g_IOAVControllerSleepDisplay_ptr addr: " + g_IOAVControllerSleepDisplay_ptr)

    Interceptor.attach(g_IOAVControllerSleepDisplay_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerSleepDisplay")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerSleepDisplay");
        }
    });        
 
    const g_IOAVControllerWakeDisplay_ptr = Module.getExportByName(g_proc_name, 'IOAVControllerWakeDisplay');
    console.log("[i] g_IOAVControllerWakeDisplay_ptr addr: " + g_IOAVControllerWakeDisplay_ptr)

    Interceptor.attach(g_IOAVControllerWakeDisplay_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVControllerWakeDisplay")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVControllerWakeDisplay");
        }
    });        
 
    const g_IOAVCreateDiagnosticsReference_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateDiagnosticsReference');
    console.log("[i] g_IOAVCreateDiagnosticsReference_ptr addr: " + g_IOAVCreateDiagnosticsReference_ptr)

    Interceptor.attach(g_IOAVCreateDiagnosticsReference_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateDiagnosticsReference")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateDiagnosticsReference");
        }
    });        
 
    const g_IOAVCreateDiagnosticsReferenceWithLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateDiagnosticsReferenceWithLocation');
    console.log("[i] g_IOAVCreateDiagnosticsReferenceWithLocation_ptr addr: " + g_IOAVCreateDiagnosticsReferenceWithLocation_ptr)

    Interceptor.attach(g_IOAVCreateDiagnosticsReferenceWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateDiagnosticsReferenceWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateDiagnosticsReferenceWithLocation");
        }
    });        
 
    const g_IOAVCreateDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateDiagnosticsString');
    console.log("[i] g_IOAVCreateDiagnosticsString_ptr addr: " + g_IOAVCreateDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVCreateDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateDiagnosticsString");
        }
    });        
 
    const g_IOAVCreateDiagnosticsStringWithLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateDiagnosticsStringWithLocation');
    console.log("[i] g_IOAVCreateDiagnosticsStringWithLocation_ptr addr: " + g_IOAVCreateDiagnosticsStringWithLocation_ptr)

    Interceptor.attach(g_IOAVCreateDiagnosticsStringWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateDiagnosticsStringWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateDiagnosticsStringWithLocation");
        }
    });        
 
    const g_IOAVCreateStringWithAudioChannelLayoutData_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithAudioChannelLayoutData');
    console.log("[i] g_IOAVCreateStringWithAudioChannelLayoutData_ptr addr: " + g_IOAVCreateStringWithAudioChannelLayoutData_ptr)

    Interceptor.attach(g_IOAVCreateStringWithAudioChannelLayoutData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithAudioChannelLayoutData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithAudioChannelLayoutData");
        }
    });        
 
    const g_IOAVCreateStringWithAudioLinkData_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithAudioLinkData');
    console.log("[i] g_IOAVCreateStringWithAudioLinkData_ptr addr: " + g_IOAVCreateStringWithAudioLinkData_ptr)

    Interceptor.attach(g_IOAVCreateStringWithAudioLinkData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithAudioLinkData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithAudioLinkData");
        }
    });        
 
    const g_IOAVCreateStringWithData_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithData');
    console.log("[i] g_IOAVCreateStringWithData_ptr addr: " + g_IOAVCreateStringWithData_ptr)

    Interceptor.attach(g_IOAVCreateStringWithData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithData");
        }
    });        
 
    const g_IOAVCreateStringWithElement_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithElement');
    console.log("[i] g_IOAVCreateStringWithElement_ptr addr: " + g_IOAVCreateStringWithElement_ptr)

    Interceptor.attach(g_IOAVCreateStringWithElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithElement");
        }
    });        
 
    const g_IOAVCreateStringWithElements_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithElements');
    console.log("[i] g_IOAVCreateStringWithElements_ptr addr: " + g_IOAVCreateStringWithElements_ptr)

    Interceptor.attach(g_IOAVCreateStringWithElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithElements");
        }
    });        
 
    const g_IOAVCreateStringWithVideoColorData_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithVideoColorData');
    console.log("[i] g_IOAVCreateStringWithVideoColorData_ptr addr: " + g_IOAVCreateStringWithVideoColorData_ptr)

    Interceptor.attach(g_IOAVCreateStringWithVideoColorData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithVideoColorData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithVideoColorData");
        }
    });        
 
    const g_IOAVCreateStringWithVideoLinkData_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithVideoLinkData');
    console.log("[i] g_IOAVCreateStringWithVideoLinkData_ptr addr: " + g_IOAVCreateStringWithVideoLinkData_ptr)

    Interceptor.attach(g_IOAVCreateStringWithVideoLinkData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithVideoLinkData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithVideoLinkData");
        }
    });        
 
    const g_IOAVCreateStringWithVideoTimingData_ptr = Module.getExportByName(g_proc_name, 'IOAVCreateStringWithVideoTimingData');
    console.log("[i] g_IOAVCreateStringWithVideoTimingData_ptr addr: " + g_IOAVCreateStringWithVideoTimingData_ptr)

    Interceptor.attach(g_IOAVCreateStringWithVideoTimingData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVCreateStringWithVideoTimingData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVCreateStringWithVideoTimingData");
        }
    });        
 
    const g_IOAVDeviceClearEventLog_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceClearEventLog');
    console.log("[i] g_IOAVDeviceClearEventLog_ptr addr: " + g_IOAVDeviceClearEventLog_ptr)

    Interceptor.attach(g_IOAVDeviceClearEventLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceClearEventLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceClearEventLog");
        }
    });        
 
    const g_IOAVDeviceCopyDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceCopyDiagnosticsString');
    console.log("[i] g_IOAVDeviceCopyDiagnosticsString_ptr addr: " + g_IOAVDeviceCopyDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVDeviceCopyDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceCopyDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceCopyDiagnosticsString");
        }
    });        
 
    const g_IOAVDeviceCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceCopyProperties');
    console.log("[i] g_IOAVDeviceCopyProperties_ptr addr: " + g_IOAVDeviceCopyProperties_ptr)

    Interceptor.attach(g_IOAVDeviceCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceCopyProperties");
        }
    });        
 
    const g_IOAVDeviceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceCopyProperty');
    console.log("[i] g_IOAVDeviceCopyProperty_ptr addr: " + g_IOAVDeviceCopyProperty_ptr)

    Interceptor.attach(g_IOAVDeviceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceCopyProperty");
        }
    });        
 
    const g_IOAVDeviceCreate_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceCreate');
    console.log("[i] g_IOAVDeviceCreate_ptr addr: " + g_IOAVDeviceCreate_ptr)

    Interceptor.attach(g_IOAVDeviceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceCreate");
        }
    });        
 
    const g_IOAVDeviceCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceCreateWithLocation');
    console.log("[i] g_IOAVDeviceCreateWithLocation_ptr addr: " + g_IOAVDeviceCreateWithLocation_ptr)

    Interceptor.attach(g_IOAVDeviceCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceCreateWithLocation");
        }
    });        
 
    const g_IOAVDeviceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceCreateWithService');
    console.log("[i] g_IOAVDeviceCreateWithService_ptr addr: " + g_IOAVDeviceCreateWithService_ptr)

    Interceptor.attach(g_IOAVDeviceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceCreateWithService");
        }
    });        
 
    const g_IOAVDeviceGetController_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceGetController');
    console.log("[i] g_IOAVDeviceGetController_ptr addr: " + g_IOAVDeviceGetController_ptr)

    Interceptor.attach(g_IOAVDeviceGetController_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceGetController")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceGetController");
        }
    });        
 
    const g_IOAVDeviceGetLinkData_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceGetLinkData');
    console.log("[i] g_IOAVDeviceGetLinkData_ptr addr: " + g_IOAVDeviceGetLinkData_ptr)

    Interceptor.attach(g_IOAVDeviceGetLinkData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceGetLinkData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceGetLinkData");
        }
    });        
 
    const g_IOAVDeviceGetLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceGetLocation');
    console.log("[i] g_IOAVDeviceGetLocation_ptr addr: " + g_IOAVDeviceGetLocation_ptr)

    Interceptor.attach(g_IOAVDeviceGetLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceGetLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceGetLocation");
        }
    });        
 
    const g_IOAVDeviceGetProtectionStatus_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceGetProtectionStatus');
    console.log("[i] g_IOAVDeviceGetProtectionStatus_ptr addr: " + g_IOAVDeviceGetProtectionStatus_ptr)

    Interceptor.attach(g_IOAVDeviceGetProtectionStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceGetProtectionStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceGetProtectionStatus");
        }
    });        
 
    const g_IOAVDeviceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceGetTypeID');
    console.log("[i] g_IOAVDeviceGetTypeID_ptr addr: " + g_IOAVDeviceGetTypeID_ptr)

    Interceptor.attach(g_IOAVDeviceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceGetTypeID");
        }
    });        
 
    const g_IOAVDeviceReadI2C_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceReadI2C');
    console.log("[i] g_IOAVDeviceReadI2C_ptr addr: " + g_IOAVDeviceReadI2C_ptr)

    Interceptor.attach(g_IOAVDeviceReadI2C_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceReadI2C")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceReadI2C");
        }
    });        
 
    const g_IOAVDeviceSetEventLogCommandMask_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceSetEventLogCommandMask');
    console.log("[i] g_IOAVDeviceSetEventLogCommandMask_ptr addr: " + g_IOAVDeviceSetEventLogCommandMask_ptr)

    Interceptor.attach(g_IOAVDeviceSetEventLogCommandMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceSetEventLogCommandMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceSetEventLogCommandMask");
        }
    });        
 
    const g_IOAVDeviceSetEventLogEventMask_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceSetEventLogEventMask');
    console.log("[i] g_IOAVDeviceSetEventLogEventMask_ptr addr: " + g_IOAVDeviceSetEventLogEventMask_ptr)

    Interceptor.attach(g_IOAVDeviceSetEventLogEventMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceSetEventLogEventMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceSetEventLogEventMask");
        }
    });        
 
    const g_IOAVDeviceSetEventLogSize_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceSetEventLogSize');
    console.log("[i] g_IOAVDeviceSetEventLogSize_ptr addr: " + g_IOAVDeviceSetEventLogSize_ptr)

    Interceptor.attach(g_IOAVDeviceSetEventLogSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceSetEventLogSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceSetEventLogSize");
        }
    });        
 
    const g_IOAVDeviceSetLogLevel_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceSetLogLevel');
    console.log("[i] g_IOAVDeviceSetLogLevel_ptr addr: " + g_IOAVDeviceSetLogLevel_ptr)

    Interceptor.attach(g_IOAVDeviceSetLogLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceSetLogLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceSetLogLevel");
        }
    });        
 
    const g_IOAVDeviceSetLogLevelMask_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceSetLogLevelMask');
    console.log("[i] g_IOAVDeviceSetLogLevelMask_ptr addr: " + g_IOAVDeviceSetLogLevelMask_ptr)

    Interceptor.attach(g_IOAVDeviceSetLogLevelMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceSetLogLevelMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceSetLogLevelMask");
        }
    });        
 
    const g_IOAVDeviceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceSetProperty');
    console.log("[i] g_IOAVDeviceSetProperty_ptr addr: " + g_IOAVDeviceSetProperty_ptr)

    Interceptor.attach(g_IOAVDeviceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceSetProperty");
        }
    });        
 
    const g_IOAVDeviceWriteI2C_ptr = Module.getExportByName(g_proc_name, 'IOAVDeviceWriteI2C');
    console.log("[i] g_IOAVDeviceWriteI2C_ptr addr: " + g_IOAVDeviceWriteI2C_ptr)

    Interceptor.attach(g_IOAVDeviceWriteI2C_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDeviceWriteI2C")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDeviceWriteI2C");
        }
    });        
 
    const g_IOAVDisplayMemoryCreateWithName_ptr = Module.getExportByName(g_proc_name, 'IOAVDisplayMemoryCreateWithName');
    console.log("[i] g_IOAVDisplayMemoryCreateWithName_ptr addr: " + g_IOAVDisplayMemoryCreateWithName_ptr)

    Interceptor.attach(g_IOAVDisplayMemoryCreateWithName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDisplayMemoryCreateWithName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDisplayMemoryCreateWithName");
        }
    });        
 
    const g_IOAVDisplayMemoryCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVDisplayMemoryCreateWithService');
    console.log("[i] g_IOAVDisplayMemoryCreateWithService_ptr addr: " + g_IOAVDisplayMemoryCreateWithService_ptr)

    Interceptor.attach(g_IOAVDisplayMemoryCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDisplayMemoryCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDisplayMemoryCreateWithService");
        }
    });        
 
    const g_IOAVDisplayMemoryGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVDisplayMemoryGetTypeID');
    console.log("[i] g_IOAVDisplayMemoryGetTypeID_ptr addr: " + g_IOAVDisplayMemoryGetTypeID_ptr)

    Interceptor.attach(g_IOAVDisplayMemoryGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDisplayMemoryGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDisplayMemoryGetTypeID");
        }
    });        
 
    const g_IOAVDisplayMemoryRead_ptr = Module.getExportByName(g_proc_name, 'IOAVDisplayMemoryRead');
    console.log("[i] g_IOAVDisplayMemoryRead_ptr addr: " + g_IOAVDisplayMemoryRead_ptr)

    Interceptor.attach(g_IOAVDisplayMemoryRead_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDisplayMemoryRead")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDisplayMemoryRead");
        }
    });        
 
    const g_IOAVDisplayMemoryWrite_ptr = Module.getExportByName(g_proc_name, 'IOAVDisplayMemoryWrite');
    console.log("[i] g_IOAVDisplayMemoryWrite_ptr addr: " + g_IOAVDisplayMemoryWrite_ptr)

    Interceptor.attach(g_IOAVDisplayMemoryWrite_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVDisplayMemoryWrite")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVDisplayMemoryWrite");
        }
    });        
 
    const g_IOAVObjectConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOAVObjectConformsTo');
    console.log("[i] g_IOAVObjectConformsTo_ptr addr: " + g_IOAVObjectConformsTo_ptr)

    Interceptor.attach(g_IOAVObjectConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVObjectConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVObjectConformsTo");
        }
    });        
 
    const g_IOAVPropertyListCreateWithCFProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVPropertyListCreateWithCFProperties');
    console.log("[i] g_IOAVPropertyListCreateWithCFProperties_ptr addr: " + g_IOAVPropertyListCreateWithCFProperties_ptr)

    Interceptor.attach(g_IOAVPropertyListCreateWithCFProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVPropertyListCreateWithCFProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVPropertyListCreateWithCFProperties");
        }
    });        
 
    const g_IOAVServiceClearEventLog_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceClearEventLog');
    console.log("[i] g_IOAVServiceClearEventLog_ptr addr: " + g_IOAVServiceClearEventLog_ptr)

    Interceptor.attach(g_IOAVServiceClearEventLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceClearEventLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceClearEventLog");
        }
    });        
 
    const g_IOAVServiceCopyDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCopyDiagnosticsString');
    console.log("[i] g_IOAVServiceCopyDiagnosticsString_ptr addr: " + g_IOAVServiceCopyDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVServiceCopyDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCopyDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCopyDiagnosticsString");
        }
    });        
 
    const g_IOAVServiceCopyEDID_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCopyEDID');
    console.log("[i] g_IOAVServiceCopyEDID_ptr addr: " + g_IOAVServiceCopyEDID_ptr)

    Interceptor.attach(g_IOAVServiceCopyEDID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCopyEDID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCopyEDID");
        }
    });        
 
    const g_IOAVServiceCopyPhysicalAddress_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCopyPhysicalAddress');
    console.log("[i] g_IOAVServiceCopyPhysicalAddress_ptr addr: " + g_IOAVServiceCopyPhysicalAddress_ptr)

    Interceptor.attach(g_IOAVServiceCopyPhysicalAddress_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCopyPhysicalAddress")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCopyPhysicalAddress");
        }
    });        
 
    const g_IOAVServiceCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCopyProperties');
    console.log("[i] g_IOAVServiceCopyProperties_ptr addr: " + g_IOAVServiceCopyProperties_ptr)

    Interceptor.attach(g_IOAVServiceCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCopyProperties");
        }
    });        
 
    const g_IOAVServiceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCopyProperty');
    console.log("[i] g_IOAVServiceCopyProperty_ptr addr: " + g_IOAVServiceCopyProperty_ptr)

    Interceptor.attach(g_IOAVServiceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCopyProperty");
        }
    });        
 
    const g_IOAVServiceCreate_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCreate');
    console.log("[i] g_IOAVServiceCreate_ptr addr: " + g_IOAVServiceCreate_ptr)

    Interceptor.attach(g_IOAVServiceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCreate");
        }
    });        
 
    const g_IOAVServiceCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCreateWithLocation');
    console.log("[i] g_IOAVServiceCreateWithLocation_ptr addr: " + g_IOAVServiceCreateWithLocation_ptr)

    Interceptor.attach(g_IOAVServiceCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCreateWithLocation");
        }
    });        
 
    const g_IOAVServiceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceCreateWithService');
    console.log("[i] g_IOAVServiceCreateWithService_ptr addr: " + g_IOAVServiceCreateWithService_ptr)

    Interceptor.attach(g_IOAVServiceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceCreateWithService");
        }
    });        
 
    const g_IOAVServiceGetChosenContentProtection_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetChosenContentProtection');
    console.log("[i] g_IOAVServiceGetChosenContentProtection_ptr addr: " + g_IOAVServiceGetChosenContentProtection_ptr)

    Interceptor.attach(g_IOAVServiceGetChosenContentProtection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetChosenContentProtection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetChosenContentProtection");
        }
    });        
 
    const g_IOAVServiceGetContentProtectionCapabilities_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetContentProtectionCapabilities');
    console.log("[i] g_IOAVServiceGetContentProtectionCapabilities_ptr addr: " + g_IOAVServiceGetContentProtectionCapabilities_ptr)

    Interceptor.attach(g_IOAVServiceGetContentProtectionCapabilities_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetContentProtectionCapabilities")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetContentProtectionCapabilities");
        }
    });        
 
    const g_IOAVServiceGetDevice_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetDevice');
    console.log("[i] g_IOAVServiceGetDevice_ptr addr: " + g_IOAVServiceGetDevice_ptr)

    Interceptor.attach(g_IOAVServiceGetDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetDevice");
        }
    });        
 
    const g_IOAVServiceGetHDCPAuthenticatedContentType_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetHDCPAuthenticatedContentType');
    console.log("[i] g_IOAVServiceGetHDCPAuthenticatedContentType_ptr addr: " + g_IOAVServiceGetHDCPAuthenticatedContentType_ptr)

    Interceptor.attach(g_IOAVServiceGetHDCPAuthenticatedContentType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetHDCPAuthenticatedContentType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetHDCPAuthenticatedContentType");
        }
    });        
 
    const g_IOAVServiceGetLinkData_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetLinkData');
    console.log("[i] g_IOAVServiceGetLinkData_ptr addr: " + g_IOAVServiceGetLinkData_ptr)

    Interceptor.attach(g_IOAVServiceGetLinkData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetLinkData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetLinkData");
        }
    });        
 
    const g_IOAVServiceGetLinkDataWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetLinkDataWithSource');
    console.log("[i] g_IOAVServiceGetLinkDataWithSource_ptr addr: " + g_IOAVServiceGetLinkDataWithSource_ptr)

    Interceptor.attach(g_IOAVServiceGetLinkDataWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetLinkDataWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetLinkDataWithSource");
        }
    });        
 
    const g_IOAVServiceGetLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetLocation');
    console.log("[i] g_IOAVServiceGetLocation_ptr addr: " + g_IOAVServiceGetLocation_ptr)

    Interceptor.attach(g_IOAVServiceGetLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetLocation");
        }
    });        
 
    const g_IOAVServiceGetPower_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetPower');
    console.log("[i] g_IOAVServiceGetPower_ptr addr: " + g_IOAVServiceGetPower_ptr)

    Interceptor.attach(g_IOAVServiceGetPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetPower");
        }
    });        
 
    const g_IOAVServiceGetProtectionStatus_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetProtectionStatus');
    console.log("[i] g_IOAVServiceGetProtectionStatus_ptr addr: " + g_IOAVServiceGetProtectionStatus_ptr)

    Interceptor.attach(g_IOAVServiceGetProtectionStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetProtectionStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetProtectionStatus");
        }
    });        
 
    const g_IOAVServiceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceGetTypeID');
    console.log("[i] g_IOAVServiceGetTypeID_ptr addr: " + g_IOAVServiceGetTypeID_ptr)

    Interceptor.attach(g_IOAVServiceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceGetTypeID");
        }
    });        
 
    const g_IOAVServiceReadI2C_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceReadI2C');
    console.log("[i] g_IOAVServiceReadI2C_ptr addr: " + g_IOAVServiceReadI2C_ptr)

    Interceptor.attach(g_IOAVServiceReadI2C_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceReadI2C")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceReadI2C");
        }
    });        
 
    const g_IOAVServiceSetContentProtectionCapabilities_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetContentProtectionCapabilities');
    console.log("[i] g_IOAVServiceSetContentProtectionCapabilities_ptr addr: " + g_IOAVServiceSetContentProtectionCapabilities_ptr)

    Interceptor.attach(g_IOAVServiceSetContentProtectionCapabilities_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetContentProtectionCapabilities")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetContentProtectionCapabilities");
        }
    });        
 
    const g_IOAVServiceSetContentProtectionPolicyOptions_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetContentProtectionPolicyOptions');
    console.log("[i] g_IOAVServiceSetContentProtectionPolicyOptions_ptr addr: " + g_IOAVServiceSetContentProtectionPolicyOptions_ptr)

    Interceptor.attach(g_IOAVServiceSetContentProtectionPolicyOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetContentProtectionPolicyOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetContentProtectionPolicyOptions");
        }
    });        
 
    const g_IOAVServiceSetContentProtectionSupportEnabled_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetContentProtectionSupportEnabled');
    console.log("[i] g_IOAVServiceSetContentProtectionSupportEnabled_ptr addr: " + g_IOAVServiceSetContentProtectionSupportEnabled_ptr)

    Interceptor.attach(g_IOAVServiceSetContentProtectionSupportEnabled_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetContentProtectionSupportEnabled")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetContentProtectionSupportEnabled");
        }
    });        
 
    const g_IOAVServiceSetEventLogCommandMask_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetEventLogCommandMask');
    console.log("[i] g_IOAVServiceSetEventLogCommandMask_ptr addr: " + g_IOAVServiceSetEventLogCommandMask_ptr)

    Interceptor.attach(g_IOAVServiceSetEventLogCommandMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetEventLogCommandMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetEventLogCommandMask");
        }
    });        
 
    const g_IOAVServiceSetEventLogEventMask_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetEventLogEventMask');
    console.log("[i] g_IOAVServiceSetEventLogEventMask_ptr addr: " + g_IOAVServiceSetEventLogEventMask_ptr)

    Interceptor.attach(g_IOAVServiceSetEventLogEventMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetEventLogEventMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetEventLogEventMask");
        }
    });        
 
    const g_IOAVServiceSetEventLogSize_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetEventLogSize');
    console.log("[i] g_IOAVServiceSetEventLogSize_ptr addr: " + g_IOAVServiceSetEventLogSize_ptr)

    Interceptor.attach(g_IOAVServiceSetEventLogSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetEventLogSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetEventLogSize");
        }
    });        
 
    const g_IOAVServiceSetHDRStaticMetadata_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetHDRStaticMetadata');
    console.log("[i] g_IOAVServiceSetHDRStaticMetadata_ptr addr: " + g_IOAVServiceSetHDRStaticMetadata_ptr)

    Interceptor.attach(g_IOAVServiceSetHDRStaticMetadata_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetHDRStaticMetadata")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetHDRStaticMetadata");
        }
    });        
 
    const g_IOAVServiceSetLogLevel_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetLogLevel');
    console.log("[i] g_IOAVServiceSetLogLevel_ptr addr: " + g_IOAVServiceSetLogLevel_ptr)

    Interceptor.attach(g_IOAVServiceSetLogLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetLogLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetLogLevel");
        }
    });        
 
    const g_IOAVServiceSetLogLevelMask_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetLogLevelMask');
    console.log("[i] g_IOAVServiceSetLogLevelMask_ptr addr: " + g_IOAVServiceSetLogLevelMask_ptr)

    Interceptor.attach(g_IOAVServiceSetLogLevelMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetLogLevelMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetLogLevelMask");
        }
    });        
 
    const g_IOAVServiceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetProperty');
    console.log("[i] g_IOAVServiceSetProperty_ptr addr: " + g_IOAVServiceSetProperty_ptr)

    Interceptor.attach(g_IOAVServiceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetProperty");
        }
    });        
 
    const g_IOAVServiceSetVirtualEDIDMode_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceSetVirtualEDIDMode');
    console.log("[i] g_IOAVServiceSetVirtualEDIDMode_ptr addr: " + g_IOAVServiceSetVirtualEDIDMode_ptr)

    Interceptor.attach(g_IOAVServiceSetVirtualEDIDMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceSetVirtualEDIDMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceSetVirtualEDIDMode");
        }
    });        
 
    const g_IOAVServiceStartInfoFrame_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStartInfoFrame');
    console.log("[i] g_IOAVServiceStartInfoFrame_ptr addr: " + g_IOAVServiceStartInfoFrame_ptr)

    Interceptor.attach(g_IOAVServiceStartInfoFrame_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStartInfoFrame")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStartInfoFrame");
        }
    });        
 
    const g_IOAVServiceStartInfoFrameWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStartInfoFrameWithSource');
    console.log("[i] g_IOAVServiceStartInfoFrameWithSource_ptr addr: " + g_IOAVServiceStartInfoFrameWithSource_ptr)

    Interceptor.attach(g_IOAVServiceStartInfoFrameWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStartInfoFrameWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStartInfoFrameWithSource");
        }
    });        
 
    const g_IOAVServiceStartLink_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStartLink');
    console.log("[i] g_IOAVServiceStartLink_ptr addr: " + g_IOAVServiceStartLink_ptr)

    Interceptor.attach(g_IOAVServiceStartLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStartLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStartLink");
        }
    });        
 
    const g_IOAVServiceStartLinkWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStartLinkWithSource');
    console.log("[i] g_IOAVServiceStartLinkWithSource_ptr addr: " + g_IOAVServiceStartLinkWithSource_ptr)

    Interceptor.attach(g_IOAVServiceStartLinkWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStartLinkWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStartLinkWithSource");
        }
    });        
 
    const g_IOAVServiceStopInfoFrame_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStopInfoFrame');
    console.log("[i] g_IOAVServiceStopInfoFrame_ptr addr: " + g_IOAVServiceStopInfoFrame_ptr)

    Interceptor.attach(g_IOAVServiceStopInfoFrame_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStopInfoFrame")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStopInfoFrame");
        }
    });        
 
    const g_IOAVServiceStopInfoFrameWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStopInfoFrameWithSource');
    console.log("[i] g_IOAVServiceStopInfoFrameWithSource_ptr addr: " + g_IOAVServiceStopInfoFrameWithSource_ptr)

    Interceptor.attach(g_IOAVServiceStopInfoFrameWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStopInfoFrameWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStopInfoFrameWithSource");
        }
    });        
 
    const g_IOAVServiceStopLink_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStopLink');
    console.log("[i] g_IOAVServiceStopLink_ptr addr: " + g_IOAVServiceStopLink_ptr)

    Interceptor.attach(g_IOAVServiceStopLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStopLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStopLink");
        }
    });        
 
    const g_IOAVServiceStopLinkWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceStopLinkWithSource');
    console.log("[i] g_IOAVServiceStopLinkWithSource_ptr addr: " + g_IOAVServiceStopLinkWithSource_ptr)

    Interceptor.attach(g_IOAVServiceStopLinkWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceStopLinkWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceStopLinkWithSource");
        }
    });        
 
    const g_IOAVServiceWriteI2C_ptr = Module.getExportByName(g_proc_name, 'IOAVServiceWriteI2C');
    console.log("[i] g_IOAVServiceWriteI2C_ptr addr: " + g_IOAVServiceWriteI2C_ptr)

    Interceptor.attach(g_IOAVServiceWriteI2C_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVServiceWriteI2C")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVServiceWriteI2C");
        }
    });        
 
    const g_IOAVVideoInterfaceCopyColorElements_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCopyColorElements');
    console.log("[i] g_IOAVVideoInterfaceCopyColorElements_ptr addr: " + g_IOAVVideoInterfaceCopyColorElements_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCopyColorElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCopyColorElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCopyColorElements");
        }
    });        
 
    const g_IOAVVideoInterfaceCopyDiagnosticsString_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCopyDiagnosticsString');
    console.log("[i] g_IOAVVideoInterfaceCopyDiagnosticsString_ptr addr: " + g_IOAVVideoInterfaceCopyDiagnosticsString_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCopyDiagnosticsString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCopyDiagnosticsString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCopyDiagnosticsString");
        }
    });        
 
    const g_IOAVVideoInterfaceCopyDisplayAttributes_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCopyDisplayAttributes');
    console.log("[i] g_IOAVVideoInterfaceCopyDisplayAttributes_ptr addr: " + g_IOAVVideoInterfaceCopyDisplayAttributes_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCopyDisplayAttributes_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCopyDisplayAttributes")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCopyDisplayAttributes");
        }
    });        
 
    const g_IOAVVideoInterfaceCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCopyProperties');
    console.log("[i] g_IOAVVideoInterfaceCopyProperties_ptr addr: " + g_IOAVVideoInterfaceCopyProperties_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCopyProperties");
        }
    });        
 
    const g_IOAVVideoInterfaceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCopyProperty');
    console.log("[i] g_IOAVVideoInterfaceCopyProperty_ptr addr: " + g_IOAVVideoInterfaceCopyProperty_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCopyProperty");
        }
    });        
 
    const g_IOAVVideoInterfaceCopyTimingElements_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCopyTimingElements');
    console.log("[i] g_IOAVVideoInterfaceCopyTimingElements_ptr addr: " + g_IOAVVideoInterfaceCopyTimingElements_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCopyTimingElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCopyTimingElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCopyTimingElements");
        }
    });        
 
    const g_IOAVVideoInterfaceCreate_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCreate');
    console.log("[i] g_IOAVVideoInterfaceCreate_ptr addr: " + g_IOAVVideoInterfaceCreate_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCreate");
        }
    });        
 
    const g_IOAVVideoInterfaceCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCreateWithLocation');
    console.log("[i] g_IOAVVideoInterfaceCreateWithLocation_ptr addr: " + g_IOAVVideoInterfaceCreateWithLocation_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCreateWithLocation");
        }
    });        
 
    const g_IOAVVideoInterfaceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceCreateWithService');
    console.log("[i] g_IOAVVideoInterfaceCreateWithService_ptr addr: " + g_IOAVVideoInterfaceCreateWithService_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceCreateWithService");
        }
    });        
 
    const g_IOAVVideoInterfaceGetLinkData_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceGetLinkData');
    console.log("[i] g_IOAVVideoInterfaceGetLinkData_ptr addr: " + g_IOAVVideoInterfaceGetLinkData_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceGetLinkData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceGetLinkData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceGetLinkData");
        }
    });        
 
    const g_IOAVVideoInterfaceGetLinkDataWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceGetLinkDataWithSource');
    console.log("[i] g_IOAVVideoInterfaceGetLinkDataWithSource_ptr addr: " + g_IOAVVideoInterfaceGetLinkDataWithSource_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceGetLinkDataWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceGetLinkDataWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceGetLinkDataWithSource");
        }
    });        
 
    const g_IOAVVideoInterfaceGetLocation_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceGetLocation');
    console.log("[i] g_IOAVVideoInterfaceGetLocation_ptr addr: " + g_IOAVVideoInterfaceGetLocation_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceGetLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceGetLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceGetLocation");
        }
    });        
 
    const g_IOAVVideoInterfaceGetService_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceGetService');
    console.log("[i] g_IOAVVideoInterfaceGetService_ptr addr: " + g_IOAVVideoInterfaceGetService_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceGetService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceGetService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceGetService");
        }
    });        
 
    const g_IOAVVideoInterfaceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceGetTypeID');
    console.log("[i] g_IOAVVideoInterfaceGetTypeID_ptr addr: " + g_IOAVVideoInterfaceGetTypeID_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceGetTypeID");
        }
    });        
 
    const g_IOAVVideoInterfaceSetBounds_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetBounds');
    console.log("[i] g_IOAVVideoInterfaceSetBounds_ptr addr: " + g_IOAVVideoInterfaceSetBounds_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetBounds_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetBounds")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetBounds");
        }
    });        
 
    const g_IOAVVideoInterfaceSetColorDitherRemoval_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetColorDitherRemoval');
    console.log("[i] g_IOAVVideoInterfaceSetColorDitherRemoval_ptr addr: " + g_IOAVVideoInterfaceSetColorDitherRemoval_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetColorDitherRemoval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetColorDitherRemoval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetColorDitherRemoval");
        }
    });        
 
    const g_IOAVVideoInterfaceSetLogLevel_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetLogLevel');
    console.log("[i] g_IOAVVideoInterfaceSetLogLevel_ptr addr: " + g_IOAVVideoInterfaceSetLogLevel_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetLogLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetLogLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetLogLevel");
        }
    });        
 
    const g_IOAVVideoInterfaceSetLogLevelMask_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetLogLevelMask');
    console.log("[i] g_IOAVVideoInterfaceSetLogLevelMask_ptr addr: " + g_IOAVVideoInterfaceSetLogLevelMask_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetLogLevelMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetLogLevelMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetLogLevelMask");
        }
    });        
 
    const g_IOAVVideoInterfaceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetProperty');
    console.log("[i] g_IOAVVideoInterfaceSetProperty_ptr addr: " + g_IOAVVideoInterfaceSetProperty_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetProperty");
        }
    });        
 
    const g_IOAVVideoInterfaceSetRotation_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetRotation');
    console.log("[i] g_IOAVVideoInterfaceSetRotation_ptr addr: " + g_IOAVVideoInterfaceSetRotation_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetRotation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetRotation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetRotation");
        }
    });        
 
    const g_IOAVVideoInterfaceSetScreenVirtualTemperature_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceSetScreenVirtualTemperature');
    console.log("[i] g_IOAVVideoInterfaceSetScreenVirtualTemperature_ptr addr: " + g_IOAVVideoInterfaceSetScreenVirtualTemperature_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceSetScreenVirtualTemperature_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceSetScreenVirtualTemperature")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceSetScreenVirtualTemperature");
        }
    });        
 
    const g_IOAVVideoInterfaceStartLink_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceStartLink');
    console.log("[i] g_IOAVVideoInterfaceStartLink_ptr addr: " + g_IOAVVideoInterfaceStartLink_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceStartLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceStartLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceStartLink");
        }
    });        
 
    const g_IOAVVideoInterfaceStartLinkWithModes_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceStartLinkWithModes');
    console.log("[i] g_IOAVVideoInterfaceStartLinkWithModes_ptr addr: " + g_IOAVVideoInterfaceStartLinkWithModes_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceStartLinkWithModes_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceStartLinkWithModes")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceStartLinkWithModes");
        }
    });        
 
    const g_IOAVVideoInterfaceStartLinkWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceStartLinkWithSource');
    console.log("[i] g_IOAVVideoInterfaceStartLinkWithSource_ptr addr: " + g_IOAVVideoInterfaceStartLinkWithSource_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceStartLinkWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceStartLinkWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceStartLinkWithSource");
        }
    });        
 
    const g_IOAVVideoInterfaceStopLink_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceStopLink');
    console.log("[i] g_IOAVVideoInterfaceStopLink_ptr addr: " + g_IOAVVideoInterfaceStopLink_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceStopLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceStopLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceStopLink");
        }
    });        
 
    const g_IOAVVideoInterfaceStopLinkWithSource_ptr = Module.getExportByName(g_proc_name, 'IOAVVideoInterfaceStopLinkWithSource');
    console.log("[i] g_IOAVVideoInterfaceStopLinkWithSource_ptr addr: " + g_IOAVVideoInterfaceStopLinkWithSource_ptr)

    Interceptor.attach(g_IOAVVideoInterfaceStopLinkWithSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAVVideoInterfaceStopLinkWithSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAVVideoInterfaceStopLinkWithSource");
        }
    });        
 
    const g_IOAccelCreateAccelID_ptr = Module.getExportByName(g_proc_name, 'IOAccelCreateAccelID');
    console.log("[i] g_IOAccelCreateAccelID_ptr addr: " + g_IOAccelCreateAccelID_ptr)

    Interceptor.attach(g_IOAccelCreateAccelID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelCreateAccelID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelCreateAccelID");
        }
    });        
 
    const g_IOAccelCreateSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelCreateSurface');
    console.log("[i] g_IOAccelCreateSurface_ptr addr: " + g_IOAccelCreateSurface_ptr)

    Interceptor.attach(g_IOAccelCreateSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelCreateSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelCreateSurface");
        }
    });        
 
    const g_IOAccelDestroyAccelID_ptr = Module.getExportByName(g_proc_name, 'IOAccelDestroyAccelID');
    console.log("[i] g_IOAccelDestroyAccelID_ptr addr: " + g_IOAccelDestroyAccelID_ptr)

    Interceptor.attach(g_IOAccelDestroyAccelID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelDestroyAccelID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelDestroyAccelID");
        }
    });        
 
    const g_IOAccelDestroySurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelDestroySurface');
    console.log("[i] g_IOAccelDestroySurface_ptr addr: " + g_IOAccelDestroySurface_ptr)

    Interceptor.attach(g_IOAccelDestroySurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelDestroySurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelDestroySurface");
        }
    });        
 
    const g_IOAccelFindAccelerator_ptr = Module.getExportByName(g_proc_name, 'IOAccelFindAccelerator');
    console.log("[i] g_IOAccelFindAccelerator_ptr addr: " + g_IOAccelFindAccelerator_ptr)

    Interceptor.attach(g_IOAccelFindAccelerator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelFindAccelerator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelFindAccelerator");
        }
    });        
 
    const g_IOAccelFlushSurfaceOnFramebuffers_ptr = Module.getExportByName(g_proc_name, 'IOAccelFlushSurfaceOnFramebuffers');
    console.log("[i] g_IOAccelFlushSurfaceOnFramebuffers_ptr addr: " + g_IOAccelFlushSurfaceOnFramebuffers_ptr)

    Interceptor.attach(g_IOAccelFlushSurfaceOnFramebuffers_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelFlushSurfaceOnFramebuffers")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelFlushSurfaceOnFramebuffers");
        }
    });        
 
    const g_IOAccelQueryLockSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelQueryLockSurface');
    console.log("[i] g_IOAccelQueryLockSurface_ptr addr: " + g_IOAccelQueryLockSurface_ptr)

    Interceptor.attach(g_IOAccelQueryLockSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelQueryLockSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelQueryLockSurface");
        }
    });        
 
    const g_IOAccelReadLockSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelReadLockSurface');
    console.log("[i] g_IOAccelReadLockSurface_ptr addr: " + g_IOAccelReadLockSurface_ptr)

    Interceptor.attach(g_IOAccelReadLockSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelReadLockSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelReadLockSurface");
        }
    });        
 
    const g_IOAccelReadLockSurfaceWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOAccelReadLockSurfaceWithOptions');
    console.log("[i] g_IOAccelReadLockSurfaceWithOptions_ptr addr: " + g_IOAccelReadLockSurfaceWithOptions_ptr)

    Interceptor.attach(g_IOAccelReadLockSurfaceWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelReadLockSurfaceWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelReadLockSurfaceWithOptions");
        }
    });        
 
    const g_IOAccelReadSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelReadSurface');
    console.log("[i] g_IOAccelReadSurface_ptr addr: " + g_IOAccelReadSurface_ptr)

    Interceptor.attach(g_IOAccelReadSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelReadSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelReadSurface");
        }
    });        
 
    const g_IOAccelReadUnlockSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelReadUnlockSurface');
    console.log("[i] g_IOAccelReadUnlockSurface_ptr addr: " + g_IOAccelReadUnlockSurface_ptr)

    Interceptor.attach(g_IOAccelReadUnlockSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelReadUnlockSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelReadUnlockSurface");
        }
    });        
 
    const g_IOAccelReadUnlockSurfaceWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOAccelReadUnlockSurfaceWithOptions');
    console.log("[i] g_IOAccelReadUnlockSurfaceWithOptions_ptr addr: " + g_IOAccelReadUnlockSurfaceWithOptions_ptr)

    Interceptor.attach(g_IOAccelReadUnlockSurfaceWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelReadUnlockSurfaceWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelReadUnlockSurfaceWithOptions");
        }
    });        
 
    const g_IOAccelSetSurfaceFramebufferShape_ptr = Module.getExportByName(g_proc_name, 'IOAccelSetSurfaceFramebufferShape');
    console.log("[i] g_IOAccelSetSurfaceFramebufferShape_ptr addr: " + g_IOAccelSetSurfaceFramebufferShape_ptr)

    Interceptor.attach(g_IOAccelSetSurfaceFramebufferShape_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelSetSurfaceFramebufferShape")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelSetSurfaceFramebufferShape");
        }
    });        
 
    const g_IOAccelSetSurfaceFramebufferShapeWithBacking_ptr = Module.getExportByName(g_proc_name, 'IOAccelSetSurfaceFramebufferShapeWithBacking');
    console.log("[i] g_IOAccelSetSurfaceFramebufferShapeWithBacking_ptr addr: " + g_IOAccelSetSurfaceFramebufferShapeWithBacking_ptr)

    Interceptor.attach(g_IOAccelSetSurfaceFramebufferShapeWithBacking_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelSetSurfaceFramebufferShapeWithBacking")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelSetSurfaceFramebufferShapeWithBacking");
        }
    });        
 
    const g_IOAccelSetSurfaceFramebufferShapeWithBackingAndLength_ptr = Module.getExportByName(g_proc_name, 'IOAccelSetSurfaceFramebufferShapeWithBackingAndLength');
    console.log("[i] g_IOAccelSetSurfaceFramebufferShapeWithBackingAndLength_ptr addr: " + g_IOAccelSetSurfaceFramebufferShapeWithBackingAndLength_ptr)

    Interceptor.attach(g_IOAccelSetSurfaceFramebufferShapeWithBackingAndLength_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelSetSurfaceFramebufferShapeWithBackingAndLength")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelSetSurfaceFramebufferShapeWithBackingAndLength");
        }
    });        
 
    const g_IOAccelSetSurfaceScale_ptr = Module.getExportByName(g_proc_name, 'IOAccelSetSurfaceScale');
    console.log("[i] g_IOAccelSetSurfaceScale_ptr addr: " + g_IOAccelSetSurfaceScale_ptr)

    Interceptor.attach(g_IOAccelSetSurfaceScale_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelSetSurfaceScale")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelSetSurfaceScale");
        }
    });        
 
    const g_IOAccelSurfaceControl_ptr = Module.getExportByName(g_proc_name, 'IOAccelSurfaceControl');
    console.log("[i] g_IOAccelSurfaceControl_ptr addr: " + g_IOAccelSurfaceControl_ptr)

    Interceptor.attach(g_IOAccelSurfaceControl_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelSurfaceControl")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelSurfaceControl");
        }
    });        
 
    const g_IOAccelWaitForSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelWaitForSurface');
    console.log("[i] g_IOAccelWaitForSurface_ptr addr: " + g_IOAccelWaitForSurface_ptr)

    Interceptor.attach(g_IOAccelWaitForSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelWaitForSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelWaitForSurface");
        }
    });        
 
    const g_IOAccelWriteLockSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelWriteLockSurface');
    console.log("[i] g_IOAccelWriteLockSurface_ptr addr: " + g_IOAccelWriteLockSurface_ptr)

    Interceptor.attach(g_IOAccelWriteLockSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelWriteLockSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelWriteLockSurface");
        }
    });        
 
    const g_IOAccelWriteLockSurfaceWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOAccelWriteLockSurfaceWithOptions');
    console.log("[i] g_IOAccelWriteLockSurfaceWithOptions_ptr addr: " + g_IOAccelWriteLockSurfaceWithOptions_ptr)

    Interceptor.attach(g_IOAccelWriteLockSurfaceWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelWriteLockSurfaceWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelWriteLockSurfaceWithOptions");
        }
    });        
 
    const g_IOAccelWriteUnlockSurface_ptr = Module.getExportByName(g_proc_name, 'IOAccelWriteUnlockSurface');
    console.log("[i] g_IOAccelWriteUnlockSurface_ptr addr: " + g_IOAccelWriteUnlockSurface_ptr)

    Interceptor.attach(g_IOAccelWriteUnlockSurface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelWriteUnlockSurface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelWriteUnlockSurface");
        }
    });        
 
    const g_IOAccelWriteUnlockSurfaceWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOAccelWriteUnlockSurfaceWithOptions');
    console.log("[i] g_IOAccelWriteUnlockSurfaceWithOptions_ptr addr: " + g_IOAccelWriteUnlockSurfaceWithOptions_ptr)

    Interceptor.attach(g_IOAccelWriteUnlockSurfaceWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAccelWriteUnlockSurfaceWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAccelWriteUnlockSurfaceWithOptions");
        }
    });        
 
    const g_IOAllowPowerChange_ptr = Module.getExportByName(g_proc_name, 'IOAllowPowerChange');
    console.log("[i] g_IOAllowPowerChange_ptr addr: " + g_IOAllowPowerChange_ptr)

    Interceptor.attach(g_IOAllowPowerChange_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAllowPowerChange")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAllowPowerChange");
        }
    });        
 
    const g_IOAuthenticatedRestartSupported_ptr = Module.getExportByName(g_proc_name, 'IOAuthenticatedRestartSupported');
    console.log("[i] g_IOAuthenticatedRestartSupported_ptr addr: " + g_IOAuthenticatedRestartSupported_ptr)

    Interceptor.attach(g_IOAuthenticatedRestartSupported_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOAuthenticatedRestartSupported")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOAuthenticatedRestartSupported");
        }
    });        
 
    const g_IOBSDNameMatching_ptr = Module.getExportByName(g_proc_name, 'IOBSDNameMatching');
    console.log("[i] g_IOBSDNameMatching_ptr addr: " + g_IOBSDNameMatching_ptr)

    Interceptor.attach(g_IOBSDNameMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOBSDNameMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOBSDNameMatching");
        }
    });        
 
    const g_IOCFSerialize_ptr = Module.getExportByName(g_proc_name, 'IOCFSerialize');
    console.log("[i] g_IOCFSerialize_ptr addr: " + g_IOCFSerialize_ptr)

    Interceptor.attach(g_IOCFSerialize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCFSerialize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCFSerialize");
        }
    });        
 
    const g_IOCFURLWriteDataAndPropertiesToResource_ptr = Module.getExportByName(g_proc_name, 'IOCFURLWriteDataAndPropertiesToResource');
    console.log("[i] g_IOCFURLWriteDataAndPropertiesToResource_ptr addr: " + g_IOCFURLWriteDataAndPropertiesToResource_ptr)

    Interceptor.attach(g_IOCFURLWriteDataAndPropertiesToResource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCFURLWriteDataAndPropertiesToResource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCFURLWriteDataAndPropertiesToResource");
        }
    });        
 
    const g_IOCFUnserialize_ptr = Module.getExportByName(g_proc_name, 'IOCFUnserialize');
    console.log("[i] g_IOCFUnserialize_ptr addr: " + g_IOCFUnserialize_ptr)

    Interceptor.attach(g_IOCFUnserialize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCFUnserialize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCFUnserialize");
        }
    });        
 
    const g_IOCFUnserializeBinary_ptr = Module.getExportByName(g_proc_name, 'IOCFUnserializeBinary');
    console.log("[i] g_IOCFUnserializeBinary_ptr addr: " + g_IOCFUnserializeBinary_ptr)

    Interceptor.attach(g_IOCFUnserializeBinary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCFUnserializeBinary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCFUnserializeBinary");
        }
    });        
 
    const g_IOCFUnserializeWithSize_ptr = Module.getExportByName(g_proc_name, 'IOCFUnserializeWithSize');
    console.log("[i] g_IOCFUnserializeWithSize_ptr addr: " + g_IOCFUnserializeWithSize_ptr)

    Interceptor.attach(g_IOCFUnserializeWithSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCFUnserializeWithSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCFUnserializeWithSize");
        }
    });        
 
    const g_IOCFUnserializeparse_ptr = Module.getExportByName(g_proc_name, 'IOCFUnserializeparse');
    console.log("[i] g_IOCFUnserializeparse_ptr addr: " + g_IOCFUnserializeparse_ptr)

    Interceptor.attach(g_IOCFUnserializeparse_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCFUnserializeparse")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCFUnserializeparse");
        }
    });        
 
    const g_IOCancelPowerChange_ptr = Module.getExportByName(g_proc_name, 'IOCancelPowerChange');
    console.log("[i] g_IOCancelPowerChange_ptr addr: " + g_IOCancelPowerChange_ptr)

    Interceptor.attach(g_IOCancelPowerChange_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCancelPowerChange")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCancelPowerChange");
        }
    });        
 
    const g_IOCatalogueGetData_ptr = Module.getExportByName(g_proc_name, 'IOCatalogueGetData');
    console.log("[i] g_IOCatalogueGetData_ptr addr: " + g_IOCatalogueGetData_ptr)

    Interceptor.attach(g_IOCatalogueGetData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCatalogueGetData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCatalogueGetData");
        }
    });        
 
    const g_IOCatalogueModuleLoaded_ptr = Module.getExportByName(g_proc_name, 'IOCatalogueModuleLoaded');
    console.log("[i] g_IOCatalogueModuleLoaded_ptr addr: " + g_IOCatalogueModuleLoaded_ptr)

    Interceptor.attach(g_IOCatalogueModuleLoaded_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCatalogueModuleLoaded")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCatalogueModuleLoaded");
        }
    });        
 
    const g_IOCatalogueReset_ptr = Module.getExportByName(g_proc_name, 'IOCatalogueReset');
    console.log("[i] g_IOCatalogueReset_ptr addr: " + g_IOCatalogueReset_ptr)

    Interceptor.attach(g_IOCatalogueReset_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCatalogueReset")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCatalogueReset");
        }
    });        
 
    const g_IOCatalogueSendData_ptr = Module.getExportByName(g_proc_name, 'IOCatalogueSendData');
    console.log("[i] g_IOCatalogueSendData_ptr addr: " + g_IOCatalogueSendData_ptr)

    Interceptor.attach(g_IOCatalogueSendData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCatalogueSendData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCatalogueSendData");
        }
    });        
 
    const g_IOCatalogueTerminate_ptr = Module.getExportByName(g_proc_name, 'IOCatalogueTerminate');
    console.log("[i] g_IOCatalogueTerminate_ptr addr: " + g_IOCatalogueTerminate_ptr)

    Interceptor.attach(g_IOCatalogueTerminate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCatalogueTerminate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCatalogueTerminate");
        }
    });        
 
    const g_IOCatlogueGetGenCount_ptr = Module.getExportByName(g_proc_name, 'IOCatlogueGetGenCount');
    console.log("[i] g_IOCatlogueGetGenCount_ptr addr: " + g_IOCatlogueGetGenCount_ptr)

    Interceptor.attach(g_IOCatlogueGetGenCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCatlogueGetGenCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCatlogueGetGenCount");
        }
    });        
 
    const g_IOCloseConnection_ptr = Module.getExportByName(g_proc_name, 'IOCloseConnection');
    console.log("[i] g_IOCloseConnection_ptr addr: " + g_IOCloseConnection_ptr)

    Interceptor.attach(g_IOCloseConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCloseConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCloseConnection");
        }
    });        
 
    const g_IOCompatibiltyNumber_ptr = Module.getExportByName(g_proc_name, 'IOCompatibiltyNumber');
    console.log("[i] g_IOCompatibiltyNumber_ptr addr: " + g_IOCompatibiltyNumber_ptr)

    Interceptor.attach(g_IOCompatibiltyNumber_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCompatibiltyNumber")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCompatibiltyNumber");
        }
    });        
 
    const g_IOConnectAddClient_ptr = Module.getExportByName(g_proc_name, 'IOConnectAddClient');
    console.log("[i] g_IOConnectAddClient_ptr addr: " + g_IOConnectAddClient_ptr)

    Interceptor.attach(g_IOConnectAddClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectAddClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectAddClient");
        }
    });        
 
    const g_IOConnectAddRef_ptr = Module.getExportByName(g_proc_name, 'IOConnectAddRef');
    console.log("[i] g_IOConnectAddRef_ptr addr: " + g_IOConnectAddRef_ptr)

    Interceptor.attach(g_IOConnectAddRef_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectAddRef")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectAddRef");
        }
    });        
 
    const g_IOConnectCallAsyncMethod_ptr = Module.getExportByName(g_proc_name, 'IOConnectCallAsyncMethod');
    console.log("[i] g_IOConnectCallAsyncMethod_ptr addr: " + g_IOConnectCallAsyncMethod_ptr)

    Interceptor.attach(g_IOConnectCallAsyncMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectCallAsyncMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectCallAsyncMethod");
        }
    });        
 
    const g_IOConnectCallAsyncScalarMethod_ptr = Module.getExportByName(g_proc_name, 'IOConnectCallAsyncScalarMethod');
    console.log("[i] g_IOConnectCallAsyncScalarMethod_ptr addr: " + g_IOConnectCallAsyncScalarMethod_ptr)

    Interceptor.attach(g_IOConnectCallAsyncScalarMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectCallAsyncScalarMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectCallAsyncScalarMethod");
        }
    });        
 
    const g_IOConnectCallAsyncStructMethod_ptr = Module.getExportByName(g_proc_name, 'IOConnectCallAsyncStructMethod');
    console.log("[i] g_IOConnectCallAsyncStructMethod_ptr addr: " + g_IOConnectCallAsyncStructMethod_ptr)

    Interceptor.attach(g_IOConnectCallAsyncStructMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectCallAsyncStructMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectCallAsyncStructMethod");
        }
    });        
 
    const g_IOConnectCallMethod_ptr = Module.getExportByName(g_proc_name, 'IOConnectCallMethod');
    console.log("[i] g_IOConnectCallMethod_ptr addr: " + g_IOConnectCallMethod_ptr)

    Interceptor.attach(g_IOConnectCallMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectCallMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectCallMethod");
        }
    });        
 
    const g_IOConnectCallScalarMethod_ptr = Module.getExportByName(g_proc_name, 'IOConnectCallScalarMethod');
    console.log("[i] g_IOConnectCallScalarMethod_ptr addr: " + g_IOConnectCallScalarMethod_ptr)

    Interceptor.attach(g_IOConnectCallScalarMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectCallScalarMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectCallScalarMethod");
        }
    });        
 
    const g_IOConnectCallStructMethod_ptr = Module.getExportByName(g_proc_name, 'IOConnectCallStructMethod');
    console.log("[i] g_IOConnectCallStructMethod_ptr addr: " + g_IOConnectCallStructMethod_ptr)

    Interceptor.attach(g_IOConnectCallStructMethod_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectCallStructMethod")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectCallStructMethod");
        }
    });        
 
    const g_IOConnectGetService_ptr = Module.getExportByName(g_proc_name, 'IOConnectGetService');
    console.log("[i] g_IOConnectGetService_ptr addr: " + g_IOConnectGetService_ptr)

    Interceptor.attach(g_IOConnectGetService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectGetService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectGetService");
        }
    });        
 
    const g_IOConnectMapMemory_ptr = Module.getExportByName(g_proc_name, 'IOConnectMapMemory');
    console.log("[i] g_IOConnectMapMemory_ptr addr: " + g_IOConnectMapMemory_ptr)

    Interceptor.attach(g_IOConnectMapMemory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectMapMemory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectMapMemory");
        }
    });        
 
    const g_IOConnectMapMemory64_ptr = Module.getExportByName(g_proc_name, 'IOConnectMapMemory64');
    console.log("[i] g_IOConnectMapMemory64_ptr addr: " + g_IOConnectMapMemory64_ptr)

    Interceptor.attach(g_IOConnectMapMemory64_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectMapMemory64")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectMapMemory64");
        }
    });        
 
    const g_IOConnectRelease_ptr = Module.getExportByName(g_proc_name, 'IOConnectRelease');
    console.log("[i] g_IOConnectRelease_ptr addr: " + g_IOConnectRelease_ptr)

    Interceptor.attach(g_IOConnectRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectRelease");
        }
    });        
 
    const g_IOConnectSetCFProperties_ptr = Module.getExportByName(g_proc_name, 'IOConnectSetCFProperties');
    console.log("[i] g_IOConnectSetCFProperties_ptr addr: " + g_IOConnectSetCFProperties_ptr)

    Interceptor.attach(g_IOConnectSetCFProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectSetCFProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectSetCFProperties");
        }
    });        
 
    const g_IOConnectSetCFProperty_ptr = Module.getExportByName(g_proc_name, 'IOConnectSetCFProperty');
    console.log("[i] g_IOConnectSetCFProperty_ptr addr: " + g_IOConnectSetCFProperty_ptr)

    Interceptor.attach(g_IOConnectSetCFProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectSetCFProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectSetCFProperty");
        }
    });        
 
    const g_IOConnectSetNotificationPort_ptr = Module.getExportByName(g_proc_name, 'IOConnectSetNotificationPort');
    console.log("[i] g_IOConnectSetNotificationPort_ptr addr: " + g_IOConnectSetNotificationPort_ptr)

    Interceptor.attach(g_IOConnectSetNotificationPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectSetNotificationPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectSetNotificationPort");
        }
    });        
 
    const g_IOConnectTrap0_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap0');
    console.log("[i] g_IOConnectTrap0_ptr addr: " + g_IOConnectTrap0_ptr)

    Interceptor.attach(g_IOConnectTrap0_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap0")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap0");
        }
    });        
 
    const g_IOConnectTrap1_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap1');
    console.log("[i] g_IOConnectTrap1_ptr addr: " + g_IOConnectTrap1_ptr)

    Interceptor.attach(g_IOConnectTrap1_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap1")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap1");
        }
    });        
 
    const g_IOConnectTrap2_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap2');
    console.log("[i] g_IOConnectTrap2_ptr addr: " + g_IOConnectTrap2_ptr)

    Interceptor.attach(g_IOConnectTrap2_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap2")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap2");
        }
    });        
 
    const g_IOConnectTrap3_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap3');
    console.log("[i] g_IOConnectTrap3_ptr addr: " + g_IOConnectTrap3_ptr)

    Interceptor.attach(g_IOConnectTrap3_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap3")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap3");
        }
    });        
 
    const g_IOConnectTrap4_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap4');
    console.log("[i] g_IOConnectTrap4_ptr addr: " + g_IOConnectTrap4_ptr)

    Interceptor.attach(g_IOConnectTrap4_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap4")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap4");
        }
    });        
 
    const g_IOConnectTrap5_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap5');
    console.log("[i] g_IOConnectTrap5_ptr addr: " + g_IOConnectTrap5_ptr)

    Interceptor.attach(g_IOConnectTrap5_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap5")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap5");
        }
    });        
 
    const g_IOConnectTrap6_ptr = Module.getExportByName(g_proc_name, 'IOConnectTrap6');
    console.log("[i] g_IOConnectTrap6_ptr addr: " + g_IOConnectTrap6_ptr)

    Interceptor.attach(g_IOConnectTrap6_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectTrap6")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectTrap6");
        }
    });        
 
    const g_IOConnectUnmapMemory_ptr = Module.getExportByName(g_proc_name, 'IOConnectUnmapMemory');
    console.log("[i] g_IOConnectUnmapMemory_ptr addr: " + g_IOConnectUnmapMemory_ptr)

    Interceptor.attach(g_IOConnectUnmapMemory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectUnmapMemory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectUnmapMemory");
        }
    });        
 
    const g_IOConnectUnmapMemory64_ptr = Module.getExportByName(g_proc_name, 'IOConnectUnmapMemory64');
    console.log("[i] g_IOConnectUnmapMemory64_ptr addr: " + g_IOConnectUnmapMemory64_ptr)

    Interceptor.attach(g_IOConnectUnmapMemory64_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOConnectUnmapMemory64")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOConnectUnmapMemory64");
        }
    });        
 
    const g_IOCopyModel_ptr = Module.getExportByName(g_proc_name, 'IOCopyModel');
    console.log("[i] g_IOCopyModel_ptr addr: " + g_IOCopyModel_ptr)

    Interceptor.attach(g_IOCopyModel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCopyModel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCopyModel");
        }
    });        
 
    const g_IOCopySystemLoadAdvisoryDetailed_ptr = Module.getExportByName(g_proc_name, 'IOCopySystemLoadAdvisoryDetailed');
    console.log("[i] g_IOCopySystemLoadAdvisoryDetailed_ptr addr: " + g_IOCopySystemLoadAdvisoryDetailed_ptr)

    Interceptor.attach(g_IOCopySystemLoadAdvisoryDetailed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCopySystemLoadAdvisoryDetailed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCopySystemLoadAdvisoryDetailed");
        }
    });        
 
    const g_IOCreateDisplayInfoDictionary_ptr = Module.getExportByName(g_proc_name, 'IOCreateDisplayInfoDictionary');
    console.log("[i] g_IOCreateDisplayInfoDictionary_ptr addr: " + g_IOCreateDisplayInfoDictionary_ptr)

    Interceptor.attach(g_IOCreateDisplayInfoDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCreateDisplayInfoDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCreateDisplayInfoDictionary");
        }
    });        
 
    const g_IOCreatePlugInInterfaceForService_ptr = Module.getExportByName(g_proc_name, 'IOCreatePlugInInterfaceForService');
    console.log("[i] g_IOCreatePlugInInterfaceForService_ptr addr: " + g_IOCreatePlugInInterfaceForService_ptr)

    Interceptor.attach(g_IOCreatePlugInInterfaceForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCreatePlugInInterfaceForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCreatePlugInInterfaceForService");
        }
    });        
 
    const g_IOCreateReceivePort_ptr = Module.getExportByName(g_proc_name, 'IOCreateReceivePort');
    console.log("[i] g_IOCreateReceivePort_ptr addr: " + g_IOCreateReceivePort_ptr)

    Interceptor.attach(g_IOCreateReceivePort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOCreateReceivePort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOCreateReceivePort");
        }
    });        
 
    const g_IODPControllerCreate_ptr = Module.getExportByName(g_proc_name, 'IODPControllerCreate');
    console.log("[i] g_IODPControllerCreate_ptr addr: " + g_IODPControllerCreate_ptr)

    Interceptor.attach(g_IODPControllerCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerCreate");
        }
    });        
 
    const g_IODPControllerCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IODPControllerCreateWithLocation');
    console.log("[i] g_IODPControllerCreateWithLocation_ptr addr: " + g_IODPControllerCreateWithLocation_ptr)

    Interceptor.attach(g_IODPControllerCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerCreateWithLocation");
        }
    });        
 
    const g_IODPControllerCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IODPControllerCreateWithService');
    console.log("[i] g_IODPControllerCreateWithService_ptr addr: " + g_IODPControllerCreateWithService_ptr)

    Interceptor.attach(g_IODPControllerCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerCreateWithService");
        }
    });        
 
    const g_IODPControllerGetAVController_ptr = Module.getExportByName(g_proc_name, 'IODPControllerGetAVController');
    console.log("[i] g_IODPControllerGetAVController_ptr addr: " + g_IODPControllerGetAVController_ptr)

    Interceptor.attach(g_IODPControllerGetAVController_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerGetAVController")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerGetAVController");
        }
    });        
 
    const g_IODPControllerGetMaxLaneCount_ptr = Module.getExportByName(g_proc_name, 'IODPControllerGetMaxLaneCount');
    console.log("[i] g_IODPControllerGetMaxLaneCount_ptr addr: " + g_IODPControllerGetMaxLaneCount_ptr)

    Interceptor.attach(g_IODPControllerGetMaxLaneCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerGetMaxLaneCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerGetMaxLaneCount");
        }
    });        
 
    const g_IODPControllerGetMaxLinkRate_ptr = Module.getExportByName(g_proc_name, 'IODPControllerGetMaxLinkRate');
    console.log("[i] g_IODPControllerGetMaxLinkRate_ptr addr: " + g_IODPControllerGetMaxLinkRate_ptr)

    Interceptor.attach(g_IODPControllerGetMaxLinkRate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerGetMaxLinkRate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerGetMaxLinkRate");
        }
    });        
 
    const g_IODPControllerGetMinLaneCount_ptr = Module.getExportByName(g_proc_name, 'IODPControllerGetMinLaneCount');
    console.log("[i] g_IODPControllerGetMinLaneCount_ptr addr: " + g_IODPControllerGetMinLaneCount_ptr)

    Interceptor.attach(g_IODPControllerGetMinLaneCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerGetMinLaneCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerGetMinLaneCount");
        }
    });        
 
    const g_IODPControllerGetMinLinkRate_ptr = Module.getExportByName(g_proc_name, 'IODPControllerGetMinLinkRate');
    console.log("[i] g_IODPControllerGetMinLinkRate_ptr addr: " + g_IODPControllerGetMinLinkRate_ptr)

    Interceptor.attach(g_IODPControllerGetMinLinkRate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerGetMinLinkRate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerGetMinLinkRate");
        }
    });        
 
    const g_IODPControllerGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IODPControllerGetTypeID');
    console.log("[i] g_IODPControllerGetTypeID_ptr addr: " + g_IODPControllerGetTypeID_ptr)

    Interceptor.attach(g_IODPControllerGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerGetTypeID");
        }
    });        
 
    const g_IODPControllerSetDriveSettings_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetDriveSettings');
    console.log("[i] g_IODPControllerSetDriveSettings_ptr addr: " + g_IODPControllerSetDriveSettings_ptr)

    Interceptor.attach(g_IODPControllerSetDriveSettings_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetDriveSettings")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetDriveSettings");
        }
    });        
 
    const g_IODPControllerSetLaneCount_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetLaneCount');
    console.log("[i] g_IODPControllerSetLaneCount_ptr addr: " + g_IODPControllerSetLaneCount_ptr)

    Interceptor.attach(g_IODPControllerSetLaneCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetLaneCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetLaneCount");
        }
    });        
 
    const g_IODPControllerSetLinkRate_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetLinkRate');
    console.log("[i] g_IODPControllerSetLinkRate_ptr addr: " + g_IODPControllerSetLinkRate_ptr)

    Interceptor.attach(g_IODPControllerSetLinkRate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetLinkRate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetLinkRate");
        }
    });        
 
    const g_IODPControllerSetMaxLaneCount_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetMaxLaneCount');
    console.log("[i] g_IODPControllerSetMaxLaneCount_ptr addr: " + g_IODPControllerSetMaxLaneCount_ptr)

    Interceptor.attach(g_IODPControllerSetMaxLaneCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetMaxLaneCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetMaxLaneCount");
        }
    });        
 
    const g_IODPControllerSetMaxLinkRate_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetMaxLinkRate');
    console.log("[i] g_IODPControllerSetMaxLinkRate_ptr addr: " + g_IODPControllerSetMaxLinkRate_ptr)

    Interceptor.attach(g_IODPControllerSetMaxLinkRate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetMaxLinkRate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetMaxLinkRate");
        }
    });        
 
    const g_IODPControllerSetMinLaneCount_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetMinLaneCount');
    console.log("[i] g_IODPControllerSetMinLaneCount_ptr addr: " + g_IODPControllerSetMinLaneCount_ptr)

    Interceptor.attach(g_IODPControllerSetMinLaneCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetMinLaneCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetMinLaneCount");
        }
    });        
 
    const g_IODPControllerSetMinLinkRate_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetMinLinkRate');
    console.log("[i] g_IODPControllerSetMinLinkRate_ptr addr: " + g_IODPControllerSetMinLinkRate_ptr)

    Interceptor.attach(g_IODPControllerSetMinLinkRate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetMinLinkRate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetMinLinkRate");
        }
    });        
 
    const g_IODPControllerSetQualityPattern_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetQualityPattern');
    console.log("[i] g_IODPControllerSetQualityPattern_ptr addr: " + g_IODPControllerSetQualityPattern_ptr)

    Interceptor.attach(g_IODPControllerSetQualityPattern_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetQualityPattern")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetQualityPattern");
        }
    });        
 
    const g_IODPControllerSetScramblingInhibited_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetScramblingInhibited');
    console.log("[i] g_IODPControllerSetScramblingInhibited_ptr addr: " + g_IODPControllerSetScramblingInhibited_ptr)

    Interceptor.attach(g_IODPControllerSetScramblingInhibited_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetScramblingInhibited")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetScramblingInhibited");
        }
    });        
 
    const g_IODPControllerSetSupportsDownspread_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetSupportsDownspread');
    console.log("[i] g_IODPControllerSetSupportsDownspread_ptr addr: " + g_IODPControllerSetSupportsDownspread_ptr)

    Interceptor.attach(g_IODPControllerSetSupportsDownspread_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetSupportsDownspread")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetSupportsDownspread");
        }
    });        
 
    const g_IODPControllerSetSupportsEnhancedMode_ptr = Module.getExportByName(g_proc_name, 'IODPControllerSetSupportsEnhancedMode');
    console.log("[i] g_IODPControllerSetSupportsEnhancedMode_ptr addr: " + g_IODPControllerSetSupportsEnhancedMode_ptr)

    Interceptor.attach(g_IODPControllerSetSupportsEnhancedMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPControllerSetSupportsEnhancedMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPControllerSetSupportsEnhancedMode");
        }
    });        
 
    const g_IODPCreateStringWithLinkTrainingData_ptr = Module.getExportByName(g_proc_name, 'IODPCreateStringWithLinkTrainingData');
    console.log("[i] g_IODPCreateStringWithLinkTrainingData_ptr addr: " + g_IODPCreateStringWithLinkTrainingData_ptr)

    Interceptor.attach(g_IODPCreateStringWithLinkTrainingData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPCreateStringWithLinkTrainingData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPCreateStringWithLinkTrainingData");
        }
    });        
 
    const g_IODPDeviceCreate_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceCreate');
    console.log("[i] g_IODPDeviceCreate_ptr addr: " + g_IODPDeviceCreate_ptr)

    Interceptor.attach(g_IODPDeviceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceCreate");
        }
    });        
 
    const g_IODPDeviceCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceCreateWithLocation');
    console.log("[i] g_IODPDeviceCreateWithLocation_ptr addr: " + g_IODPDeviceCreateWithLocation_ptr)

    Interceptor.attach(g_IODPDeviceCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceCreateWithLocation");
        }
    });        
 
    const g_IODPDeviceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceCreateWithService');
    console.log("[i] g_IODPDeviceCreateWithService_ptr addr: " + g_IODPDeviceCreateWithService_ptr)

    Interceptor.attach(g_IODPDeviceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceCreateWithService");
        }
    });        
 
    const g_IODPDeviceGetAVDevice_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetAVDevice');
    console.log("[i] g_IODPDeviceGetAVDevice_ptr addr: " + g_IODPDeviceGetAVDevice_ptr)

    Interceptor.attach(g_IODPDeviceGetAVDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetAVDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetAVDevice");
        }
    });        
 
    const g_IODPDeviceGetController_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetController');
    console.log("[i] g_IODPDeviceGetController_ptr addr: " + g_IODPDeviceGetController_ptr)

    Interceptor.attach(g_IODPDeviceGetController_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetController")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetController");
        }
    });        
 
    const g_IODPDeviceGetLinkTrainingData_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetLinkTrainingData');
    console.log("[i] g_IODPDeviceGetLinkTrainingData_ptr addr: " + g_IODPDeviceGetLinkTrainingData_ptr)

    Interceptor.attach(g_IODPDeviceGetLinkTrainingData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetLinkTrainingData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetLinkTrainingData");
        }
    });        
 
    const g_IODPDeviceGetMaxLaneCount_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetMaxLaneCount');
    console.log("[i] g_IODPDeviceGetMaxLaneCount_ptr addr: " + g_IODPDeviceGetMaxLaneCount_ptr)

    Interceptor.attach(g_IODPDeviceGetMaxLaneCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetMaxLaneCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetMaxLaneCount");
        }
    });        
 
    const g_IODPDeviceGetMaxLinkRate_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetMaxLinkRate');
    console.log("[i] g_IODPDeviceGetMaxLinkRate_ptr addr: " + g_IODPDeviceGetMaxLinkRate_ptr)

    Interceptor.attach(g_IODPDeviceGetMaxLinkRate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetMaxLinkRate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetMaxLinkRate");
        }
    });        
 
    const g_IODPDeviceGetRevisionMajor_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetRevisionMajor');
    console.log("[i] g_IODPDeviceGetRevisionMajor_ptr addr: " + g_IODPDeviceGetRevisionMajor_ptr)

    Interceptor.attach(g_IODPDeviceGetRevisionMajor_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetRevisionMajor")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetRevisionMajor");
        }
    });        
 
    const g_IODPDeviceGetRevisionMinor_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetRevisionMinor');
    console.log("[i] g_IODPDeviceGetRevisionMinor_ptr addr: " + g_IODPDeviceGetRevisionMinor_ptr)

    Interceptor.attach(g_IODPDeviceGetRevisionMinor_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetRevisionMinor")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetRevisionMinor");
        }
    });        
 
    const g_IODPDeviceGetSupportsDownspread_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetSupportsDownspread');
    console.log("[i] g_IODPDeviceGetSupportsDownspread_ptr addr: " + g_IODPDeviceGetSupportsDownspread_ptr)

    Interceptor.attach(g_IODPDeviceGetSupportsDownspread_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetSupportsDownspread")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetSupportsDownspread");
        }
    });        
 
    const g_IODPDeviceGetSupportsEnhancedMode_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetSupportsEnhancedMode');
    console.log("[i] g_IODPDeviceGetSupportsEnhancedMode_ptr addr: " + g_IODPDeviceGetSupportsEnhancedMode_ptr)

    Interceptor.attach(g_IODPDeviceGetSupportsEnhancedMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetSupportsEnhancedMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetSupportsEnhancedMode");
        }
    });        
 
    const g_IODPDeviceGetSymbolErrorCount_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetSymbolErrorCount');
    console.log("[i] g_IODPDeviceGetSymbolErrorCount_ptr addr: " + g_IODPDeviceGetSymbolErrorCount_ptr)

    Interceptor.attach(g_IODPDeviceGetSymbolErrorCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetSymbolErrorCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetSymbolErrorCount");
        }
    });        
 
    const g_IODPDeviceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceGetTypeID');
    console.log("[i] g_IODPDeviceGetTypeID_ptr addr: " + g_IODPDeviceGetTypeID_ptr)

    Interceptor.attach(g_IODPDeviceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceGetTypeID");
        }
    });        
 
    const g_IODPDeviceReadDPCD_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceReadDPCD');
    console.log("[i] g_IODPDeviceReadDPCD_ptr addr: " + g_IODPDeviceReadDPCD_ptr)

    Interceptor.attach(g_IODPDeviceReadDPCD_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceReadDPCD")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceReadDPCD");
        }
    });        
 
    const g_IODPDeviceSetUpdateMode_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceSetUpdateMode');
    console.log("[i] g_IODPDeviceSetUpdateMode_ptr addr: " + g_IODPDeviceSetUpdateMode_ptr)

    Interceptor.attach(g_IODPDeviceSetUpdateMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceSetUpdateMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceSetUpdateMode");
        }
    });        
 
    const g_IODPDeviceSetUpdated_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceSetUpdated');
    console.log("[i] g_IODPDeviceSetUpdated_ptr addr: " + g_IODPDeviceSetUpdated_ptr)

    Interceptor.attach(g_IODPDeviceSetUpdated_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceSetUpdated")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceSetUpdated");
        }
    });        
 
    const g_IODPDeviceWriteDPCD_ptr = Module.getExportByName(g_proc_name, 'IODPDeviceWriteDPCD');
    console.log("[i] g_IODPDeviceWriteDPCD_ptr addr: " + g_IODPDeviceWriteDPCD_ptr)

    Interceptor.attach(g_IODPDeviceWriteDPCD_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPDeviceWriteDPCD")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPDeviceWriteDPCD");
        }
    });        
 
    const g_IODPServiceCreate_ptr = Module.getExportByName(g_proc_name, 'IODPServiceCreate');
    console.log("[i] g_IODPServiceCreate_ptr addr: " + g_IODPServiceCreate_ptr)

    Interceptor.attach(g_IODPServiceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceCreate");
        }
    });        
 
    const g_IODPServiceCreateWithLocation_ptr = Module.getExportByName(g_proc_name, 'IODPServiceCreateWithLocation');
    console.log("[i] g_IODPServiceCreateWithLocation_ptr addr: " + g_IODPServiceCreateWithLocation_ptr)

    Interceptor.attach(g_IODPServiceCreateWithLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceCreateWithLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceCreateWithLocation");
        }
    });        
 
    const g_IODPServiceCreateWithService_ptr = Module.getExportByName(g_proc_name, 'IODPServiceCreateWithService');
    console.log("[i] g_IODPServiceCreateWithService_ptr addr: " + g_IODPServiceCreateWithService_ptr)

    Interceptor.attach(g_IODPServiceCreateWithService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceCreateWithService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceCreateWithService");
        }
    });        
 
    const g_IODPServiceGetAVService_ptr = Module.getExportByName(g_proc_name, 'IODPServiceGetAVService');
    console.log("[i] g_IODPServiceGetAVService_ptr addr: " + g_IODPServiceGetAVService_ptr)

    Interceptor.attach(g_IODPServiceGetAVService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceGetAVService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceGetAVService");
        }
    });        
 
    const g_IODPServiceGetDevice_ptr = Module.getExportByName(g_proc_name, 'IODPServiceGetDevice');
    console.log("[i] g_IODPServiceGetDevice_ptr addr: " + g_IODPServiceGetDevice_ptr)

    Interceptor.attach(g_IODPServiceGetDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceGetDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceGetDevice");
        }
    });        
 
    const g_IODPServiceGetSinkCount_ptr = Module.getExportByName(g_proc_name, 'IODPServiceGetSinkCount');
    console.log("[i] g_IODPServiceGetSinkCount_ptr addr: " + g_IODPServiceGetSinkCount_ptr)

    Interceptor.attach(g_IODPServiceGetSinkCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceGetSinkCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceGetSinkCount");
        }
    });        
 
    const g_IODPServiceGetSymbolErrorCount_ptr = Module.getExportByName(g_proc_name, 'IODPServiceGetSymbolErrorCount');
    console.log("[i] g_IODPServiceGetSymbolErrorCount_ptr addr: " + g_IODPServiceGetSymbolErrorCount_ptr)

    Interceptor.attach(g_IODPServiceGetSymbolErrorCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceGetSymbolErrorCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceGetSymbolErrorCount");
        }
    });        
 
    const g_IODPServiceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IODPServiceGetTypeID');
    console.log("[i] g_IODPServiceGetTypeID_ptr addr: " + g_IODPServiceGetTypeID_ptr)

    Interceptor.attach(g_IODPServiceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceGetTypeID");
        }
    });        
 
    const g_IODPServiceRetrainLink_ptr = Module.getExportByName(g_proc_name, 'IODPServiceRetrainLink');
    console.log("[i] g_IODPServiceRetrainLink_ptr addr: " + g_IODPServiceRetrainLink_ptr)

    Interceptor.attach(g_IODPServiceRetrainLink_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODPServiceRetrainLink")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODPServiceRetrainLink");
        }
    });        
 
    const g_IODataQueueAllocateNotificationPort_ptr = Module.getExportByName(g_proc_name, 'IODataQueueAllocateNotificationPort');
    console.log("[i] g_IODataQueueAllocateNotificationPort_ptr addr: " + g_IODataQueueAllocateNotificationPort_ptr)

    Interceptor.attach(g_IODataQueueAllocateNotificationPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueueAllocateNotificationPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueueAllocateNotificationPort");
        }
    });        
 
    const g_IODataQueueDataAvailable_ptr = Module.getExportByName(g_proc_name, 'IODataQueueDataAvailable');
    console.log("[i] g_IODataQueueDataAvailable_ptr addr: " + g_IODataQueueDataAvailable_ptr)

    Interceptor.attach(g_IODataQueueDataAvailable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueueDataAvailable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueueDataAvailable");
        }
    });        
 
    const g_IODataQueueDequeue_ptr = Module.getExportByName(g_proc_name, 'IODataQueueDequeue');
    console.log("[i] g_IODataQueueDequeue_ptr addr: " + g_IODataQueueDequeue_ptr)

    Interceptor.attach(g_IODataQueueDequeue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueueDequeue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueueDequeue");
        }
    });        
 
    const g_IODataQueueEnqueue_ptr = Module.getExportByName(g_proc_name, 'IODataQueueEnqueue');
    console.log("[i] g_IODataQueueEnqueue_ptr addr: " + g_IODataQueueEnqueue_ptr)

    Interceptor.attach(g_IODataQueueEnqueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueueEnqueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueueEnqueue");
        }
    });        
 
    const g_IODataQueuePeek_ptr = Module.getExportByName(g_proc_name, 'IODataQueuePeek');
    console.log("[i] g_IODataQueuePeek_ptr addr: " + g_IODataQueuePeek_ptr)

    Interceptor.attach(g_IODataQueuePeek_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueuePeek")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueuePeek");
        }
    });        
 
    const g_IODataQueueSetNotificationPort_ptr = Module.getExportByName(g_proc_name, 'IODataQueueSetNotificationPort');
    console.log("[i] g_IODataQueueSetNotificationPort_ptr addr: " + g_IODataQueueSetNotificationPort_ptr)

    Interceptor.attach(g_IODataQueueSetNotificationPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueueSetNotificationPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueueSetNotificationPort");
        }
    });        
 
    const g_IODataQueueWaitForAvailableData_ptr = Module.getExportByName(g_proc_name, 'IODataQueueWaitForAvailableData');
    console.log("[i] g_IODataQueueWaitForAvailableData_ptr addr: " + g_IODataQueueWaitForAvailableData_ptr)

    Interceptor.attach(g_IODataQueueWaitForAvailableData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODataQueueWaitForAvailableData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODataQueueWaitForAvailableData");
        }
    });        
 
    const g_IODeregisterApp_ptr = Module.getExportByName(g_proc_name, 'IODeregisterApp');
    console.log("[i] g_IODeregisterApp_ptr addr: " + g_IODeregisterApp_ptr)

    Interceptor.attach(g_IODeregisterApp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODeregisterApp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODeregisterApp");
        }
    });        
 
    const g_IODeregisterForRemoteSystemPower_ptr = Module.getExportByName(g_proc_name, 'IODeregisterForRemoteSystemPower');
    console.log("[i] g_IODeregisterForRemoteSystemPower_ptr addr: " + g_IODeregisterForRemoteSystemPower_ptr)

    Interceptor.attach(g_IODeregisterForRemoteSystemPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODeregisterForRemoteSystemPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODeregisterForRemoteSystemPower");
        }
    });        
 
    const g_IODeregisterForSystemPower_ptr = Module.getExportByName(g_proc_name, 'IODeregisterForSystemPower');
    console.log("[i] g_IODeregisterForSystemPower_ptr addr: " + g_IODeregisterForSystemPower_ptr)

    Interceptor.attach(g_IODeregisterForSystemPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODeregisterForSystemPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODeregisterForSystemPower");
        }
    });        
 
    const g_IODestroyPlugInInterface_ptr = Module.getExportByName(g_proc_name, 'IODestroyPlugInInterface');
    console.log("[i] g_IODestroyPlugInInterface_ptr addr: " + g_IODestroyPlugInInterface_ptr)

    Interceptor.attach(g_IODestroyPlugInInterface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODestroyPlugInInterface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODestroyPlugInInterface");
        }
    });        
 
    const g_IODispatchCalloutFromCFMessage_ptr = Module.getExportByName(g_proc_name, 'IODispatchCalloutFromCFMessage');
    console.log("[i] g_IODispatchCalloutFromCFMessage_ptr addr: " + g_IODispatchCalloutFromCFMessage_ptr)

    Interceptor.attach(g_IODispatchCalloutFromCFMessage_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODispatchCalloutFromCFMessage")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODispatchCalloutFromCFMessage");
        }
    });        
 
    const g_IODispatchCalloutFromMessage_ptr = Module.getExportByName(g_proc_name, 'IODispatchCalloutFromMessage');
    console.log("[i] g_IODispatchCalloutFromMessage_ptr addr: " + g_IODispatchCalloutFromMessage_ptr)

    Interceptor.attach(g_IODispatchCalloutFromMessage_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODispatchCalloutFromMessage")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODispatchCalloutFromMessage");
        }
    });        
 
    const g_IODisplayCommitParameters_ptr = Module.getExportByName(g_proc_name, 'IODisplayCommitParameters');
    console.log("[i] g_IODisplayCommitParameters_ptr addr: " + g_IODisplayCommitParameters_ptr)

    Interceptor.attach(g_IODisplayCommitParameters_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayCommitParameters")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayCommitParameters");
        }
    });        
 
    const g_IODisplayCopyFloatParameters_ptr = Module.getExportByName(g_proc_name, 'IODisplayCopyFloatParameters');
    console.log("[i] g_IODisplayCopyFloatParameters_ptr addr: " + g_IODisplayCopyFloatParameters_ptr)

    Interceptor.attach(g_IODisplayCopyFloatParameters_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayCopyFloatParameters")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayCopyFloatParameters");
        }
    });        
 
    const g_IODisplayCopyParameters_ptr = Module.getExportByName(g_proc_name, 'IODisplayCopyParameters');
    console.log("[i] g_IODisplayCopyParameters_ptr addr: " + g_IODisplayCopyParameters_ptr)

    Interceptor.attach(g_IODisplayCopyParameters_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayCopyParameters")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayCopyParameters");
        }
    });        
 
    const g_IODisplayCreateInfoDictionary_ptr = Module.getExportByName(g_proc_name, 'IODisplayCreateInfoDictionary');
    console.log("[i] g_IODisplayCreateInfoDictionary_ptr addr: " + g_IODisplayCreateInfoDictionary_ptr)

    Interceptor.attach(g_IODisplayCreateInfoDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayCreateInfoDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayCreateInfoDictionary");
        }
    });        
 
    const g_IODisplayForFramebuffer_ptr = Module.getExportByName(g_proc_name, 'IODisplayForFramebuffer');
    console.log("[i] g_IODisplayForFramebuffer_ptr addr: " + g_IODisplayForFramebuffer_ptr)

    Interceptor.attach(g_IODisplayForFramebuffer_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayForFramebuffer")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayForFramebuffer");
        }
    });        
 
    const g_IODisplayGetFloatParameter_ptr = Module.getExportByName(g_proc_name, 'IODisplayGetFloatParameter');
    console.log("[i] g_IODisplayGetFloatParameter_ptr addr: " + g_IODisplayGetFloatParameter_ptr)

    Interceptor.attach(g_IODisplayGetFloatParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayGetFloatParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayGetFloatParameter");
        }
    });        
 
    const g_IODisplayGetIntegerRangeParameter_ptr = Module.getExportByName(g_proc_name, 'IODisplayGetIntegerRangeParameter');
    console.log("[i] g_IODisplayGetIntegerRangeParameter_ptr addr: " + g_IODisplayGetIntegerRangeParameter_ptr)

    Interceptor.attach(g_IODisplayGetIntegerRangeParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayGetIntegerRangeParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayGetIntegerRangeParameter");
        }
    });        
 
    const g_IODisplayMatchDictionaries_ptr = Module.getExportByName(g_proc_name, 'IODisplayMatchDictionaries');
    console.log("[i] g_IODisplayMatchDictionaries_ptr addr: " + g_IODisplayMatchDictionaries_ptr)

    Interceptor.attach(g_IODisplayMatchDictionaries_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplayMatchDictionaries")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplayMatchDictionaries");
        }
    });        
 
    const g_IODisplaySetFloatParameter_ptr = Module.getExportByName(g_proc_name, 'IODisplaySetFloatParameter');
    console.log("[i] g_IODisplaySetFloatParameter_ptr addr: " + g_IODisplaySetFloatParameter_ptr)

    Interceptor.attach(g_IODisplaySetFloatParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplaySetFloatParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplaySetFloatParameter");
        }
    });        
 
    const g_IODisplaySetIntegerParameter_ptr = Module.getExportByName(g_proc_name, 'IODisplaySetIntegerParameter');
    console.log("[i] g_IODisplaySetIntegerParameter_ptr addr: " + g_IODisplaySetIntegerParameter_ptr)

    Interceptor.attach(g_IODisplaySetIntegerParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplaySetIntegerParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplaySetIntegerParameter");
        }
    });        
 
    const g_IODisplaySetParameters_ptr = Module.getExportByName(g_proc_name, 'IODisplaySetParameters');
    console.log("[i] g_IODisplaySetParameters_ptr addr: " + g_IODisplaySetParameters_ptr)

    Interceptor.attach(g_IODisplaySetParameters_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IODisplaySetParameters")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IODisplaySetParameters");
        }
    });        
 
    const g_IOEthernetControllerCreate_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerCreate');
    console.log("[i] g_IOEthernetControllerCreate_ptr addr: " + g_IOEthernetControllerCreate_ptr)

    Interceptor.attach(g_IOEthernetControllerCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerCreate");
        }
    });        
 
    const g_IOEthernetControllerGetBSDSocket_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerGetBSDSocket');
    console.log("[i] g_IOEthernetControllerGetBSDSocket_ptr addr: " + g_IOEthernetControllerGetBSDSocket_ptr)

    Interceptor.attach(g_IOEthernetControllerGetBSDSocket_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerGetBSDSocket")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerGetBSDSocket");
        }
    });        
 
    const g_IOEthernetControllerGetIONetworkInterfaceObject_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerGetIONetworkInterfaceObject');
    console.log("[i] g_IOEthernetControllerGetIONetworkInterfaceObject_ptr addr: " + g_IOEthernetControllerGetIONetworkInterfaceObject_ptr)

    Interceptor.attach(g_IOEthernetControllerGetIONetworkInterfaceObject_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerGetIONetworkInterfaceObject")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerGetIONetworkInterfaceObject");
        }
    });        
 
    const g_IOEthernetControllerGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerGetTypeID');
    console.log("[i] g_IOEthernetControllerGetTypeID_ptr addr: " + g_IOEthernetControllerGetTypeID_ptr)

    Interceptor.attach(g_IOEthernetControllerGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerGetTypeID");
        }
    });        
 
    const g_IOEthernetControllerReadPacket_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerReadPacket');
    console.log("[i] g_IOEthernetControllerReadPacket_ptr addr: " + g_IOEthernetControllerReadPacket_ptr)

    Interceptor.attach(g_IOEthernetControllerReadPacket_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerReadPacket")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerReadPacket");
        }
    });        
 
    const g_IOEthernetControllerRegisterBSDAttachCallback_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerRegisterBSDAttachCallback');
    console.log("[i] g_IOEthernetControllerRegisterBSDAttachCallback_ptr addr: " + g_IOEthernetControllerRegisterBSDAttachCallback_ptr)

    Interceptor.attach(g_IOEthernetControllerRegisterBSDAttachCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerRegisterBSDAttachCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerRegisterBSDAttachCallback");
        }
    });        
 
    const g_IOEthernetControllerRegisterDisableCallback_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerRegisterDisableCallback');
    console.log("[i] g_IOEthernetControllerRegisterDisableCallback_ptr addr: " + g_IOEthernetControllerRegisterDisableCallback_ptr)

    Interceptor.attach(g_IOEthernetControllerRegisterDisableCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerRegisterDisableCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerRegisterDisableCallback");
        }
    });        
 
    const g_IOEthernetControllerRegisterEnableCallback_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerRegisterEnableCallback');
    console.log("[i] g_IOEthernetControllerRegisterEnableCallback_ptr addr: " + g_IOEthernetControllerRegisterEnableCallback_ptr)

    Interceptor.attach(g_IOEthernetControllerRegisterEnableCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerRegisterEnableCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerRegisterEnableCallback");
        }
    });        
 
    const g_IOEthernetControllerRegisterPacketAvailableCallback_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerRegisterPacketAvailableCallback');
    console.log("[i] g_IOEthernetControllerRegisterPacketAvailableCallback_ptr addr: " + g_IOEthernetControllerRegisterPacketAvailableCallback_ptr)

    Interceptor.attach(g_IOEthernetControllerRegisterPacketAvailableCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerRegisterPacketAvailableCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerRegisterPacketAvailableCallback");
        }
    });        
 
    const g_IOEthernetControllerScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerScheduleWithRunLoop');
    console.log("[i] g_IOEthernetControllerScheduleWithRunLoop_ptr addr: " + g_IOEthernetControllerScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOEthernetControllerScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerScheduleWithRunLoop");
        }
    });        
 
    const g_IOEthernetControllerSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerSetDispatchQueue');
    console.log("[i] g_IOEthernetControllerSetDispatchQueue_ptr addr: " + g_IOEthernetControllerSetDispatchQueue_ptr)

    Interceptor.attach(g_IOEthernetControllerSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerSetDispatchQueue");
        }
    });        
 
    const g_IOEthernetControllerSetLinkStatus_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerSetLinkStatus');
    console.log("[i] g_IOEthernetControllerSetLinkStatus_ptr addr: " + g_IOEthernetControllerSetLinkStatus_ptr)

    Interceptor.attach(g_IOEthernetControllerSetLinkStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerSetLinkStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerSetLinkStatus");
        }
    });        
 
    const g_IOEthernetControllerSetPowerSavings_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerSetPowerSavings');
    console.log("[i] g_IOEthernetControllerSetPowerSavings_ptr addr: " + g_IOEthernetControllerSetPowerSavings_ptr)

    Interceptor.attach(g_IOEthernetControllerSetPowerSavings_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerSetPowerSavings")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerSetPowerSavings");
        }
    });        
 
    const g_IOEthernetControllerUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerUnscheduleFromRunLoop');
    console.log("[i] g_IOEthernetControllerUnscheduleFromRunLoop_ptr addr: " + g_IOEthernetControllerUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOEthernetControllerUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOEthernetControllerWritePacket_ptr = Module.getExportByName(g_proc_name, 'IOEthernetControllerWritePacket');
    console.log("[i] g_IOEthernetControllerWritePacket_ptr addr: " + g_IOEthernetControllerWritePacket_ptr)

    Interceptor.attach(g_IOEthernetControllerWritePacket_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOEthernetControllerWritePacket")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOEthernetControllerWritePacket");
        }
    });        
 
    const g_IOFBCopyI2CInterfaceForBus_ptr = Module.getExportByName(g_proc_name, 'IOFBCopyI2CInterfaceForBus');
    console.log("[i] g_IOFBCopyI2CInterfaceForBus_ptr addr: " + g_IOFBCopyI2CInterfaceForBus_ptr)

    Interceptor.attach(g_IOFBCopyI2CInterfaceForBus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOFBCopyI2CInterfaceForBus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOFBCopyI2CInterfaceForBus");
        }
    });        
 
    const g_IOFBGetI2CInterfaceCount_ptr = Module.getExportByName(g_proc_name, 'IOFBGetI2CInterfaceCount');
    console.log("[i] g_IOFBGetI2CInterfaceCount_ptr addr: " + g_IOFBGetI2CInterfaceCount_ptr)

    Interceptor.attach(g_IOFBGetI2CInterfaceCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOFBGetI2CInterfaceCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOFBGetI2CInterfaceCount");
        }
    });        
 
    const g_IOFramebufferOpen_ptr = Module.getExportByName(g_proc_name, 'IOFramebufferOpen');
    console.log("[i] g_IOFramebufferOpen_ptr addr: " + g_IOFramebufferOpen_ptr)

    Interceptor.attach(g_IOFramebufferOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOFramebufferOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOFramebufferOpen");
        }
    });        
 
    const g_IOGetSystemLoadAdvisory_ptr = Module.getExportByName(g_proc_name, 'IOGetSystemLoadAdvisory');
    console.log("[i] g_IOGetSystemLoadAdvisory_ptr addr: " + g_IOGetSystemLoadAdvisory_ptr)

    Interceptor.attach(g_IOGetSystemLoadAdvisory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOGetSystemLoadAdvisory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOGetSystemLoadAdvisory");
        }
    });        
 
    const g_IOHIDAnalyticsEventActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventActivate');
    console.log("[i] g_IOHIDAnalyticsEventActivate_ptr addr: " + g_IOHIDAnalyticsEventActivate_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventActivate");
        }
    });        
 
    const g_IOHIDAnalyticsEventAddField_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventAddField');
    console.log("[i] g_IOHIDAnalyticsEventAddField_ptr addr: " + g_IOHIDAnalyticsEventAddField_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventAddField_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventAddField")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventAddField");
        }
    });        
 
    const g_IOHIDAnalyticsEventAddHistogramField_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventAddHistogramField');
    console.log("[i] g_IOHIDAnalyticsEventAddHistogramField_ptr addr: " + g_IOHIDAnalyticsEventAddHistogramField_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventAddHistogramField_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventAddHistogramField")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventAddHistogramField");
        }
    });        
 
    const g_IOHIDAnalyticsEventCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventCancel');
    console.log("[i] g_IOHIDAnalyticsEventCancel_ptr addr: " + g_IOHIDAnalyticsEventCancel_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventCancel");
        }
    });        
 
    const g_IOHIDAnalyticsEventCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventCreate');
    console.log("[i] g_IOHIDAnalyticsEventCreate_ptr addr: " + g_IOHIDAnalyticsEventCreate_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventCreate");
        }
    });        
 
    const g_IOHIDAnalyticsEventSetIntegerValueForField_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventSetIntegerValueForField');
    console.log("[i] g_IOHIDAnalyticsEventSetIntegerValueForField_ptr addr: " + g_IOHIDAnalyticsEventSetIntegerValueForField_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventSetIntegerValueForField_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventSetIntegerValueForField")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventSetIntegerValueForField");
        }
    });        
 
    const g_IOHIDAnalyticsEventSetStringValueForField_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsEventSetStringValueForField');
    console.log("[i] g_IOHIDAnalyticsEventSetStringValueForField_ptr addr: " + g_IOHIDAnalyticsEventSetStringValueForField_ptr)

    Interceptor.attach(g_IOHIDAnalyticsEventSetStringValueForField_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsEventSetStringValueForField")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsEventSetStringValueForField");
        }
    });        
 
    const g_IOHIDAnalyticsHistogramEventCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsHistogramEventCreate');
    console.log("[i] g_IOHIDAnalyticsHistogramEventCreate_ptr addr: " + g_IOHIDAnalyticsHistogramEventCreate_ptr)

    Interceptor.attach(g_IOHIDAnalyticsHistogramEventCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsHistogramEventCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsHistogramEventCreate");
        }
    });        
 
    const g_IOHIDAnalyticsHistogramEventSetIntegerValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDAnalyticsHistogramEventSetIntegerValue');
    console.log("[i] g_IOHIDAnalyticsHistogramEventSetIntegerValue_ptr addr: " + g_IOHIDAnalyticsHistogramEventSetIntegerValue_ptr)

    Interceptor.attach(g_IOHIDAnalyticsHistogramEventSetIntegerValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDAnalyticsHistogramEventSetIntegerValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDAnalyticsHistogramEventSetIntegerValue");
        }
    });        
 
    const g_IOHIDCheckAccess_ptr = Module.getExportByName(g_proc_name, 'IOHIDCheckAccess');
    console.log("[i] g_IOHIDCheckAccess_ptr addr: " + g_IOHIDCheckAccess_ptr)

    Interceptor.attach(g_IOHIDCheckAccess_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDCheckAccess")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDCheckAccess");
        }
    });        
 
    const g_IOHIDConnectionFilterActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterActivate');
    console.log("[i] g_IOHIDConnectionFilterActivate_ptr addr: " + g_IOHIDConnectionFilterActivate_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterActivate");
        }
    });        
 
    const g_IOHIDConnectionFilterCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterCancel');
    console.log("[i] g_IOHIDConnectionFilterCancel_ptr addr: " + g_IOHIDConnectionFilterCancel_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterCancel");
        }
    });        
 
    const g_IOHIDConnectionFilterCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterCopyProperty');
    console.log("[i] g_IOHIDConnectionFilterCopyProperty_ptr addr: " + g_IOHIDConnectionFilterCopyProperty_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterCopyProperty");
        }
    });        
 
    const g_IOHIDConnectionFilterCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterCreate');
    console.log("[i] g_IOHIDConnectionFilterCreate_ptr addr: " + g_IOHIDConnectionFilterCreate_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterCreate");
        }
    });        
 
    const g_IOHIDConnectionFilterFilterEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterFilterEvent');
    console.log("[i] g_IOHIDConnectionFilterFilterEvent_ptr addr: " + g_IOHIDConnectionFilterFilterEvent_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterFilterEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterFilterEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterFilterEvent");
        }
    });        
 
    const g_IOHIDConnectionFilterGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterGetTypeID');
    console.log("[i] g_IOHIDConnectionFilterGetTypeID_ptr addr: " + g_IOHIDConnectionFilterGetTypeID_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterGetTypeID");
        }
    });        
 
    const g_IOHIDConnectionFilterSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterSetCancelHandler');
    console.log("[i] g_IOHIDConnectionFilterSetCancelHandler_ptr addr: " + g_IOHIDConnectionFilterSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterSetCancelHandler");
        }
    });        
 
    const g_IOHIDConnectionFilterSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterSetDispatchQueue');
    console.log("[i] g_IOHIDConnectionFilterSetDispatchQueue_ptr addr: " + g_IOHIDConnectionFilterSetDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterSetDispatchQueue");
        }
    });        
 
    const g_IOHIDConnectionFilterSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDConnectionFilterSetProperty');
    console.log("[i] g_IOHIDConnectionFilterSetProperty_ptr addr: " + g_IOHIDConnectionFilterSetProperty_ptr)

    Interceptor.attach(g_IOHIDConnectionFilterSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDConnectionFilterSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDConnectionFilterSetProperty");
        }
    });        
 
    const g_IOHIDCopyCFTypeParameter_ptr = Module.getExportByName(g_proc_name, 'IOHIDCopyCFTypeParameter');
    console.log("[i] g_IOHIDCopyCFTypeParameter_ptr addr: " + g_IOHIDCopyCFTypeParameter_ptr)

    Interceptor.attach(g_IOHIDCopyCFTypeParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDCopyCFTypeParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDCopyCFTypeParameter");
        }
    });        
 
    const g_IOHIDCopyHIDParameterFromEventSystem_ptr = Module.getExportByName(g_proc_name, 'IOHIDCopyHIDParameterFromEventSystem');
    console.log("[i] g_IOHIDCopyHIDParameterFromEventSystem_ptr addr: " + g_IOHIDCopyHIDParameterFromEventSystem_ptr)

    Interceptor.attach(g_IOHIDCopyHIDParameterFromEventSystem_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDCopyHIDParameterFromEventSystem")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDCopyHIDParameterFromEventSystem");
        }
    });        
 
    const g_IOHIDCreateSharedMemory_ptr = Module.getExportByName(g_proc_name, 'IOHIDCreateSharedMemory');
    console.log("[i] g_IOHIDCreateSharedMemory_ptr addr: " + g_IOHIDCreateSharedMemory_ptr)

    Interceptor.attach(g_IOHIDCreateSharedMemory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDCreateSharedMemory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDCreateSharedMemory");
        }
    });        
 
    const g_IOHIDDeviceActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceActivate');
    console.log("[i] g_IOHIDDeviceActivate_ptr addr: " + g_IOHIDDeviceActivate_ptr)

    Interceptor.attach(g_IOHIDDeviceActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceActivate");
        }
    });        
 
    const g_IOHIDDeviceCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceCancel');
    console.log("[i] g_IOHIDDeviceCancel_ptr addr: " + g_IOHIDDeviceCancel_ptr)

    Interceptor.attach(g_IOHIDDeviceCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceCancel");
        }
    });        
 
    const g_IOHIDDeviceClose_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceClose');
    console.log("[i] g_IOHIDDeviceClose_ptr addr: " + g_IOHIDDeviceClose_ptr)

    Interceptor.attach(g_IOHIDDeviceClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceClose");
        }
    });        
 
    const g_IOHIDDeviceConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceConformsTo');
    console.log("[i] g_IOHIDDeviceConformsTo_ptr addr: " + g_IOHIDDeviceConformsTo_ptr)

    Interceptor.attach(g_IOHIDDeviceConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceConformsTo");
        }
    });        
 
    const g_IOHIDDeviceCopyDescription_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceCopyDescription');
    console.log("[i] g_IOHIDDeviceCopyDescription_ptr addr: " + g_IOHIDDeviceCopyDescription_ptr)

    Interceptor.attach(g_IOHIDDeviceCopyDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceCopyDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceCopyDescription");
        }
    });        
 
    const g_IOHIDDeviceCopyMatchingElements_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceCopyMatchingElements');
    console.log("[i] g_IOHIDDeviceCopyMatchingElements_ptr addr: " + g_IOHIDDeviceCopyMatchingElements_ptr)

    Interceptor.attach(g_IOHIDDeviceCopyMatchingElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceCopyMatchingElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceCopyMatchingElements");
        }
    });        
 
    const g_IOHIDDeviceCopyValueMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceCopyValueMultiple');
    console.log("[i] g_IOHIDDeviceCopyValueMultiple_ptr addr: " + g_IOHIDDeviceCopyValueMultiple_ptr)

    Interceptor.attach(g_IOHIDDeviceCopyValueMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceCopyValueMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceCopyValueMultiple");
        }
    });        
 
    const g_IOHIDDeviceCopyValueMultipleWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceCopyValueMultipleWithCallback');
    console.log("[i] g_IOHIDDeviceCopyValueMultipleWithCallback_ptr addr: " + g_IOHIDDeviceCopyValueMultipleWithCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceCopyValueMultipleWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceCopyValueMultipleWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceCopyValueMultipleWithCallback");
        }
    });        
 
    const g_IOHIDDeviceCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceCreate');
    console.log("[i] g_IOHIDDeviceCreate_ptr addr: " + g_IOHIDDeviceCreate_ptr)

    Interceptor.attach(g_IOHIDDeviceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceCreate");
        }
    });        
 
    const g_IOHIDDeviceGetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetProperty');
    console.log("[i] g_IOHIDDeviceGetProperty_ptr addr: " + g_IOHIDDeviceGetProperty_ptr)

    Interceptor.attach(g_IOHIDDeviceGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetProperty");
        }
    });        
 
    const g_IOHIDDeviceGetRegistryEntryID_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetRegistryEntryID');
    console.log("[i] g_IOHIDDeviceGetRegistryEntryID_ptr addr: " + g_IOHIDDeviceGetRegistryEntryID_ptr)

    Interceptor.attach(g_IOHIDDeviceGetRegistryEntryID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetRegistryEntryID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetRegistryEntryID");
        }
    });        
 
    const g_IOHIDDeviceGetReport_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetReport');
    console.log("[i] g_IOHIDDeviceGetReport_ptr addr: " + g_IOHIDDeviceGetReport_ptr)

    Interceptor.attach(g_IOHIDDeviceGetReport_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetReport")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetReport");
        }
    });        
 
    const g_IOHIDDeviceGetReportWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetReportWithCallback');
    console.log("[i] g_IOHIDDeviceGetReportWithCallback_ptr addr: " + g_IOHIDDeviceGetReportWithCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceGetReportWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetReportWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetReportWithCallback");
        }
    });        
 
    const g_IOHIDDeviceGetService_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetService');
    console.log("[i] g_IOHIDDeviceGetService_ptr addr: " + g_IOHIDDeviceGetService_ptr)

    Interceptor.attach(g_IOHIDDeviceGetService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetService");
        }
    });        
 
    const g_IOHIDDeviceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetTypeID');
    console.log("[i] g_IOHIDDeviceGetTypeID_ptr addr: " + g_IOHIDDeviceGetTypeID_ptr)

    Interceptor.attach(g_IOHIDDeviceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetTypeID");
        }
    });        
 
    const g_IOHIDDeviceGetValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetValue');
    console.log("[i] g_IOHIDDeviceGetValue_ptr addr: " + g_IOHIDDeviceGetValue_ptr)

    Interceptor.attach(g_IOHIDDeviceGetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetValue");
        }
    });        
 
    const g_IOHIDDeviceGetValueWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetValueWithCallback');
    console.log("[i] g_IOHIDDeviceGetValueWithCallback_ptr addr: " + g_IOHIDDeviceGetValueWithCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceGetValueWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetValueWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetValueWithCallback");
        }
    });        
 
    const g_IOHIDDeviceGetValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceGetValueWithOptions');
    console.log("[i] g_IOHIDDeviceGetValueWithOptions_ptr addr: " + g_IOHIDDeviceGetValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDDeviceGetValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceGetValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceGetValueWithOptions");
        }
    });        
 
    const g_IOHIDDeviceOpen_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceOpen');
    console.log("[i] g_IOHIDDeviceOpen_ptr addr: " + g_IOHIDDeviceOpen_ptr)

    Interceptor.attach(g_IOHIDDeviceOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceOpen");
        }
    });        
 
    const g_IOHIDDeviceRegisterInputReportCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceRegisterInputReportCallback');
    console.log("[i] g_IOHIDDeviceRegisterInputReportCallback_ptr addr: " + g_IOHIDDeviceRegisterInputReportCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceRegisterInputReportCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceRegisterInputReportCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceRegisterInputReportCallback");
        }
    });        
 
    const g_IOHIDDeviceRegisterInputReportWithTimeStampCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceRegisterInputReportWithTimeStampCallback');
    console.log("[i] g_IOHIDDeviceRegisterInputReportWithTimeStampCallback_ptr addr: " + g_IOHIDDeviceRegisterInputReportWithTimeStampCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceRegisterInputReportWithTimeStampCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceRegisterInputReportWithTimeStampCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceRegisterInputReportWithTimeStampCallback");
        }
    });        
 
    const g_IOHIDDeviceRegisterInputValueCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceRegisterInputValueCallback');
    console.log("[i] g_IOHIDDeviceRegisterInputValueCallback_ptr addr: " + g_IOHIDDeviceRegisterInputValueCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceRegisterInputValueCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceRegisterInputValueCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceRegisterInputValueCallback");
        }
    });        
 
    const g_IOHIDDeviceRegisterRemovalCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceRegisterRemovalCallback');
    console.log("[i] g_IOHIDDeviceRegisterRemovalCallback_ptr addr: " + g_IOHIDDeviceRegisterRemovalCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceRegisterRemovalCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceRegisterRemovalCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceRegisterRemovalCallback");
        }
    });        
 
    const g_IOHIDDeviceScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceScheduleWithRunLoop');
    console.log("[i] g_IOHIDDeviceScheduleWithRunLoop_ptr addr: " + g_IOHIDDeviceScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDDeviceScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceScheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDDeviceSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetCancelHandler');
    console.log("[i] g_IOHIDDeviceSetCancelHandler_ptr addr: " + g_IOHIDDeviceSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDDeviceSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetCancelHandler");
        }
    });        
 
    const g_IOHIDDeviceSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetDispatchQueue');
    console.log("[i] g_IOHIDDeviceSetDispatchQueue_ptr addr: " + g_IOHIDDeviceSetDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDDeviceSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetDispatchQueue");
        }
    });        
 
    const g_IOHIDDeviceSetInputValueMatching_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetInputValueMatching');
    console.log("[i] g_IOHIDDeviceSetInputValueMatching_ptr addr: " + g_IOHIDDeviceSetInputValueMatching_ptr)

    Interceptor.attach(g_IOHIDDeviceSetInputValueMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetInputValueMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetInputValueMatching");
        }
    });        
 
    const g_IOHIDDeviceSetInputValueMatchingMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetInputValueMatchingMultiple');
    console.log("[i] g_IOHIDDeviceSetInputValueMatchingMultiple_ptr addr: " + g_IOHIDDeviceSetInputValueMatchingMultiple_ptr)

    Interceptor.attach(g_IOHIDDeviceSetInputValueMatchingMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetInputValueMatchingMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetInputValueMatchingMultiple");
        }
    });        
 
    const g_IOHIDDeviceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetProperty');
    console.log("[i] g_IOHIDDeviceSetProperty_ptr addr: " + g_IOHIDDeviceSetProperty_ptr)

    Interceptor.attach(g_IOHIDDeviceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetProperty");
        }
    });        
 
    const g_IOHIDDeviceSetReport_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetReport');
    console.log("[i] g_IOHIDDeviceSetReport_ptr addr: " + g_IOHIDDeviceSetReport_ptr)

    Interceptor.attach(g_IOHIDDeviceSetReport_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetReport")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetReport");
        }
    });        
 
    const g_IOHIDDeviceSetReportWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetReportWithCallback');
    console.log("[i] g_IOHIDDeviceSetReportWithCallback_ptr addr: " + g_IOHIDDeviceSetReportWithCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceSetReportWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetReportWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetReportWithCallback");
        }
    });        
 
    const g_IOHIDDeviceSetValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetValue');
    console.log("[i] g_IOHIDDeviceSetValue_ptr addr: " + g_IOHIDDeviceSetValue_ptr)

    Interceptor.attach(g_IOHIDDeviceSetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetValue");
        }
    });        
 
    const g_IOHIDDeviceSetValueMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetValueMultiple');
    console.log("[i] g_IOHIDDeviceSetValueMultiple_ptr addr: " + g_IOHIDDeviceSetValueMultiple_ptr)

    Interceptor.attach(g_IOHIDDeviceSetValueMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetValueMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetValueMultiple");
        }
    });        
 
    const g_IOHIDDeviceSetValueMultipleWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetValueMultipleWithCallback');
    console.log("[i] g_IOHIDDeviceSetValueMultipleWithCallback_ptr addr: " + g_IOHIDDeviceSetValueMultipleWithCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceSetValueMultipleWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetValueMultipleWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetValueMultipleWithCallback");
        }
    });        
 
    const g_IOHIDDeviceSetValueWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceSetValueWithCallback');
    console.log("[i] g_IOHIDDeviceSetValueWithCallback_ptr addr: " + g_IOHIDDeviceSetValueWithCallback_ptr)

    Interceptor.attach(g_IOHIDDeviceSetValueWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceSetValueWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceSetValueWithCallback");
        }
    });        
 
    const g_IOHIDDeviceUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDDeviceUnscheduleFromRunLoop');
    console.log("[i] g_IOHIDDeviceUnscheduleFromRunLoop_ptr addr: " + g_IOHIDDeviceUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOHIDDeviceUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDDeviceUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDDeviceUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOHIDElementAttach_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementAttach');
    console.log("[i] g_IOHIDElementAttach_ptr addr: " + g_IOHIDElementAttach_ptr)

    Interceptor.attach(g_IOHIDElementAttach_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementAttach")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementAttach");
        }
    });        
 
    const g_IOHIDElementCopyAttached_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementCopyAttached');
    console.log("[i] g_IOHIDElementCopyAttached_ptr addr: " + g_IOHIDElementCopyAttached_ptr)

    Interceptor.attach(g_IOHIDElementCopyAttached_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementCopyAttached")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementCopyAttached");
        }
    });        
 
    const g_IOHIDElementCreateWithDictionary_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementCreateWithDictionary');
    console.log("[i] g_IOHIDElementCreateWithDictionary_ptr addr: " + g_IOHIDElementCreateWithDictionary_ptr)

    Interceptor.attach(g_IOHIDElementCreateWithDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementCreateWithDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementCreateWithDictionary");
        }
    });        
 
    const g_IOHIDElementDetach_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementDetach');
    console.log("[i] g_IOHIDElementDetach_ptr addr: " + g_IOHIDElementDetach_ptr)

    Interceptor.attach(g_IOHIDElementDetach_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementDetach")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementDetach");
        }
    });        
 
    const g_IOHIDElementGetChildren_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetChildren');
    console.log("[i] g_IOHIDElementGetChildren_ptr addr: " + g_IOHIDElementGetChildren_ptr)

    Interceptor.attach(g_IOHIDElementGetChildren_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetChildren")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetChildren");
        }
    });        
 
    const g_IOHIDElementGetCollectionType_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetCollectionType');
    console.log("[i] g_IOHIDElementGetCollectionType_ptr addr: " + g_IOHIDElementGetCollectionType_ptr)

    Interceptor.attach(g_IOHIDElementGetCollectionType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetCollectionType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetCollectionType");
        }
    });        
 
    const g_IOHIDElementGetCookie_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetCookie');
    console.log("[i] g_IOHIDElementGetCookie_ptr addr: " + g_IOHIDElementGetCookie_ptr)

    Interceptor.attach(g_IOHIDElementGetCookie_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetCookie")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetCookie");
        }
    });        
 
    const g_IOHIDElementGetDevice_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetDevice');
    console.log("[i] g_IOHIDElementGetDevice_ptr addr: " + g_IOHIDElementGetDevice_ptr)

    Interceptor.attach(g_IOHIDElementGetDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetDevice");
        }
    });        
 
    const g_IOHIDElementGetDuplicateIndex_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetDuplicateIndex');
    console.log("[i] g_IOHIDElementGetDuplicateIndex_ptr addr: " + g_IOHIDElementGetDuplicateIndex_ptr)

    Interceptor.attach(g_IOHIDElementGetDuplicateIndex_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetDuplicateIndex")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetDuplicateIndex");
        }
    });        
 
    const g_IOHIDElementGetLogicalMax_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetLogicalMax');
    console.log("[i] g_IOHIDElementGetLogicalMax_ptr addr: " + g_IOHIDElementGetLogicalMax_ptr)

    Interceptor.attach(g_IOHIDElementGetLogicalMax_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetLogicalMax")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetLogicalMax");
        }
    });        
 
    const g_IOHIDElementGetLogicalMin_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetLogicalMin');
    console.log("[i] g_IOHIDElementGetLogicalMin_ptr addr: " + g_IOHIDElementGetLogicalMin_ptr)

    Interceptor.attach(g_IOHIDElementGetLogicalMin_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetLogicalMin")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetLogicalMin");
        }
    });        
 
    const g_IOHIDElementGetName_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetName');
    console.log("[i] g_IOHIDElementGetName_ptr addr: " + g_IOHIDElementGetName_ptr)

    Interceptor.attach(g_IOHIDElementGetName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetName");
        }
    });        
 
    const g_IOHIDElementGetParent_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetParent');
    console.log("[i] g_IOHIDElementGetParent_ptr addr: " + g_IOHIDElementGetParent_ptr)

    Interceptor.attach(g_IOHIDElementGetParent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetParent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetParent");
        }
    });        
 
    const g_IOHIDElementGetPhysicalMax_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetPhysicalMax');
    console.log("[i] g_IOHIDElementGetPhysicalMax_ptr addr: " + g_IOHIDElementGetPhysicalMax_ptr)

    Interceptor.attach(g_IOHIDElementGetPhysicalMax_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetPhysicalMax")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetPhysicalMax");
        }
    });        
 
    const g_IOHIDElementGetPhysicalMin_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetPhysicalMin');
    console.log("[i] g_IOHIDElementGetPhysicalMin_ptr addr: " + g_IOHIDElementGetPhysicalMin_ptr)

    Interceptor.attach(g_IOHIDElementGetPhysicalMin_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetPhysicalMin")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetPhysicalMin");
        }
    });        
 
    const g_IOHIDElementGetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetProperty');
    console.log("[i] g_IOHIDElementGetProperty_ptr addr: " + g_IOHIDElementGetProperty_ptr)

    Interceptor.attach(g_IOHIDElementGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetProperty");
        }
    });        
 
    const g_IOHIDElementGetReportCount_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetReportCount');
    console.log("[i] g_IOHIDElementGetReportCount_ptr addr: " + g_IOHIDElementGetReportCount_ptr)

    Interceptor.attach(g_IOHIDElementGetReportCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetReportCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetReportCount");
        }
    });        
 
    const g_IOHIDElementGetReportID_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetReportID');
    console.log("[i] g_IOHIDElementGetReportID_ptr addr: " + g_IOHIDElementGetReportID_ptr)

    Interceptor.attach(g_IOHIDElementGetReportID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetReportID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetReportID");
        }
    });        
 
    const g_IOHIDElementGetReportSize_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetReportSize');
    console.log("[i] g_IOHIDElementGetReportSize_ptr addr: " + g_IOHIDElementGetReportSize_ptr)

    Interceptor.attach(g_IOHIDElementGetReportSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetReportSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetReportSize");
        }
    });        
 
    const g_IOHIDElementGetType_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetType');
    console.log("[i] g_IOHIDElementGetType_ptr addr: " + g_IOHIDElementGetType_ptr)

    Interceptor.attach(g_IOHIDElementGetType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetType");
        }
    });        
 
    const g_IOHIDElementGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetTypeID');
    console.log("[i] g_IOHIDElementGetTypeID_ptr addr: " + g_IOHIDElementGetTypeID_ptr)

    Interceptor.attach(g_IOHIDElementGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetTypeID");
        }
    });        
 
    const g_IOHIDElementGetUnit_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetUnit');
    console.log("[i] g_IOHIDElementGetUnit_ptr addr: " + g_IOHIDElementGetUnit_ptr)

    Interceptor.attach(g_IOHIDElementGetUnit_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetUnit")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetUnit");
        }
    });        
 
    const g_IOHIDElementGetUnitExponent_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetUnitExponent');
    console.log("[i] g_IOHIDElementGetUnitExponent_ptr addr: " + g_IOHIDElementGetUnitExponent_ptr)

    Interceptor.attach(g_IOHIDElementGetUnitExponent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetUnitExponent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetUnitExponent");
        }
    });        
 
    const g_IOHIDElementGetUsage_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetUsage');
    console.log("[i] g_IOHIDElementGetUsage_ptr addr: " + g_IOHIDElementGetUsage_ptr)

    Interceptor.attach(g_IOHIDElementGetUsage_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetUsage")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetUsage");
        }
    });        
 
    const g_IOHIDElementGetUsagePage_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementGetUsagePage');
    console.log("[i] g_IOHIDElementGetUsagePage_ptr addr: " + g_IOHIDElementGetUsagePage_ptr)

    Interceptor.attach(g_IOHIDElementGetUsagePage_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementGetUsagePage")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementGetUsagePage");
        }
    });        
 
    const g_IOHIDElementHasNullState_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementHasNullState');
    console.log("[i] g_IOHIDElementHasNullState_ptr addr: " + g_IOHIDElementHasNullState_ptr)

    Interceptor.attach(g_IOHIDElementHasNullState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementHasNullState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementHasNullState");
        }
    });        
 
    const g_IOHIDElementHasPreferredState_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementHasPreferredState');
    console.log("[i] g_IOHIDElementHasPreferredState_ptr addr: " + g_IOHIDElementHasPreferredState_ptr)

    Interceptor.attach(g_IOHIDElementHasPreferredState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementHasPreferredState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementHasPreferredState");
        }
    });        
 
    const g_IOHIDElementIsArray_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementIsArray');
    console.log("[i] g_IOHIDElementIsArray_ptr addr: " + g_IOHIDElementIsArray_ptr)

    Interceptor.attach(g_IOHIDElementIsArray_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementIsArray")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementIsArray");
        }
    });        
 
    const g_IOHIDElementIsNonLinear_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementIsNonLinear');
    console.log("[i] g_IOHIDElementIsNonLinear_ptr addr: " + g_IOHIDElementIsNonLinear_ptr)

    Interceptor.attach(g_IOHIDElementIsNonLinear_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementIsNonLinear")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementIsNonLinear");
        }
    });        
 
    const g_IOHIDElementIsRelative_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementIsRelative');
    console.log("[i] g_IOHIDElementIsRelative_ptr addr: " + g_IOHIDElementIsRelative_ptr)

    Interceptor.attach(g_IOHIDElementIsRelative_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementIsRelative")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementIsRelative");
        }
    });        
 
    const g_IOHIDElementIsVirtual_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementIsVirtual');
    console.log("[i] g_IOHIDElementIsVirtual_ptr addr: " + g_IOHIDElementIsVirtual_ptr)

    Interceptor.attach(g_IOHIDElementIsVirtual_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementIsVirtual")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementIsVirtual");
        }
    });        
 
    const g_IOHIDElementIsWrapping_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementIsWrapping');
    console.log("[i] g_IOHIDElementIsWrapping_ptr addr: " + g_IOHIDElementIsWrapping_ptr)

    Interceptor.attach(g_IOHIDElementIsWrapping_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementIsWrapping")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementIsWrapping");
        }
    });        
 
    const g_IOHIDElementSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDElementSetProperty');
    console.log("[i] g_IOHIDElementSetProperty_ptr addr: " + g_IOHIDElementSetProperty_ptr)

    Interceptor.attach(g_IOHIDElementSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDElementSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDElementSetProperty");
        }
    });        
 
    const g_IOHIDEventAppendEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventAppendEvent');
    console.log("[i] g_IOHIDEventAppendEvent_ptr addr: " + g_IOHIDEventAppendEvent_ptr)

    Interceptor.attach(g_IOHIDEventAppendEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventAppendEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventAppendEvent");
        }
    });        
 
    const g_IOHIDEventConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventConformsTo');
    console.log("[i] g_IOHIDEventConformsTo_ptr addr: " + g_IOHIDEventConformsTo_ptr)

    Interceptor.attach(g_IOHIDEventConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventConformsTo");
        }
    });        
 
    const g_IOHIDEventConformsToWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventConformsToWithOptions');
    console.log("[i] g_IOHIDEventConformsToWithOptions_ptr addr: " + g_IOHIDEventConformsToWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventConformsToWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventConformsToWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventConformsToWithOptions");
        }
    });        
 
    const g_IOHIDEventCopyDescription_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCopyDescription');
    console.log("[i] g_IOHIDEventCopyDescription_ptr addr: " + g_IOHIDEventCopyDescription_ptr)

    Interceptor.attach(g_IOHIDEventCopyDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCopyDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCopyDescription");
        }
    });        
 
    const g_IOHIDEventCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreate');
    console.log("[i] g_IOHIDEventCreate_ptr addr: " + g_IOHIDEventCreate_ptr)

    Interceptor.attach(g_IOHIDEventCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreate");
        }
    });        
 
    const g_IOHIDEventCreateAccelerometerEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateAccelerometerEvent');
    console.log("[i] g_IOHIDEventCreateAccelerometerEvent_ptr addr: " + g_IOHIDEventCreateAccelerometerEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateAccelerometerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateAccelerometerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateAccelerometerEvent");
        }
    });        
 
    const g_IOHIDEventCreateAccelerometerEventWithType_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateAccelerometerEventWithType');
    console.log("[i] g_IOHIDEventCreateAccelerometerEventWithType_ptr addr: " + g_IOHIDEventCreateAccelerometerEventWithType_ptr)

    Interceptor.attach(g_IOHIDEventCreateAccelerometerEventWithType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateAccelerometerEventWithType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateAccelerometerEventWithType");
        }
    });        
 
    const g_IOHIDEventCreateAmbientLightSensorEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateAmbientLightSensorEvent');
    console.log("[i] g_IOHIDEventCreateAmbientLightSensorEvent_ptr addr: " + g_IOHIDEventCreateAmbientLightSensorEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateAmbientLightSensorEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateAmbientLightSensorEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateAmbientLightSensorEvent");
        }
    });        
 
    const g_IOHIDEventCreateAtmosphericPressureEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateAtmosphericPressureEvent');
    console.log("[i] g_IOHIDEventCreateAtmosphericPressureEvent_ptr addr: " + g_IOHIDEventCreateAtmosphericPressureEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateAtmosphericPressureEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateAtmosphericPressureEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateAtmosphericPressureEvent");
        }
    });        
 
    const g_IOHIDEventCreateBiometricEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateBiometricEvent');
    console.log("[i] g_IOHIDEventCreateBiometricEvent_ptr addr: " + g_IOHIDEventCreateBiometricEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateBiometricEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateBiometricEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateBiometricEvent");
        }
    });        
 
    const g_IOHIDEventCreateBoundaryScrollEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateBoundaryScrollEvent');
    console.log("[i] g_IOHIDEventCreateBoundaryScrollEvent_ptr addr: " + g_IOHIDEventCreateBoundaryScrollEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateBoundaryScrollEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateBoundaryScrollEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateBoundaryScrollEvent");
        }
    });        
 
    const g_IOHIDEventCreateBrightnessEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateBrightnessEvent');
    console.log("[i] g_IOHIDEventCreateBrightnessEvent_ptr addr: " + g_IOHIDEventCreateBrightnessEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateBrightnessEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateBrightnessEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateBrightnessEvent");
        }
    });        
 
    const g_IOHIDEventCreateButtonEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateButtonEvent');
    console.log("[i] g_IOHIDEventCreateButtonEvent_ptr addr: " + g_IOHIDEventCreateButtonEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateButtonEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateButtonEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateButtonEvent");
        }
    });        
 
    const g_IOHIDEventCreateButtonEventWithPressure_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateButtonEventWithPressure');
    console.log("[i] g_IOHIDEventCreateButtonEventWithPressure_ptr addr: " + g_IOHIDEventCreateButtonEventWithPressure_ptr)

    Interceptor.attach(g_IOHIDEventCreateButtonEventWithPressure_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateButtonEventWithPressure")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateButtonEventWithPressure");
        }
    });        
 
    const g_IOHIDEventCreateCollectionEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateCollectionEvent');
    console.log("[i] g_IOHIDEventCreateCollectionEvent_ptr addr: " + g_IOHIDEventCreateCollectionEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateCollectionEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateCollectionEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateCollectionEvent");
        }
    });        
 
    const g_IOHIDEventCreateCompassEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateCompassEvent');
    console.log("[i] g_IOHIDEventCreateCompassEvent_ptr addr: " + g_IOHIDEventCreateCompassEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateCompassEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateCompassEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateCompassEvent");
        }
    });        
 
    const g_IOHIDEventCreateCompassEventWithType_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateCompassEventWithType');
    console.log("[i] g_IOHIDEventCreateCompassEventWithType_ptr addr: " + g_IOHIDEventCreateCompassEventWithType_ptr)

    Interceptor.attach(g_IOHIDEventCreateCompassEventWithType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateCompassEventWithType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateCompassEventWithType");
        }
    });        
 
    const g_IOHIDEventCreateCopy_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateCopy');
    console.log("[i] g_IOHIDEventCreateCopy_ptr addr: " + g_IOHIDEventCreateCopy_ptr)

    Interceptor.attach(g_IOHIDEventCreateCopy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateCopy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateCopy");
        }
    });        
 
    const g_IOHIDEventCreateData_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateData');
    console.log("[i] g_IOHIDEventCreateData_ptr addr: " + g_IOHIDEventCreateData_ptr)

    Interceptor.attach(g_IOHIDEventCreateData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateData");
        }
    });        
 
    const g_IOHIDEventCreateDeviceOrientationEventWithUsage_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDeviceOrientationEventWithUsage');
    console.log("[i] g_IOHIDEventCreateDeviceOrientationEventWithUsage_ptr addr: " + g_IOHIDEventCreateDeviceOrientationEventWithUsage_ptr)

    Interceptor.attach(g_IOHIDEventCreateDeviceOrientationEventWithUsage_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDeviceOrientationEventWithUsage")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDeviceOrientationEventWithUsage");
        }
    });        
 
    const g_IOHIDEventCreateDigitizerEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDigitizerEvent');
    console.log("[i] g_IOHIDEventCreateDigitizerEvent_ptr addr: " + g_IOHIDEventCreateDigitizerEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateDigitizerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDigitizerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDigitizerEvent");
        }
    });        
 
    const g_IOHIDEventCreateDigitizerFingerEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDigitizerFingerEvent');
    console.log("[i] g_IOHIDEventCreateDigitizerFingerEvent_ptr addr: " + g_IOHIDEventCreateDigitizerFingerEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateDigitizerFingerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDigitizerFingerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDigitizerFingerEvent");
        }
    });        
 
    const g_IOHIDEventCreateDigitizerFingerEventWithQuality_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDigitizerFingerEventWithQuality');
    console.log("[i] g_IOHIDEventCreateDigitizerFingerEventWithQuality_ptr addr: " + g_IOHIDEventCreateDigitizerFingerEventWithQuality_ptr)

    Interceptor.attach(g_IOHIDEventCreateDigitizerFingerEventWithQuality_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDigitizerFingerEventWithQuality")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDigitizerFingerEventWithQuality");
        }
    });        
 
    const g_IOHIDEventCreateDigitizerStylusEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDigitizerStylusEvent');
    console.log("[i] g_IOHIDEventCreateDigitizerStylusEvent_ptr addr: " + g_IOHIDEventCreateDigitizerStylusEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateDigitizerStylusEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDigitizerStylusEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDigitizerStylusEvent");
        }
    });        
 
    const g_IOHIDEventCreateDigitizerStylusEventWithPolarOrientation_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDigitizerStylusEventWithPolarOrientation');
    console.log("[i] g_IOHIDEventCreateDigitizerStylusEventWithPolarOrientation_ptr addr: " + g_IOHIDEventCreateDigitizerStylusEventWithPolarOrientation_ptr)

    Interceptor.attach(g_IOHIDEventCreateDigitizerStylusEventWithPolarOrientation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDigitizerStylusEventWithPolarOrientation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDigitizerStylusEventWithPolarOrientation");
        }
    });        
 
    const g_IOHIDEventCreateDockSwipeEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateDockSwipeEvent');
    console.log("[i] g_IOHIDEventCreateDockSwipeEvent_ptr addr: " + g_IOHIDEventCreateDockSwipeEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateDockSwipeEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateDockSwipeEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateDockSwipeEvent");
        }
    });        
 
    const g_IOHIDEventCreateFluidTouchGestureEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateFluidTouchGestureEvent');
    console.log("[i] g_IOHIDEventCreateFluidTouchGestureEvent_ptr addr: " + g_IOHIDEventCreateFluidTouchGestureEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateFluidTouchGestureEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateFluidTouchGestureEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateFluidTouchGestureEvent");
        }
    });        
 
    const g_IOHIDEventCreateForceEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateForceEvent');
    console.log("[i] g_IOHIDEventCreateForceEvent_ptr addr: " + g_IOHIDEventCreateForceEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateForceEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateForceEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateForceEvent");
        }
    });        
 
    const g_IOHIDEventCreateGameControllerEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateGameControllerEvent');
    console.log("[i] g_IOHIDEventCreateGameControllerEvent_ptr addr: " + g_IOHIDEventCreateGameControllerEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateGameControllerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateGameControllerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateGameControllerEvent");
        }
    });        
 
    const g_IOHIDEventCreateGenericGestureEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateGenericGestureEvent');
    console.log("[i] g_IOHIDEventCreateGenericGestureEvent_ptr addr: " + g_IOHIDEventCreateGenericGestureEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateGenericGestureEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateGenericGestureEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateGenericGestureEvent");
        }
    });        
 
    const g_IOHIDEventCreateGyroEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateGyroEvent');
    console.log("[i] g_IOHIDEventCreateGyroEvent_ptr addr: " + g_IOHIDEventCreateGyroEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateGyroEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateGyroEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateGyroEvent");
        }
    });        
 
    const g_IOHIDEventCreateGyroEventWithType_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateGyroEventWithType');
    console.log("[i] g_IOHIDEventCreateGyroEventWithType_ptr addr: " + g_IOHIDEventCreateGyroEventWithType_ptr)

    Interceptor.attach(g_IOHIDEventCreateGyroEventWithType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateGyroEventWithType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateGyroEventWithType");
        }
    });        
 
    const g_IOHIDEventCreateKeyboardEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateKeyboardEvent');
    console.log("[i] g_IOHIDEventCreateKeyboardEvent_ptr addr: " + g_IOHIDEventCreateKeyboardEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateKeyboardEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateKeyboardEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateKeyboardEvent");
        }
    });        
 
    const g_IOHIDEventCreateLEDEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateLEDEvent');
    console.log("[i] g_IOHIDEventCreateLEDEvent_ptr addr: " + g_IOHIDEventCreateLEDEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateLEDEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateLEDEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateLEDEvent");
        }
    });        
 
    const g_IOHIDEventCreateMotionActivtyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateMotionActivtyEvent');
    console.log("[i] g_IOHIDEventCreateMotionActivtyEvent_ptr addr: " + g_IOHIDEventCreateMotionActivtyEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateMotionActivtyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateMotionActivtyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateMotionActivtyEvent");
        }
    });        
 
    const g_IOHIDEventCreateMotionGestureEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateMotionGestureEvent');
    console.log("[i] g_IOHIDEventCreateMotionGestureEvent_ptr addr: " + g_IOHIDEventCreateMotionGestureEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateMotionGestureEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateMotionGestureEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateMotionGestureEvent");
        }
    });        
 
    const g_IOHIDEventCreateMouseEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateMouseEvent');
    console.log("[i] g_IOHIDEventCreateMouseEvent_ptr addr: " + g_IOHIDEventCreateMouseEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateMouseEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateMouseEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateMouseEvent");
        }
    });        
 
    const g_IOHIDEventCreateNavigationSwipeEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateNavigationSwipeEvent');
    console.log("[i] g_IOHIDEventCreateNavigationSwipeEvent_ptr addr: " + g_IOHIDEventCreateNavigationSwipeEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateNavigationSwipeEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateNavigationSwipeEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateNavigationSwipeEvent");
        }
    });        
 
    const g_IOHIDEventCreateOrientationEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateOrientationEvent');
    console.log("[i] g_IOHIDEventCreateOrientationEvent_ptr addr: " + g_IOHIDEventCreateOrientationEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateOrientationEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateOrientationEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateOrientationEvent");
        }
    });        
 
    const g_IOHIDEventCreatePolarOrientationEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreatePolarOrientationEvent');
    console.log("[i] g_IOHIDEventCreatePolarOrientationEvent_ptr addr: " + g_IOHIDEventCreatePolarOrientationEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreatePolarOrientationEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreatePolarOrientationEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreatePolarOrientationEvent");
        }
    });        
 
    const g_IOHIDEventCreateProgressEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateProgressEvent');
    console.log("[i] g_IOHIDEventCreateProgressEvent_ptr addr: " + g_IOHIDEventCreateProgressEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateProgressEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateProgressEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateProgressEvent");
        }
    });        
 
    const g_IOHIDEventCreateProximtyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateProximtyEvent');
    console.log("[i] g_IOHIDEventCreateProximtyEvent_ptr addr: " + g_IOHIDEventCreateProximtyEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateProximtyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateProximtyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateProximtyEvent");
        }
    });        
 
    const g_IOHIDEventCreateQuaternionOrientationEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateQuaternionOrientationEvent');
    console.log("[i] g_IOHIDEventCreateQuaternionOrientationEvent_ptr addr: " + g_IOHIDEventCreateQuaternionOrientationEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateQuaternionOrientationEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateQuaternionOrientationEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateQuaternionOrientationEvent");
        }
    });        
 
    const g_IOHIDEventCreateRelativePointerEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateRelativePointerEvent');
    console.log("[i] g_IOHIDEventCreateRelativePointerEvent_ptr addr: " + g_IOHIDEventCreateRelativePointerEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateRelativePointerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateRelativePointerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateRelativePointerEvent");
        }
    });        
 
    const g_IOHIDEventCreateRotationEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateRotationEvent');
    console.log("[i] g_IOHIDEventCreateRotationEvent_ptr addr: " + g_IOHIDEventCreateRotationEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateRotationEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateRotationEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateRotationEvent");
        }
    });        
 
    const g_IOHIDEventCreateScaleEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateScaleEvent');
    console.log("[i] g_IOHIDEventCreateScaleEvent_ptr addr: " + g_IOHIDEventCreateScaleEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateScaleEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateScaleEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateScaleEvent");
        }
    });        
 
    const g_IOHIDEventCreateScrollEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateScrollEvent');
    console.log("[i] g_IOHIDEventCreateScrollEvent_ptr addr: " + g_IOHIDEventCreateScrollEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateScrollEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateScrollEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateScrollEvent");
        }
    });        
 
    const g_IOHIDEventCreateSwipeEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateSwipeEvent');
    console.log("[i] g_IOHIDEventCreateSwipeEvent_ptr addr: " + g_IOHIDEventCreateSwipeEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateSwipeEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateSwipeEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateSwipeEvent");
        }
    });        
 
    const g_IOHIDEventCreateSymbolicHotKeyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateSymbolicHotKeyEvent');
    console.log("[i] g_IOHIDEventCreateSymbolicHotKeyEvent_ptr addr: " + g_IOHIDEventCreateSymbolicHotKeyEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateSymbolicHotKeyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateSymbolicHotKeyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateSymbolicHotKeyEvent");
        }
    });        
 
    const g_IOHIDEventCreateTranslationEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateTranslationEvent');
    console.log("[i] g_IOHIDEventCreateTranslationEvent_ptr addr: " + g_IOHIDEventCreateTranslationEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateTranslationEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateTranslationEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateTranslationEvent");
        }
    });        
 
    const g_IOHIDEventCreateUnicodeEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateUnicodeEvent');
    console.log("[i] g_IOHIDEventCreateUnicodeEvent_ptr addr: " + g_IOHIDEventCreateUnicodeEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateUnicodeEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateUnicodeEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateUnicodeEvent");
        }
    });        
 
    const g_IOHIDEventCreateUnicodeEventWithQuality_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateUnicodeEventWithQuality');
    console.log("[i] g_IOHIDEventCreateUnicodeEventWithQuality_ptr addr: " + g_IOHIDEventCreateUnicodeEventWithQuality_ptr)

    Interceptor.attach(g_IOHIDEventCreateUnicodeEventWithQuality_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateUnicodeEventWithQuality")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateUnicodeEventWithQuality");
        }
    });        
 
    const g_IOHIDEventCreateVelocityEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateVelocityEvent');
    console.log("[i] g_IOHIDEventCreateVelocityEvent_ptr addr: " + g_IOHIDEventCreateVelocityEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateVelocityEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateVelocityEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateVelocityEvent");
        }
    });        
 
    const g_IOHIDEventCreateVendorDefinedEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateVendorDefinedEvent');
    console.log("[i] g_IOHIDEventCreateVendorDefinedEvent_ptr addr: " + g_IOHIDEventCreateVendorDefinedEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateVendorDefinedEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateVendorDefinedEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateVendorDefinedEvent");
        }
    });        
 
    const g_IOHIDEventCreateWithBytes_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateWithBytes');
    console.log("[i] g_IOHIDEventCreateWithBytes_ptr addr: " + g_IOHIDEventCreateWithBytes_ptr)

    Interceptor.attach(g_IOHIDEventCreateWithBytes_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateWithBytes")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateWithBytes");
        }
    });        
 
    const g_IOHIDEventCreateWithData_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateWithData');
    console.log("[i] g_IOHIDEventCreateWithData_ptr addr: " + g_IOHIDEventCreateWithData_ptr)

    Interceptor.attach(g_IOHIDEventCreateWithData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateWithData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateWithData");
        }
    });        
 
    const g_IOHIDEventCreateZoomToggleEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventCreateZoomToggleEvent');
    console.log("[i] g_IOHIDEventCreateZoomToggleEvent_ptr addr: " + g_IOHIDEventCreateZoomToggleEvent_ptr)

    Interceptor.attach(g_IOHIDEventCreateZoomToggleEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventCreateZoomToggleEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventCreateZoomToggleEvent");
        }
    });        
 
    const g_IOHIDEventGetAttributeData_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetAttributeData');
    console.log("[i] g_IOHIDEventGetAttributeData_ptr addr: " + g_IOHIDEventGetAttributeData_ptr)

    Interceptor.attach(g_IOHIDEventGetAttributeData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetAttributeData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetAttributeData");
        }
    });        
 
    const g_IOHIDEventGetAttributeDataLength_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetAttributeDataLength');
    console.log("[i] g_IOHIDEventGetAttributeDataLength_ptr addr: " + g_IOHIDEventGetAttributeDataLength_ptr)

    Interceptor.attach(g_IOHIDEventGetAttributeDataLength_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetAttributeDataLength")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetAttributeDataLength");
        }
    });        
 
    const g_IOHIDEventGetAttributeDataPtr_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetAttributeDataPtr');
    console.log("[i] g_IOHIDEventGetAttributeDataPtr_ptr addr: " + g_IOHIDEventGetAttributeDataPtr_ptr)

    Interceptor.attach(g_IOHIDEventGetAttributeDataPtr_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetAttributeDataPtr")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetAttributeDataPtr");
        }
    });        
 
    const g_IOHIDEventGetChildren_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetChildren');
    console.log("[i] g_IOHIDEventGetChildren_ptr addr: " + g_IOHIDEventGetChildren_ptr)

    Interceptor.attach(g_IOHIDEventGetChildren_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetChildren")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetChildren");
        }
    });        
 
    const g_IOHIDEventGetDataLength_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetDataLength');
    console.log("[i] g_IOHIDEventGetDataLength_ptr addr: " + g_IOHIDEventGetDataLength_ptr)

    Interceptor.attach(g_IOHIDEventGetDataLength_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetDataLength")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetDataLength");
        }
    });        
 
    const g_IOHIDEventGetDataValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetDataValue');
    console.log("[i] g_IOHIDEventGetDataValue_ptr addr: " + g_IOHIDEventGetDataValue_ptr)

    Interceptor.attach(g_IOHIDEventGetDataValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetDataValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetDataValue");
        }
    });        
 
    const g_IOHIDEventGetDataValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetDataValueWithOptions');
    console.log("[i] g_IOHIDEventGetDataValueWithOptions_ptr addr: " + g_IOHIDEventGetDataValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetDataValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetDataValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetDataValueWithOptions");
        }
    });        
 
    const g_IOHIDEventGetDoubleValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetDoubleValue');
    console.log("[i] g_IOHIDEventGetDoubleValue_ptr addr: " + g_IOHIDEventGetDoubleValue_ptr)

    Interceptor.attach(g_IOHIDEventGetDoubleValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetDoubleValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetDoubleValue");
        }
    });        
 
    const g_IOHIDEventGetDoubleValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetDoubleValueWithOptions');
    console.log("[i] g_IOHIDEventGetDoubleValueWithOptions_ptr addr: " + g_IOHIDEventGetDoubleValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetDoubleValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetDoubleValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetDoubleValueWithOptions");
        }
    });        
 
    const g_IOHIDEventGetEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetEvent');
    console.log("[i] g_IOHIDEventGetEvent_ptr addr: " + g_IOHIDEventGetEvent_ptr)

    Interceptor.attach(g_IOHIDEventGetEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetEvent");
        }
    });        
 
    const g_IOHIDEventGetEventFlags_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetEventFlags');
    console.log("[i] g_IOHIDEventGetEventFlags_ptr addr: " + g_IOHIDEventGetEventFlags_ptr)

    Interceptor.attach(g_IOHIDEventGetEventFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetEventFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetEventFlags");
        }
    });        
 
    const g_IOHIDEventGetEventWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetEventWithOptions');
    console.log("[i] g_IOHIDEventGetEventWithOptions_ptr addr: " + g_IOHIDEventGetEventWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetEventWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetEventWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetEventWithOptions");
        }
    });        
 
    const g_IOHIDEventGetFloatMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetFloatMultiple');
    console.log("[i] g_IOHIDEventGetFloatMultiple_ptr addr: " + g_IOHIDEventGetFloatMultiple_ptr)

    Interceptor.attach(g_IOHIDEventGetFloatMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetFloatMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetFloatMultiple");
        }
    });        
 
    const g_IOHIDEventGetFloatMultipleWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetFloatMultipleWithOptions');
    console.log("[i] g_IOHIDEventGetFloatMultipleWithOptions_ptr addr: " + g_IOHIDEventGetFloatMultipleWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetFloatMultipleWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetFloatMultipleWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetFloatMultipleWithOptions");
        }
    });        
 
    const g_IOHIDEventGetFloatValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetFloatValue');
    console.log("[i] g_IOHIDEventGetFloatValue_ptr addr: " + g_IOHIDEventGetFloatValue_ptr)

    Interceptor.attach(g_IOHIDEventGetFloatValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetFloatValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetFloatValue");
        }
    });        
 
    const g_IOHIDEventGetFloatValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetFloatValueWithOptions');
    console.log("[i] g_IOHIDEventGetFloatValueWithOptions_ptr addr: " + g_IOHIDEventGetFloatValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetFloatValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetFloatValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetFloatValueWithOptions");
        }
    });        
 
    const g_IOHIDEventGetIntegerMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetIntegerMultiple');
    console.log("[i] g_IOHIDEventGetIntegerMultiple_ptr addr: " + g_IOHIDEventGetIntegerMultiple_ptr)

    Interceptor.attach(g_IOHIDEventGetIntegerMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetIntegerMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetIntegerMultiple");
        }
    });        
 
    const g_IOHIDEventGetIntegerMultipleWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetIntegerMultipleWithOptions');
    console.log("[i] g_IOHIDEventGetIntegerMultipleWithOptions_ptr addr: " + g_IOHIDEventGetIntegerMultipleWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetIntegerMultipleWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetIntegerMultipleWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetIntegerMultipleWithOptions");
        }
    });        
 
    const g_IOHIDEventGetIntegerValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetIntegerValue');
    console.log("[i] g_IOHIDEventGetIntegerValue_ptr addr: " + g_IOHIDEventGetIntegerValue_ptr)

    Interceptor.attach(g_IOHIDEventGetIntegerValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetIntegerValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetIntegerValue");
        }
    });        
 
    const g_IOHIDEventGetIntegerValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetIntegerValueWithOptions');
    console.log("[i] g_IOHIDEventGetIntegerValueWithOptions_ptr addr: " + g_IOHIDEventGetIntegerValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetIntegerValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetIntegerValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetIntegerValueWithOptions");
        }
    });        
 
    const g_IOHIDEventGetLatency_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetLatency');
    console.log("[i] g_IOHIDEventGetLatency_ptr addr: " + g_IOHIDEventGetLatency_ptr)

    Interceptor.attach(g_IOHIDEventGetLatency_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetLatency")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetLatency");
        }
    });        
 
    const g_IOHIDEventGetParent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetParent');
    console.log("[i] g_IOHIDEventGetParent_ptr addr: " + g_IOHIDEventGetParent_ptr)

    Interceptor.attach(g_IOHIDEventGetParent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetParent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetParent");
        }
    });        
 
    const g_IOHIDEventGetPhase_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetPhase');
    console.log("[i] g_IOHIDEventGetPhase_ptr addr: " + g_IOHIDEventGetPhase_ptr)

    Interceptor.attach(g_IOHIDEventGetPhase_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetPhase")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetPhase");
        }
    });        
 
    const g_IOHIDEventGetPolicy_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetPolicy');
    console.log("[i] g_IOHIDEventGetPolicy_ptr addr: " + g_IOHIDEventGetPolicy_ptr)

    Interceptor.attach(g_IOHIDEventGetPolicy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetPolicy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetPolicy");
        }
    });        
 
    const g_IOHIDEventGetPosition_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetPosition');
    console.log("[i] g_IOHIDEventGetPosition_ptr addr: " + g_IOHIDEventGetPosition_ptr)

    Interceptor.attach(g_IOHIDEventGetPosition_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetPosition")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetPosition");
        }
    });        
 
    const g_IOHIDEventGetPositionWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetPositionWithOptions');
    console.log("[i] g_IOHIDEventGetPositionWithOptions_ptr addr: " + g_IOHIDEventGetPositionWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventGetPositionWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetPositionWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetPositionWithOptions");
        }
    });        
 
    const g_IOHIDEventGetScrollMomentum_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetScrollMomentum');
    console.log("[i] g_IOHIDEventGetScrollMomentum_ptr addr: " + g_IOHIDEventGetScrollMomentum_ptr)

    Interceptor.attach(g_IOHIDEventGetScrollMomentum_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetScrollMomentum")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetScrollMomentum");
        }
    });        
 
    const g_IOHIDEventGetSenderID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetSenderID');
    console.log("[i] g_IOHIDEventGetSenderID_ptr addr: " + g_IOHIDEventGetSenderID_ptr)

    Interceptor.attach(g_IOHIDEventGetSenderID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetSenderID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetSenderID");
        }
    });        
 
    const g_IOHIDEventGetTimeStamp_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetTimeStamp');
    console.log("[i] g_IOHIDEventGetTimeStamp_ptr addr: " + g_IOHIDEventGetTimeStamp_ptr)

    Interceptor.attach(g_IOHIDEventGetTimeStamp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetTimeStamp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetTimeStamp");
        }
    });        
 
    const g_IOHIDEventGetType_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetType');
    console.log("[i] g_IOHIDEventGetType_ptr addr: " + g_IOHIDEventGetType_ptr)

    Interceptor.attach(g_IOHIDEventGetType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetType");
        }
    });        
 
    const g_IOHIDEventGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetTypeID');
    console.log("[i] g_IOHIDEventGetTypeID_ptr addr: " + g_IOHIDEventGetTypeID_ptr)

    Interceptor.attach(g_IOHIDEventGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetTypeID");
        }
    });        
 
    const g_IOHIDEventGetTypeString_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetTypeString');
    console.log("[i] g_IOHIDEventGetTypeString_ptr addr: " + g_IOHIDEventGetTypeString_ptr)

    Interceptor.attach(g_IOHIDEventGetTypeString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetTypeString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetTypeString");
        }
    });        
 
    const g_IOHIDEventGetVendorDefinedData_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventGetVendorDefinedData');
    console.log("[i] g_IOHIDEventGetVendorDefinedData_ptr addr: " + g_IOHIDEventGetVendorDefinedData_ptr)

    Interceptor.attach(g_IOHIDEventGetVendorDefinedData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventGetVendorDefinedData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventGetVendorDefinedData");
        }
    });        
 
    const g_IOHIDEventIsAbsolute_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventIsAbsolute');
    console.log("[i] g_IOHIDEventIsAbsolute_ptr addr: " + g_IOHIDEventIsAbsolute_ptr)

    Interceptor.attach(g_IOHIDEventIsAbsolute_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventIsAbsolute")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventIsAbsolute");
        }
    });        
 
    const g_IOHIDEventIsRepeat_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventIsRepeat');
    console.log("[i] g_IOHIDEventIsRepeat_ptr addr: " + g_IOHIDEventIsRepeat_ptr)

    Interceptor.attach(g_IOHIDEventIsRepeat_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventIsRepeat")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventIsRepeat");
        }
    });        
 
    const g_IOHIDEventQueueCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueCreate');
    console.log("[i] g_IOHIDEventQueueCreate_ptr addr: " + g_IOHIDEventQueueCreate_ptr)

    Interceptor.attach(g_IOHIDEventQueueCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueCreate");
        }
    });        
 
    const g_IOHIDEventQueueCreateWithVM_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueCreateWithVM');
    console.log("[i] g_IOHIDEventQueueCreateWithVM_ptr addr: " + g_IOHIDEventQueueCreateWithVM_ptr)

    Interceptor.attach(g_IOHIDEventQueueCreateWithVM_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueCreateWithVM")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueCreateWithVM");
        }
    });        
 
    const g_IOHIDEventQueueDequeueCopy_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueDequeueCopy');
    console.log("[i] g_IOHIDEventQueueDequeueCopy_ptr addr: " + g_IOHIDEventQueueDequeueCopy_ptr)

    Interceptor.attach(g_IOHIDEventQueueDequeueCopy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueDequeueCopy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueDequeueCopy");
        }
    });        
 
    const g_IOHIDEventQueueEnqueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueEnqueue');
    console.log("[i] g_IOHIDEventQueueEnqueue_ptr addr: " + g_IOHIDEventQueueEnqueue_ptr)

    Interceptor.attach(g_IOHIDEventQueueEnqueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueEnqueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueEnqueue");
        }
    });        
 
    const g_IOHIDEventQueueGetMemoryHandle_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueGetMemoryHandle');
    console.log("[i] g_IOHIDEventQueueGetMemoryHandle_ptr addr: " + g_IOHIDEventQueueGetMemoryHandle_ptr)

    Interceptor.attach(g_IOHIDEventQueueGetMemoryHandle_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueGetMemoryHandle")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueGetMemoryHandle");
        }
    });        
 
    const g_IOHIDEventQueueGetNotificationPort_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueGetNotificationPort');
    console.log("[i] g_IOHIDEventQueueGetNotificationPort_ptr addr: " + g_IOHIDEventQueueGetNotificationPort_ptr)

    Interceptor.attach(g_IOHIDEventQueueGetNotificationPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueGetNotificationPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueGetNotificationPort");
        }
    });        
 
    const g_IOHIDEventQueueGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueGetTypeID');
    console.log("[i] g_IOHIDEventQueueGetTypeID_ptr addr: " + g_IOHIDEventQueueGetTypeID_ptr)

    Interceptor.attach(g_IOHIDEventQueueGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueGetTypeID");
        }
    });        
 
    const g_IOHIDEventQueueIsActive_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueIsActive');
    console.log("[i] g_IOHIDEventQueueIsActive_ptr addr: " + g_IOHIDEventQueueIsActive_ptr)

    Interceptor.attach(g_IOHIDEventQueueIsActive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueIsActive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueIsActive");
        }
    });        
 
    const g_IOHIDEventQueueResume_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueResume');
    console.log("[i] g_IOHIDEventQueueResume_ptr addr: " + g_IOHIDEventQueueResume_ptr)

    Interceptor.attach(g_IOHIDEventQueueResume_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueResume")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueResume");
        }
    });        
 
    const g_IOHIDEventQueueSetNotificationPort_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueSetNotificationPort');
    console.log("[i] g_IOHIDEventQueueSetNotificationPort_ptr addr: " + g_IOHIDEventQueueSetNotificationPort_ptr)

    Interceptor.attach(g_IOHIDEventQueueSetNotificationPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueSetNotificationPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueSetNotificationPort");
        }
    });        
 
    const g_IOHIDEventQueueStart_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueStart');
    console.log("[i] g_IOHIDEventQueueStart_ptr addr: " + g_IOHIDEventQueueStart_ptr)

    Interceptor.attach(g_IOHIDEventQueueStart_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueStart")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueStart");
        }
    });        
 
    const g_IOHIDEventQueueStop_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueStop');
    console.log("[i] g_IOHIDEventQueueStop_ptr addr: " + g_IOHIDEventQueueStop_ptr)

    Interceptor.attach(g_IOHIDEventQueueStop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueStop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueStop");
        }
    });        
 
    const g_IOHIDEventQueueSuspend_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventQueueSuspend');
    console.log("[i] g_IOHIDEventQueueSuspend_ptr addr: " + g_IOHIDEventQueueSuspend_ptr)

    Interceptor.attach(g_IOHIDEventQueueSuspend_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventQueueSuspend")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventQueueSuspend");
        }
    });        
 
    const g_IOHIDEventReadBytes_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventReadBytes');
    console.log("[i] g_IOHIDEventReadBytes_ptr addr: " + g_IOHIDEventReadBytes_ptr)

    Interceptor.attach(g_IOHIDEventReadBytes_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventReadBytes")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventReadBytes");
        }
    });        
 
    const g_IOHIDEventRemoveEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventRemoveEvent');
    console.log("[i] g_IOHIDEventRemoveEvent_ptr addr: " + g_IOHIDEventRemoveEvent_ptr)

    Interceptor.attach(g_IOHIDEventRemoveEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventRemoveEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventRemoveEvent");
        }
    });        
 
    const g_IOHIDEventServerCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventServerCreate');
    console.log("[i] g_IOHIDEventServerCreate_ptr addr: " + g_IOHIDEventServerCreate_ptr)

    Interceptor.attach(g_IOHIDEventServerCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventServerCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventServerCreate");
        }
    });        
 
    const g_IOHIDEventServerGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventServerGetTypeID');
    console.log("[i] g_IOHIDEventServerGetTypeID_ptr addr: " + g_IOHIDEventServerGetTypeID_ptr)

    Interceptor.attach(g_IOHIDEventServerGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventServerGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventServerGetTypeID");
        }
    });        
 
    const g_IOHIDEventServerScheduleWithDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventServerScheduleWithDispatchQueue');
    console.log("[i] g_IOHIDEventServerScheduleWithDispatchQueue_ptr addr: " + g_IOHIDEventServerScheduleWithDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDEventServerScheduleWithDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventServerScheduleWithDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventServerScheduleWithDispatchQueue");
        }
    });        
 
    const g_IOHIDEventServerUnscheduleFromDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventServerUnscheduleFromDispatchQueue');
    console.log("[i] g_IOHIDEventServerUnscheduleFromDispatchQueue_ptr addr: " + g_IOHIDEventServerUnscheduleFromDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDEventServerUnscheduleFromDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventServerUnscheduleFromDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventServerUnscheduleFromDispatchQueue");
        }
    });        
 
    const g_IOHIDEventSetAttributeData_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetAttributeData');
    console.log("[i] g_IOHIDEventSetAttributeData_ptr addr: " + g_IOHIDEventSetAttributeData_ptr)

    Interceptor.attach(g_IOHIDEventSetAttributeData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetAttributeData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetAttributeData");
        }
    });        
 
    const g_IOHIDEventSetDoubleMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetDoubleMultiple');
    console.log("[i] g_IOHIDEventSetDoubleMultiple_ptr addr: " + g_IOHIDEventSetDoubleMultiple_ptr)

    Interceptor.attach(g_IOHIDEventSetDoubleMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetDoubleMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetDoubleMultiple");
        }
    });        
 
    const g_IOHIDEventSetDoubleMultipleWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetDoubleMultipleWithOptions');
    console.log("[i] g_IOHIDEventSetDoubleMultipleWithOptions_ptr addr: " + g_IOHIDEventSetDoubleMultipleWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetDoubleMultipleWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetDoubleMultipleWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetDoubleMultipleWithOptions");
        }
    });        
 
    const g_IOHIDEventSetDoubleValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetDoubleValue');
    console.log("[i] g_IOHIDEventSetDoubleValue_ptr addr: " + g_IOHIDEventSetDoubleValue_ptr)

    Interceptor.attach(g_IOHIDEventSetDoubleValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetDoubleValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetDoubleValue");
        }
    });        
 
    const g_IOHIDEventSetDoubleValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetDoubleValueWithOptions');
    console.log("[i] g_IOHIDEventSetDoubleValueWithOptions_ptr addr: " + g_IOHIDEventSetDoubleValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetDoubleValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetDoubleValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetDoubleValueWithOptions");
        }
    });        
 
    const g_IOHIDEventSetEventFlags_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetEventFlags');
    console.log("[i] g_IOHIDEventSetEventFlags_ptr addr: " + g_IOHIDEventSetEventFlags_ptr)

    Interceptor.attach(g_IOHIDEventSetEventFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetEventFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetEventFlags");
        }
    });        
 
    const g_IOHIDEventSetFloatMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetFloatMultiple');
    console.log("[i] g_IOHIDEventSetFloatMultiple_ptr addr: " + g_IOHIDEventSetFloatMultiple_ptr)

    Interceptor.attach(g_IOHIDEventSetFloatMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetFloatMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetFloatMultiple");
        }
    });        
 
    const g_IOHIDEventSetFloatMultipleWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetFloatMultipleWithOptions');
    console.log("[i] g_IOHIDEventSetFloatMultipleWithOptions_ptr addr: " + g_IOHIDEventSetFloatMultipleWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetFloatMultipleWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetFloatMultipleWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetFloatMultipleWithOptions");
        }
    });        
 
    const g_IOHIDEventSetFloatValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetFloatValue');
    console.log("[i] g_IOHIDEventSetFloatValue_ptr addr: " + g_IOHIDEventSetFloatValue_ptr)

    Interceptor.attach(g_IOHIDEventSetFloatValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetFloatValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetFloatValue");
        }
    });        
 
    const g_IOHIDEventSetFloatValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetFloatValueWithOptions');
    console.log("[i] g_IOHIDEventSetFloatValueWithOptions_ptr addr: " + g_IOHIDEventSetFloatValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetFloatValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetFloatValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetFloatValueWithOptions");
        }
    });        
 
    const g_IOHIDEventSetIntegerMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetIntegerMultiple');
    console.log("[i] g_IOHIDEventSetIntegerMultiple_ptr addr: " + g_IOHIDEventSetIntegerMultiple_ptr)

    Interceptor.attach(g_IOHIDEventSetIntegerMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetIntegerMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetIntegerMultiple");
        }
    });        
 
    const g_IOHIDEventSetIntegerMultipleWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetIntegerMultipleWithOptions');
    console.log("[i] g_IOHIDEventSetIntegerMultipleWithOptions_ptr addr: " + g_IOHIDEventSetIntegerMultipleWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetIntegerMultipleWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetIntegerMultipleWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetIntegerMultipleWithOptions");
        }
    });        
 
    const g_IOHIDEventSetIntegerValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetIntegerValue');
    console.log("[i] g_IOHIDEventSetIntegerValue_ptr addr: " + g_IOHIDEventSetIntegerValue_ptr)

    Interceptor.attach(g_IOHIDEventSetIntegerValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetIntegerValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetIntegerValue");
        }
    });        
 
    const g_IOHIDEventSetIntegerValueWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetIntegerValueWithOptions');
    console.log("[i] g_IOHIDEventSetIntegerValueWithOptions_ptr addr: " + g_IOHIDEventSetIntegerValueWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetIntegerValueWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetIntegerValueWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetIntegerValueWithOptions");
        }
    });        
 
    const g_IOHIDEventSetPhase_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetPhase');
    console.log("[i] g_IOHIDEventSetPhase_ptr addr: " + g_IOHIDEventSetPhase_ptr)

    Interceptor.attach(g_IOHIDEventSetPhase_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetPhase")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetPhase");
        }
    });        
 
    const g_IOHIDEventSetPosition_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetPosition');
    console.log("[i] g_IOHIDEventSetPosition_ptr addr: " + g_IOHIDEventSetPosition_ptr)

    Interceptor.attach(g_IOHIDEventSetPosition_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetPosition")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetPosition");
        }
    });        
 
    const g_IOHIDEventSetPositionWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetPositionWithOptions');
    console.log("[i] g_IOHIDEventSetPositionWithOptions_ptr addr: " + g_IOHIDEventSetPositionWithOptions_ptr)

    Interceptor.attach(g_IOHIDEventSetPositionWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetPositionWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetPositionWithOptions");
        }
    });        
 
    const g_IOHIDEventSetRepeat_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetRepeat');
    console.log("[i] g_IOHIDEventSetRepeat_ptr addr: " + g_IOHIDEventSetRepeat_ptr)

    Interceptor.attach(g_IOHIDEventSetRepeat_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetRepeat")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetRepeat");
        }
    });        
 
    const g_IOHIDEventSetScrollMomentum_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetScrollMomentum');
    console.log("[i] g_IOHIDEventSetScrollMomentum_ptr addr: " + g_IOHIDEventSetScrollMomentum_ptr)

    Interceptor.attach(g_IOHIDEventSetScrollMomentum_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetScrollMomentum")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetScrollMomentum");
        }
    });        
 
    const g_IOHIDEventSetSenderID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetSenderID');
    console.log("[i] g_IOHIDEventSetSenderID_ptr addr: " + g_IOHIDEventSetSenderID_ptr)

    Interceptor.attach(g_IOHIDEventSetSenderID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetSenderID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetSenderID");
        }
    });        
 
    const g_IOHIDEventSetTimeStamp_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSetTimeStamp');
    console.log("[i] g_IOHIDEventSetTimeStamp_ptr addr: " + g_IOHIDEventSetTimeStamp_ptr)

    Interceptor.attach(g_IOHIDEventSetTimeStamp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSetTimeStamp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSetTimeStamp");
        }
    });        
 
    const g_IOHIDEventSystemClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClient');
    console.log("[i] g_IOHIDEventSystemClient_ptr addr: " + g_IOHIDEventSystemClient_ptr)

    Interceptor.attach(g_IOHIDEventSystemClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClient");
        }
    });        
 
    const g_IOHIDEventSystemClientActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientActivate');
    console.log("[i] g_IOHIDEventSystemClientActivate_ptr addr: " + g_IOHIDEventSystemClientActivate_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientActivate");
        }
    });        
 
    const g_IOHIDEventSystemClientCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCancel');
    console.log("[i] g_IOHIDEventSystemClientCancel_ptr addr: " + g_IOHIDEventSystemClientCancel_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCancel");
        }
    });        
 
    const g_IOHIDEventSystemClientCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCopyProperty');
    console.log("[i] g_IOHIDEventSystemClientCopyProperty_ptr addr: " + g_IOHIDEventSystemClientCopyProperty_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCopyProperty");
        }
    });        
 
    const g_IOHIDEventSystemClientCopyServiceForRegistryID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCopyServiceForRegistryID');
    console.log("[i] g_IOHIDEventSystemClientCopyServiceForRegistryID_ptr addr: " + g_IOHIDEventSystemClientCopyServiceForRegistryID_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCopyServiceForRegistryID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCopyServiceForRegistryID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCopyServiceForRegistryID");
        }
    });        
 
    const g_IOHIDEventSystemClientCopyServices_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCopyServices');
    console.log("[i] g_IOHIDEventSystemClientCopyServices_ptr addr: " + g_IOHIDEventSystemClientCopyServices_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCopyServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCopyServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCopyServices");
        }
    });        
 
    const g_IOHIDEventSystemClientCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCreate');
    console.log("[i] g_IOHIDEventSystemClientCreate_ptr addr: " + g_IOHIDEventSystemClientCreate_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCreate");
        }
    });        
 
    const g_IOHIDEventSystemClientCreateSimpleClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCreateSimpleClient');
    console.log("[i] g_IOHIDEventSystemClientCreateSimpleClient_ptr addr: " + g_IOHIDEventSystemClientCreateSimpleClient_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCreateSimpleClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCreateSimpleClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCreateSimpleClient");
        }
    });        
 
    const g_IOHIDEventSystemClientCreateWithType_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientCreateWithType');
    console.log("[i] g_IOHIDEventSystemClientCreateWithType_ptr addr: " + g_IOHIDEventSystemClientCreateWithType_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientCreateWithType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientCreateWithType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientCreateWithType");
        }
    });        
 
    const g_IOHIDEventSystemClientDispatchEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientDispatchEvent');
    console.log("[i] g_IOHIDEventSystemClientDispatchEvent_ptr addr: " + g_IOHIDEventSystemClientDispatchEvent_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientDispatchEvent");
        }
    });        
 
    const g_IOHIDEventSystemClientGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientGetTypeID');
    console.log("[i] g_IOHIDEventSystemClientGetTypeID_ptr addr: " + g_IOHIDEventSystemClientGetTypeID_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientGetTypeID");
        }
    });        
 
    const g_IOHIDEventSystemClientGetTypeString_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientGetTypeString');
    console.log("[i] g_IOHIDEventSystemClientGetTypeString_ptr addr: " + g_IOHIDEventSystemClientGetTypeString_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientGetTypeString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientGetTypeString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientGetTypeString");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterDeviceMatchingBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterDeviceMatchingBlock');
    console.log("[i] g_IOHIDEventSystemClientRegisterDeviceMatchingBlock_ptr addr: " + g_IOHIDEventSystemClientRegisterDeviceMatchingBlock_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterDeviceMatchingBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterDeviceMatchingBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterDeviceMatchingBlock");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterDeviceMatchingCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterDeviceMatchingCallback');
    console.log("[i] g_IOHIDEventSystemClientRegisterDeviceMatchingCallback_ptr addr: " + g_IOHIDEventSystemClientRegisterDeviceMatchingCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterDeviceMatchingCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterDeviceMatchingCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterDeviceMatchingCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterEventBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterEventBlock');
    console.log("[i] g_IOHIDEventSystemClientRegisterEventBlock_ptr addr: " + g_IOHIDEventSystemClientRegisterEventBlock_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterEventBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterEventBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterEventBlock");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterEventCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterEventCallback');
    console.log("[i] g_IOHIDEventSystemClientRegisterEventCallback_ptr addr: " + g_IOHIDEventSystemClientRegisterEventCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterEventCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterEventCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterEventCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterEventFilterBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterEventFilterBlock');
    console.log("[i] g_IOHIDEventSystemClientRegisterEventFilterBlock_ptr addr: " + g_IOHIDEventSystemClientRegisterEventFilterBlock_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterEventFilterBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterEventFilterBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterEventFilterBlock");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterEventFilterBlockWithPriority_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterEventFilterBlockWithPriority');
    console.log("[i] g_IOHIDEventSystemClientRegisterEventFilterBlockWithPriority_ptr addr: " + g_IOHIDEventSystemClientRegisterEventFilterBlockWithPriority_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterEventFilterBlockWithPriority_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterEventFilterBlockWithPriority")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterEventFilterBlockWithPriority");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterEventFilterCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterEventFilterCallback');
    console.log("[i] g_IOHIDEventSystemClientRegisterEventFilterCallback_ptr addr: " + g_IOHIDEventSystemClientRegisterEventFilterCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterEventFilterCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterEventFilterCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterEventFilterCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority');
    console.log("[i] g_IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority_ptr addr: " + g_IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterPropertyChangedCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterPropertyChangedCallback');
    console.log("[i] g_IOHIDEventSystemClientRegisterPropertyChangedCallback_ptr addr: " + g_IOHIDEventSystemClientRegisterPropertyChangedCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterPropertyChangedCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterPropertyChangedCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterPropertyChangedCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientRegisterResetCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegisterResetCallback');
    console.log("[i] g_IOHIDEventSystemClientRegisterResetCallback_ptr addr: " + g_IOHIDEventSystemClientRegisterResetCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegisterResetCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegisterResetCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegisterResetCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientRegistryIDConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientRegistryIDConformsTo');
    console.log("[i] g_IOHIDEventSystemClientRegistryIDConformsTo_ptr addr: " + g_IOHIDEventSystemClientRegistryIDConformsTo_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientRegistryIDConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientRegistryIDConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientRegistryIDConformsTo");
        }
    });        
 
    const g_IOHIDEventSystemClientScheduleWithDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientScheduleWithDispatchQueue');
    console.log("[i] g_IOHIDEventSystemClientScheduleWithDispatchQueue_ptr addr: " + g_IOHIDEventSystemClientScheduleWithDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientScheduleWithDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientScheduleWithDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientScheduleWithDispatchQueue");
        }
    });        
 
    const g_IOHIDEventSystemClientScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientScheduleWithRunLoop');
    console.log("[i] g_IOHIDEventSystemClientScheduleWithRunLoop_ptr addr: " + g_IOHIDEventSystemClientScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientScheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDEventSystemClientSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientSetCancelHandler');
    console.log("[i] g_IOHIDEventSystemClientSetCancelHandler_ptr addr: " + g_IOHIDEventSystemClientSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientSetCancelHandler");
        }
    });        
 
    const g_IOHIDEventSystemClientSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientSetDispatchQueue');
    console.log("[i] g_IOHIDEventSystemClientSetDispatchQueue_ptr addr: " + g_IOHIDEventSystemClientSetDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientSetDispatchQueue");
        }
    });        
 
    const g_IOHIDEventSystemClientSetMatching_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientSetMatching');
    console.log("[i] g_IOHIDEventSystemClientSetMatching_ptr addr: " + g_IOHIDEventSystemClientSetMatching_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientSetMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientSetMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientSetMatching");
        }
    });        
 
    const g_IOHIDEventSystemClientSetMatchingMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientSetMatchingMultiple');
    console.log("[i] g_IOHIDEventSystemClientSetMatchingMultiple_ptr addr: " + g_IOHIDEventSystemClientSetMatchingMultiple_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientSetMatchingMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientSetMatchingMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientSetMatchingMultiple");
        }
    });        
 
    const g_IOHIDEventSystemClientSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientSetProperty');
    console.log("[i] g_IOHIDEventSystemClientSetProperty_ptr addr: " + g_IOHIDEventSystemClientSetProperty_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientSetProperty");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterDeviceMatchingBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterDeviceMatchingBlock');
    console.log("[i] g_IOHIDEventSystemClientUnregisterDeviceMatchingBlock_ptr addr: " + g_IOHIDEventSystemClientUnregisterDeviceMatchingBlock_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterDeviceMatchingBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterDeviceMatchingBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterDeviceMatchingBlock");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterDeviceMatchingCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterDeviceMatchingCallback');
    console.log("[i] g_IOHIDEventSystemClientUnregisterDeviceMatchingCallback_ptr addr: " + g_IOHIDEventSystemClientUnregisterDeviceMatchingCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterDeviceMatchingCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterDeviceMatchingCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterDeviceMatchingCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterEventBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterEventBlock');
    console.log("[i] g_IOHIDEventSystemClientUnregisterEventBlock_ptr addr: " + g_IOHIDEventSystemClientUnregisterEventBlock_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterEventBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterEventBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterEventBlock");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterEventCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterEventCallback');
    console.log("[i] g_IOHIDEventSystemClientUnregisterEventCallback_ptr addr: " + g_IOHIDEventSystemClientUnregisterEventCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterEventCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterEventCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterEventCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterEventFilterBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterEventFilterBlock');
    console.log("[i] g_IOHIDEventSystemClientUnregisterEventFilterBlock_ptr addr: " + g_IOHIDEventSystemClientUnregisterEventFilterBlock_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterEventFilterBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterEventFilterBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterEventFilterBlock");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterEventFilterCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterEventFilterCallback');
    console.log("[i] g_IOHIDEventSystemClientUnregisterEventFilterCallback_ptr addr: " + g_IOHIDEventSystemClientUnregisterEventFilterCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterEventFilterCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterEventFilterCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterEventFilterCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterPropertyChangedCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterPropertyChangedCallback');
    console.log("[i] g_IOHIDEventSystemClientUnregisterPropertyChangedCallback_ptr addr: " + g_IOHIDEventSystemClientUnregisterPropertyChangedCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterPropertyChangedCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterPropertyChangedCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterPropertyChangedCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientUnregisterResetCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnregisterResetCallback');
    console.log("[i] g_IOHIDEventSystemClientUnregisterResetCallback_ptr addr: " + g_IOHIDEventSystemClientUnregisterResetCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnregisterResetCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnregisterResetCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnregisterResetCallback");
        }
    });        
 
    const g_IOHIDEventSystemClientUnscheduleFromDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnscheduleFromDispatchQueue');
    console.log("[i] g_IOHIDEventSystemClientUnscheduleFromDispatchQueue_ptr addr: " + g_IOHIDEventSystemClientUnscheduleFromDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnscheduleFromDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnscheduleFromDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnscheduleFromDispatchQueue");
        }
    });        
 
    const g_IOHIDEventSystemClientUnscheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClientUnscheduleWithRunLoop');
    console.log("[i] g_IOHIDEventSystemClientUnscheduleWithRunLoop_ptr addr: " + g_IOHIDEventSystemClientUnscheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDEventSystemClientUnscheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClientUnscheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClientUnscheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDEventSystemClose_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemClose');
    console.log("[i] g_IOHIDEventSystemClose_ptr addr: " + g_IOHIDEventSystemClose_ptr)

    Interceptor.attach(g_IOHIDEventSystemClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemClose");
        }
    });        
 
    const g_IOHIDEventSystemConnectionCopyDescription_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionCopyDescription');
    console.log("[i] g_IOHIDEventSystemConnectionCopyDescription_ptr addr: " + g_IOHIDEventSystemConnectionCopyDescription_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionCopyDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionCopyDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionCopyDescription");
        }
    });        
 
    const g_IOHIDEventSystemConnectionDispatchEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionDispatchEvent');
    console.log("[i] g_IOHIDEventSystemConnectionDispatchEvent_ptr addr: " + g_IOHIDEventSystemConnectionDispatchEvent_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionDispatchEvent");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetAttribute_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetAttribute');
    console.log("[i] g_IOHIDEventSystemConnectionGetAttribute_ptr addr: " + g_IOHIDEventSystemConnectionGetAttribute_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetAttribute_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetAttribute")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetAttribute");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetAuditToken_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetAuditToken');
    console.log("[i] g_IOHIDEventSystemConnectionGetAuditToken_ptr addr: " + g_IOHIDEventSystemConnectionGetAuditToken_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetAuditToken_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetAuditToken")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetAuditToken");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetEntitlements_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetEntitlements');
    console.log("[i] g_IOHIDEventSystemConnectionGetEntitlements_ptr addr: " + g_IOHIDEventSystemConnectionGetEntitlements_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetEntitlements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetEntitlements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetEntitlements");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetTaskNamePort_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetTaskNamePort');
    console.log("[i] g_IOHIDEventSystemConnectionGetTaskNamePort_ptr addr: " + g_IOHIDEventSystemConnectionGetTaskNamePort_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetTaskNamePort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetTaskNamePort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetTaskNamePort");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetType_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetType');
    console.log("[i] g_IOHIDEventSystemConnectionGetType_ptr addr: " + g_IOHIDEventSystemConnectionGetType_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetType");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetTypeID');
    console.log("[i] g_IOHIDEventSystemConnectionGetTypeID_ptr addr: " + g_IOHIDEventSystemConnectionGetTypeID_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetTypeID");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetTypeString_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetTypeString');
    console.log("[i] g_IOHIDEventSystemConnectionGetTypeString_ptr addr: " + g_IOHIDEventSystemConnectionGetTypeString_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetTypeString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetTypeString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetTypeString");
        }
    });        
 
    const g_IOHIDEventSystemConnectionGetUUID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemConnectionGetUUID');
    console.log("[i] g_IOHIDEventSystemConnectionGetUUID_ptr addr: " + g_IOHIDEventSystemConnectionGetUUID_ptr)

    Interceptor.attach(g_IOHIDEventSystemConnectionGetUUID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemConnectionGetUUID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemConnectionGetUUID");
        }
    });        
 
    const g_IOHIDEventSystemCopyConnections_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemCopyConnections');
    console.log("[i] g_IOHIDEventSystemCopyConnections_ptr addr: " + g_IOHIDEventSystemCopyConnections_ptr)

    Interceptor.attach(g_IOHIDEventSystemCopyConnections_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemCopyConnections")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemCopyConnections");
        }
    });        
 
    const g_IOHIDEventSystemCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemCopyEvent');
    console.log("[i] g_IOHIDEventSystemCopyEvent_ptr addr: " + g_IOHIDEventSystemCopyEvent_ptr)

    Interceptor.attach(g_IOHIDEventSystemCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemCopyEvent");
        }
    });        
 
    const g_IOHIDEventSystemCopyMatchingServices_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemCopyMatchingServices');
    console.log("[i] g_IOHIDEventSystemCopyMatchingServices_ptr addr: " + g_IOHIDEventSystemCopyMatchingServices_ptr)

    Interceptor.attach(g_IOHIDEventSystemCopyMatchingServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemCopyMatchingServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemCopyMatchingServices");
        }
    });        
 
    const g_IOHIDEventSystemCopyService_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemCopyService');
    console.log("[i] g_IOHIDEventSystemCopyService_ptr addr: " + g_IOHIDEventSystemCopyService_ptr)

    Interceptor.attach(g_IOHIDEventSystemCopyService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemCopyService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemCopyService");
        }
    });        
 
    const g_IOHIDEventSystemCopyServices_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemCopyServices');
    console.log("[i] g_IOHIDEventSystemCopyServices_ptr addr: " + g_IOHIDEventSystemCopyServices_ptr)

    Interceptor.attach(g_IOHIDEventSystemCopyServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemCopyServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemCopyServices");
        }
    });        
 
    const g_IOHIDEventSystemCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemCreate');
    console.log("[i] g_IOHIDEventSystemCreate_ptr addr: " + g_IOHIDEventSystemCreate_ptr)

    Interceptor.attach(g_IOHIDEventSystemCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemCreate");
        }
    });        
 
    const g_IOHIDEventSystemGetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemGetProperty');
    console.log("[i] g_IOHIDEventSystemGetProperty_ptr addr: " + g_IOHIDEventSystemGetProperty_ptr)

    Interceptor.attach(g_IOHIDEventSystemGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemGetProperty");
        }
    });        
 
    const g_IOHIDEventSystemGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemGetTypeID');
    console.log("[i] g_IOHIDEventSystemGetTypeID_ptr addr: " + g_IOHIDEventSystemGetTypeID_ptr)

    Interceptor.attach(g_IOHIDEventSystemGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemGetTypeID");
        }
    });        
 
    const g_IOHIDEventSystemOpen_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemOpen');
    console.log("[i] g_IOHIDEventSystemOpen_ptr addr: " + g_IOHIDEventSystemOpen_ptr)

    Interceptor.attach(g_IOHIDEventSystemOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemOpen");
        }
    });        
 
    const g_IOHIDEventSystemRegisterConnectionAdditionCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemRegisterConnectionAdditionCallback');
    console.log("[i] g_IOHIDEventSystemRegisterConnectionAdditionCallback_ptr addr: " + g_IOHIDEventSystemRegisterConnectionAdditionCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemRegisterConnectionAdditionCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemRegisterConnectionAdditionCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemRegisterConnectionAdditionCallback");
        }
    });        
 
    const g_IOHIDEventSystemRegisterConnectionRemovalCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemRegisterConnectionRemovalCallback');
    console.log("[i] g_IOHIDEventSystemRegisterConnectionRemovalCallback_ptr addr: " + g_IOHIDEventSystemRegisterConnectionRemovalCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemRegisterConnectionRemovalCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemRegisterConnectionRemovalCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemRegisterConnectionRemovalCallback");
        }
    });        
 
    const g_IOHIDEventSystemRegisterPropertyChangedNotification_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemRegisterPropertyChangedNotification');
    console.log("[i] g_IOHIDEventSystemRegisterPropertyChangedNotification_ptr addr: " + g_IOHIDEventSystemRegisterPropertyChangedNotification_ptr)

    Interceptor.attach(g_IOHIDEventSystemRegisterPropertyChangedNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemRegisterPropertyChangedNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemRegisterPropertyChangedNotification");
        }
    });        
 
    const g_IOHIDEventSystemRegisterServicesCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemRegisterServicesCallback');
    console.log("[i] g_IOHIDEventSystemRegisterServicesCallback_ptr addr: " + g_IOHIDEventSystemRegisterServicesCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemRegisterServicesCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemRegisterServicesCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemRegisterServicesCallback");
        }
    });        
 
    const g_IOHIDEventSystemSetCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemSetCallback');
    console.log("[i] g_IOHIDEventSystemSetCallback_ptr addr: " + g_IOHIDEventSystemSetCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemSetCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemSetCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemSetCallback");
        }
    });        
 
    const g_IOHIDEventSystemSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemSetProperty');
    console.log("[i] g_IOHIDEventSystemSetProperty_ptr addr: " + g_IOHIDEventSystemSetProperty_ptr)

    Interceptor.attach(g_IOHIDEventSystemSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemSetProperty");
        }
    });        
 
    const g_IOHIDEventSystemUnregisterConnectionAdditionCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemUnregisterConnectionAdditionCallback');
    console.log("[i] g_IOHIDEventSystemUnregisterConnectionAdditionCallback_ptr addr: " + g_IOHIDEventSystemUnregisterConnectionAdditionCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemUnregisterConnectionAdditionCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemUnregisterConnectionAdditionCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemUnregisterConnectionAdditionCallback");
        }
    });        
 
    const g_IOHIDEventSystemUnregisterConnectionRemovalCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemUnregisterConnectionRemovalCallback');
    console.log("[i] g_IOHIDEventSystemUnregisterConnectionRemovalCallback_ptr addr: " + g_IOHIDEventSystemUnregisterConnectionRemovalCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemUnregisterConnectionRemovalCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemUnregisterConnectionRemovalCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemUnregisterConnectionRemovalCallback");
        }
    });        
 
    const g_IOHIDEventSystemUnregisterPropertyChangedNotification_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemUnregisterPropertyChangedNotification');
    console.log("[i] g_IOHIDEventSystemUnregisterPropertyChangedNotification_ptr addr: " + g_IOHIDEventSystemUnregisterPropertyChangedNotification_ptr)

    Interceptor.attach(g_IOHIDEventSystemUnregisterPropertyChangedNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemUnregisterPropertyChangedNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemUnregisterPropertyChangedNotification");
        }
    });        
 
    const g_IOHIDEventSystemUnregisterServicesCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventSystemUnregisterServicesCallback');
    console.log("[i] g_IOHIDEventSystemUnregisterServicesCallback_ptr addr: " + g_IOHIDEventSystemUnregisterServicesCallback_ptr)

    Interceptor.attach(g_IOHIDEventSystemUnregisterServicesCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventSystemUnregisterServicesCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventSystemUnregisterServicesCallback");
        }
    });        
 
    const g_IOHIDEventTypeGetName_ptr = Module.getExportByName(g_proc_name, 'IOHIDEventTypeGetName');
    console.log("[i] g_IOHIDEventTypeGetName_ptr addr: " + g_IOHIDEventTypeGetName_ptr)

    Interceptor.attach(g_IOHIDEventTypeGetName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDEventTypeGetName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDEventTypeGetName");
        }
    });        
 
    const g_IOHIDGetAccelerationWithKey_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetAccelerationWithKey');
    console.log("[i] g_IOHIDGetAccelerationWithKey_ptr addr: " + g_IOHIDGetAccelerationWithKey_ptr)

    Interceptor.attach(g_IOHIDGetAccelerationWithKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetAccelerationWithKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetAccelerationWithKey");
        }
    });        
 
    const g_IOHIDGetActivityState_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetActivityState');
    console.log("[i] g_IOHIDGetActivityState_ptr addr: " + g_IOHIDGetActivityState_ptr)

    Interceptor.attach(g_IOHIDGetActivityState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetActivityState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetActivityState");
        }
    });        
 
    const g_IOHIDGetButtonEventNum_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetButtonEventNum');
    console.log("[i] g_IOHIDGetButtonEventNum_ptr addr: " + g_IOHIDGetButtonEventNum_ptr)

    Interceptor.attach(g_IOHIDGetButtonEventNum_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetButtonEventNum")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetButtonEventNum");
        }
    });        
 
    const g_IOHIDGetModifierLockState_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetModifierLockState');
    console.log("[i] g_IOHIDGetModifierLockState_ptr addr: " + g_IOHIDGetModifierLockState_ptr)

    Interceptor.attach(g_IOHIDGetModifierLockState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetModifierLockState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetModifierLockState");
        }
    });        
 
    const g_IOHIDGetMouseAcceleration_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetMouseAcceleration');
    console.log("[i] g_IOHIDGetMouseAcceleration_ptr addr: " + g_IOHIDGetMouseAcceleration_ptr)

    Interceptor.attach(g_IOHIDGetMouseAcceleration_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetMouseAcceleration")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetMouseAcceleration");
        }
    });        
 
    const g_IOHIDGetMouseButtonMode_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetMouseButtonMode');
    console.log("[i] g_IOHIDGetMouseButtonMode_ptr addr: " + g_IOHIDGetMouseButtonMode_ptr)

    Interceptor.attach(g_IOHIDGetMouseButtonMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetMouseButtonMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetMouseButtonMode");
        }
    });        
 
    const g_IOHIDGetParameter_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetParameter');
    console.log("[i] g_IOHIDGetParameter_ptr addr: " + g_IOHIDGetParameter_ptr)

    Interceptor.attach(g_IOHIDGetParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetParameter");
        }
    });        
 
    const g_IOHIDGetScrollAcceleration_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetScrollAcceleration');
    console.log("[i] g_IOHIDGetScrollAcceleration_ptr addr: " + g_IOHIDGetScrollAcceleration_ptr)

    Interceptor.attach(g_IOHIDGetScrollAcceleration_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetScrollAcceleration")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetScrollAcceleration");
        }
    });        
 
    const g_IOHIDGetStateForSelector_ptr = Module.getExportByName(g_proc_name, 'IOHIDGetStateForSelector');
    console.log("[i] g_IOHIDGetStateForSelector_ptr addr: " + g_IOHIDGetStateForSelector_ptr)

    Interceptor.attach(g_IOHIDGetStateForSelector_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDGetStateForSelector")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDGetStateForSelector");
        }
    });        
 
    const g_IOHIDManagerActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerActivate');
    console.log("[i] g_IOHIDManagerActivate_ptr addr: " + g_IOHIDManagerActivate_ptr)

    Interceptor.attach(g_IOHIDManagerActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerActivate");
        }
    });        
 
    const g_IOHIDManagerCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerCancel');
    console.log("[i] g_IOHIDManagerCancel_ptr addr: " + g_IOHIDManagerCancel_ptr)

    Interceptor.attach(g_IOHIDManagerCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerCancel");
        }
    });        
 
    const g_IOHIDManagerClose_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerClose');
    console.log("[i] g_IOHIDManagerClose_ptr addr: " + g_IOHIDManagerClose_ptr)

    Interceptor.attach(g_IOHIDManagerClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerClose");
        }
    });        
 
    const g_IOHIDManagerCopyDevices_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerCopyDevices');
    console.log("[i] g_IOHIDManagerCopyDevices_ptr addr: " + g_IOHIDManagerCopyDevices_ptr)

    Interceptor.attach(g_IOHIDManagerCopyDevices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerCopyDevices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerCopyDevices");
        }
    });        
 
    const g_IOHIDManagerCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerCreate');
    console.log("[i] g_IOHIDManagerCreate_ptr addr: " + g_IOHIDManagerCreate_ptr)

    Interceptor.attach(g_IOHIDManagerCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerCreate");
        }
    });        
 
    const g_IOHIDManagerGetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerGetProperty');
    console.log("[i] g_IOHIDManagerGetProperty_ptr addr: " + g_IOHIDManagerGetProperty_ptr)

    Interceptor.attach(g_IOHIDManagerGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerGetProperty");
        }
    });        
 
    const g_IOHIDManagerGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerGetTypeID');
    console.log("[i] g_IOHIDManagerGetTypeID_ptr addr: " + g_IOHIDManagerGetTypeID_ptr)

    Interceptor.attach(g_IOHIDManagerGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerGetTypeID");
        }
    });        
 
    const g_IOHIDManagerOpen_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerOpen');
    console.log("[i] g_IOHIDManagerOpen_ptr addr: " + g_IOHIDManagerOpen_ptr)

    Interceptor.attach(g_IOHIDManagerOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerOpen");
        }
    });        
 
    const g_IOHIDManagerRegisterDeviceMatchingCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerRegisterDeviceMatchingCallback');
    console.log("[i] g_IOHIDManagerRegisterDeviceMatchingCallback_ptr addr: " + g_IOHIDManagerRegisterDeviceMatchingCallback_ptr)

    Interceptor.attach(g_IOHIDManagerRegisterDeviceMatchingCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerRegisterDeviceMatchingCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerRegisterDeviceMatchingCallback");
        }
    });        
 
    const g_IOHIDManagerRegisterDeviceRemovalCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerRegisterDeviceRemovalCallback');
    console.log("[i] g_IOHIDManagerRegisterDeviceRemovalCallback_ptr addr: " + g_IOHIDManagerRegisterDeviceRemovalCallback_ptr)

    Interceptor.attach(g_IOHIDManagerRegisterDeviceRemovalCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerRegisterDeviceRemovalCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerRegisterDeviceRemovalCallback");
        }
    });        
 
    const g_IOHIDManagerRegisterInputReportCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerRegisterInputReportCallback');
    console.log("[i] g_IOHIDManagerRegisterInputReportCallback_ptr addr: " + g_IOHIDManagerRegisterInputReportCallback_ptr)

    Interceptor.attach(g_IOHIDManagerRegisterInputReportCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerRegisterInputReportCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerRegisterInputReportCallback");
        }
    });        
 
    const g_IOHIDManagerRegisterInputReportWithTimeStampCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerRegisterInputReportWithTimeStampCallback');
    console.log("[i] g_IOHIDManagerRegisterInputReportWithTimeStampCallback_ptr addr: " + g_IOHIDManagerRegisterInputReportWithTimeStampCallback_ptr)

    Interceptor.attach(g_IOHIDManagerRegisterInputReportWithTimeStampCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerRegisterInputReportWithTimeStampCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerRegisterInputReportWithTimeStampCallback");
        }
    });        
 
    const g_IOHIDManagerRegisterInputValueCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerRegisterInputValueCallback');
    console.log("[i] g_IOHIDManagerRegisterInputValueCallback_ptr addr: " + g_IOHIDManagerRegisterInputValueCallback_ptr)

    Interceptor.attach(g_IOHIDManagerRegisterInputValueCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerRegisterInputValueCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerRegisterInputValueCallback");
        }
    });        
 
    const g_IOHIDManagerSaveToPropertyDomain_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSaveToPropertyDomain');
    console.log("[i] g_IOHIDManagerSaveToPropertyDomain_ptr addr: " + g_IOHIDManagerSaveToPropertyDomain_ptr)

    Interceptor.attach(g_IOHIDManagerSaveToPropertyDomain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSaveToPropertyDomain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSaveToPropertyDomain");
        }
    });        
 
    const g_IOHIDManagerScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerScheduleWithRunLoop');
    console.log("[i] g_IOHIDManagerScheduleWithRunLoop_ptr addr: " + g_IOHIDManagerScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDManagerScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerScheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDManagerSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetCancelHandler');
    console.log("[i] g_IOHIDManagerSetCancelHandler_ptr addr: " + g_IOHIDManagerSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDManagerSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetCancelHandler");
        }
    });        
 
    const g_IOHIDManagerSetDeviceMatching_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetDeviceMatching');
    console.log("[i] g_IOHIDManagerSetDeviceMatching_ptr addr: " + g_IOHIDManagerSetDeviceMatching_ptr)

    Interceptor.attach(g_IOHIDManagerSetDeviceMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetDeviceMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetDeviceMatching");
        }
    });        
 
    const g_IOHIDManagerSetDeviceMatchingMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetDeviceMatchingMultiple');
    console.log("[i] g_IOHIDManagerSetDeviceMatchingMultiple_ptr addr: " + g_IOHIDManagerSetDeviceMatchingMultiple_ptr)

    Interceptor.attach(g_IOHIDManagerSetDeviceMatchingMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetDeviceMatchingMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetDeviceMatchingMultiple");
        }
    });        
 
    const g_IOHIDManagerSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetDispatchQueue');
    console.log("[i] g_IOHIDManagerSetDispatchQueue_ptr addr: " + g_IOHIDManagerSetDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDManagerSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetDispatchQueue");
        }
    });        
 
    const g_IOHIDManagerSetInputValueMatching_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetInputValueMatching');
    console.log("[i] g_IOHIDManagerSetInputValueMatching_ptr addr: " + g_IOHIDManagerSetInputValueMatching_ptr)

    Interceptor.attach(g_IOHIDManagerSetInputValueMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetInputValueMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetInputValueMatching");
        }
    });        
 
    const g_IOHIDManagerSetInputValueMatchingMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetInputValueMatchingMultiple');
    console.log("[i] g_IOHIDManagerSetInputValueMatchingMultiple_ptr addr: " + g_IOHIDManagerSetInputValueMatchingMultiple_ptr)

    Interceptor.attach(g_IOHIDManagerSetInputValueMatchingMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetInputValueMatchingMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetInputValueMatchingMultiple");
        }
    });        
 
    const g_IOHIDManagerSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerSetProperty');
    console.log("[i] g_IOHIDManagerSetProperty_ptr addr: " + g_IOHIDManagerSetProperty_ptr)

    Interceptor.attach(g_IOHIDManagerSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerSetProperty");
        }
    });        
 
    const g_IOHIDManagerUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDManagerUnscheduleFromRunLoop');
    console.log("[i] g_IOHIDManagerUnscheduleFromRunLoop_ptr addr: " + g_IOHIDManagerUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOHIDManagerUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDManagerUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDManagerUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOHIDNotificationCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationCreate');
    console.log("[i] g_IOHIDNotificationCreate_ptr addr: " + g_IOHIDNotificationCreate_ptr)

    Interceptor.attach(g_IOHIDNotificationCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationCreate");
        }
    });        
 
    const g_IOHIDNotificationGetClientCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetClientCallback');
    console.log("[i] g_IOHIDNotificationGetClientCallback_ptr addr: " + g_IOHIDNotificationGetClientCallback_ptr)

    Interceptor.attach(g_IOHIDNotificationGetClientCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetClientCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetClientCallback");
        }
    });        
 
    const g_IOHIDNotificationGetClientRefcon_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetClientRefcon');
    console.log("[i] g_IOHIDNotificationGetClientRefcon_ptr addr: " + g_IOHIDNotificationGetClientRefcon_ptr)

    Interceptor.attach(g_IOHIDNotificationGetClientRefcon_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetClientRefcon")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetClientRefcon");
        }
    });        
 
    const g_IOHIDNotificationGetClientTarget_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetClientTarget');
    console.log("[i] g_IOHIDNotificationGetClientTarget_ptr addr: " + g_IOHIDNotificationGetClientTarget_ptr)

    Interceptor.attach(g_IOHIDNotificationGetClientTarget_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetClientTarget")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetClientTarget");
        }
    });        
 
    const g_IOHIDNotificationGetOwnerCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetOwnerCallback');
    console.log("[i] g_IOHIDNotificationGetOwnerCallback_ptr addr: " + g_IOHIDNotificationGetOwnerCallback_ptr)

    Interceptor.attach(g_IOHIDNotificationGetOwnerCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetOwnerCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetOwnerCallback");
        }
    });        
 
    const g_IOHIDNotificationGetOwnerRefcon_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetOwnerRefcon');
    console.log("[i] g_IOHIDNotificationGetOwnerRefcon_ptr addr: " + g_IOHIDNotificationGetOwnerRefcon_ptr)

    Interceptor.attach(g_IOHIDNotificationGetOwnerRefcon_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetOwnerRefcon")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetOwnerRefcon");
        }
    });        
 
    const g_IOHIDNotificationGetOwnerTarget_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetOwnerTarget');
    console.log("[i] g_IOHIDNotificationGetOwnerTarget_ptr addr: " + g_IOHIDNotificationGetOwnerTarget_ptr)

    Interceptor.attach(g_IOHIDNotificationGetOwnerTarget_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetOwnerTarget")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetOwnerTarget");
        }
    });        
 
    const g_IOHIDNotificationGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationGetTypeID');
    console.log("[i] g_IOHIDNotificationGetTypeID_ptr addr: " + g_IOHIDNotificationGetTypeID_ptr)

    Interceptor.attach(g_IOHIDNotificationGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationGetTypeID");
        }
    });        
 
    const g_IOHIDNotificationInvalidate_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationInvalidate');
    console.log("[i] g_IOHIDNotificationInvalidate_ptr addr: " + g_IOHIDNotificationInvalidate_ptr)

    Interceptor.attach(g_IOHIDNotificationInvalidate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationInvalidate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationInvalidate");
        }
    });        
 
    const g_IOHIDNotificationSignalWithBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDNotificationSignalWithBlock');
    console.log("[i] g_IOHIDNotificationSignalWithBlock_ptr addr: " + g_IOHIDNotificationSignalWithBlock_ptr)

    Interceptor.attach(g_IOHIDNotificationSignalWithBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDNotificationSignalWithBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDNotificationSignalWithBlock");
        }
    });        
 
    const g_IOHIDPostEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDPostEvent');
    console.log("[i] g_IOHIDPostEvent_ptr addr: " + g_IOHIDPostEvent_ptr)

    Interceptor.attach(g_IOHIDPostEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPostEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPostEvent");
        }
    });        
 
    const g_IOHIDPreferencesCopy_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCopy');
    console.log("[i] g_IOHIDPreferencesCopy_ptr addr: " + g_IOHIDPreferencesCopy_ptr)

    Interceptor.attach(g_IOHIDPreferencesCopy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCopy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCopy");
        }
    });        
 
    const g_IOHIDPreferencesCopyDomain_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCopyDomain');
    console.log("[i] g_IOHIDPreferencesCopyDomain_ptr addr: " + g_IOHIDPreferencesCopyDomain_ptr)

    Interceptor.attach(g_IOHIDPreferencesCopyDomain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCopyDomain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCopyDomain");
        }
    });        
 
    const g_IOHIDPreferencesCopyDomainForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCopyDomainForInstance');
    console.log("[i] g_IOHIDPreferencesCopyDomainForInstance_ptr addr: " + g_IOHIDPreferencesCopyDomainForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesCopyDomainForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCopyDomainForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCopyDomainForInstance");
        }
    });        
 
    const g_IOHIDPreferencesCopyForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCopyForInstance');
    console.log("[i] g_IOHIDPreferencesCopyForInstance_ptr addr: " + g_IOHIDPreferencesCopyForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesCopyForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCopyForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCopyForInstance");
        }
    });        
 
    const g_IOHIDPreferencesCopyMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCopyMultiple');
    console.log("[i] g_IOHIDPreferencesCopyMultiple_ptr addr: " + g_IOHIDPreferencesCopyMultiple_ptr)

    Interceptor.attach(g_IOHIDPreferencesCopyMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCopyMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCopyMultiple");
        }
    });        
 
    const g_IOHIDPreferencesCopyMultipleForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCopyMultipleForInstance');
    console.log("[i] g_IOHIDPreferencesCopyMultipleForInstance_ptr addr: " + g_IOHIDPreferencesCopyMultipleForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesCopyMultipleForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCopyMultipleForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCopyMultipleForInstance");
        }
    });        
 
    const g_IOHIDPreferencesCreateInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesCreateInstance');
    console.log("[i] g_IOHIDPreferencesCreateInstance_ptr addr: " + g_IOHIDPreferencesCreateInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesCreateInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesCreateInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesCreateInstance");
        }
    });        
 
    const g_IOHIDPreferencesSet_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSet');
    console.log("[i] g_IOHIDPreferencesSet_ptr addr: " + g_IOHIDPreferencesSet_ptr)

    Interceptor.attach(g_IOHIDPreferencesSet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSet");
        }
    });        
 
    const g_IOHIDPreferencesSetDomain_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSetDomain');
    console.log("[i] g_IOHIDPreferencesSetDomain_ptr addr: " + g_IOHIDPreferencesSetDomain_ptr)

    Interceptor.attach(g_IOHIDPreferencesSetDomain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSetDomain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSetDomain");
        }
    });        
 
    const g_IOHIDPreferencesSetDomainForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSetDomainForInstance');
    console.log("[i] g_IOHIDPreferencesSetDomainForInstance_ptr addr: " + g_IOHIDPreferencesSetDomainForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesSetDomainForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSetDomainForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSetDomainForInstance");
        }
    });        
 
    const g_IOHIDPreferencesSetForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSetForInstance');
    console.log("[i] g_IOHIDPreferencesSetForInstance_ptr addr: " + g_IOHIDPreferencesSetForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesSetForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSetForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSetForInstance");
        }
    });        
 
    const g_IOHIDPreferencesSetMultiple_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSetMultiple');
    console.log("[i] g_IOHIDPreferencesSetMultiple_ptr addr: " + g_IOHIDPreferencesSetMultiple_ptr)

    Interceptor.attach(g_IOHIDPreferencesSetMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSetMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSetMultiple");
        }
    });        
 
    const g_IOHIDPreferencesSetMultipleForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSetMultipleForInstance');
    console.log("[i] g_IOHIDPreferencesSetMultipleForInstance_ptr addr: " + g_IOHIDPreferencesSetMultipleForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesSetMultipleForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSetMultipleForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSetMultipleForInstance");
        }
    });        
 
    const g_IOHIDPreferencesSynchronize_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSynchronize');
    console.log("[i] g_IOHIDPreferencesSynchronize_ptr addr: " + g_IOHIDPreferencesSynchronize_ptr)

    Interceptor.attach(g_IOHIDPreferencesSynchronize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSynchronize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSynchronize");
        }
    });        
 
    const g_IOHIDPreferencesSynchronizeForInstance_ptr = Module.getExportByName(g_proc_name, 'IOHIDPreferencesSynchronizeForInstance');
    console.log("[i] g_IOHIDPreferencesSynchronizeForInstance_ptr addr: " + g_IOHIDPreferencesSynchronizeForInstance_ptr)

    Interceptor.attach(g_IOHIDPreferencesSynchronizeForInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDPreferencesSynchronizeForInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDPreferencesSynchronizeForInstance");
        }
    });        
 
    const g_IOHIDQueueActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueActivate');
    console.log("[i] g_IOHIDQueueActivate_ptr addr: " + g_IOHIDQueueActivate_ptr)

    Interceptor.attach(g_IOHIDQueueActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueActivate");
        }
    });        
 
    const g_IOHIDQueueAddElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueAddElement');
    console.log("[i] g_IOHIDQueueAddElement_ptr addr: " + g_IOHIDQueueAddElement_ptr)

    Interceptor.attach(g_IOHIDQueueAddElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueAddElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueAddElement");
        }
    });        
 
    const g_IOHIDQueueCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueCancel');
    console.log("[i] g_IOHIDQueueCancel_ptr addr: " + g_IOHIDQueueCancel_ptr)

    Interceptor.attach(g_IOHIDQueueCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueCancel");
        }
    });        
 
    const g_IOHIDQueueContainsElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueContainsElement');
    console.log("[i] g_IOHIDQueueContainsElement_ptr addr: " + g_IOHIDQueueContainsElement_ptr)

    Interceptor.attach(g_IOHIDQueueContainsElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueContainsElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueContainsElement");
        }
    });        
 
    const g_IOHIDQueueCopyNextValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueCopyNextValue');
    console.log("[i] g_IOHIDQueueCopyNextValue_ptr addr: " + g_IOHIDQueueCopyNextValue_ptr)

    Interceptor.attach(g_IOHIDQueueCopyNextValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueCopyNextValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueCopyNextValue");
        }
    });        
 
    const g_IOHIDQueueCopyNextValueWithTimeout_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueCopyNextValueWithTimeout');
    console.log("[i] g_IOHIDQueueCopyNextValueWithTimeout_ptr addr: " + g_IOHIDQueueCopyNextValueWithTimeout_ptr)

    Interceptor.attach(g_IOHIDQueueCopyNextValueWithTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueCopyNextValueWithTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueCopyNextValueWithTimeout");
        }
    });        
 
    const g_IOHIDQueueCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueCreate');
    console.log("[i] g_IOHIDQueueCreate_ptr addr: " + g_IOHIDQueueCreate_ptr)

    Interceptor.attach(g_IOHIDQueueCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueCreate");
        }
    });        
 
    const g_IOHIDQueueGetDepth_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueGetDepth');
    console.log("[i] g_IOHIDQueueGetDepth_ptr addr: " + g_IOHIDQueueGetDepth_ptr)

    Interceptor.attach(g_IOHIDQueueGetDepth_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueGetDepth")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueGetDepth");
        }
    });        
 
    const g_IOHIDQueueGetDevice_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueGetDevice');
    console.log("[i] g_IOHIDQueueGetDevice_ptr addr: " + g_IOHIDQueueGetDevice_ptr)

    Interceptor.attach(g_IOHIDQueueGetDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueGetDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueGetDevice");
        }
    });        
 
    const g_IOHIDQueueGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueGetTypeID');
    console.log("[i] g_IOHIDQueueGetTypeID_ptr addr: " + g_IOHIDQueueGetTypeID_ptr)

    Interceptor.attach(g_IOHIDQueueGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueGetTypeID");
        }
    });        
 
    const g_IOHIDQueueRegisterValueAvailableCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueRegisterValueAvailableCallback');
    console.log("[i] g_IOHIDQueueRegisterValueAvailableCallback_ptr addr: " + g_IOHIDQueueRegisterValueAvailableCallback_ptr)

    Interceptor.attach(g_IOHIDQueueRegisterValueAvailableCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueRegisterValueAvailableCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueRegisterValueAvailableCallback");
        }
    });        
 
    const g_IOHIDQueueRemoveElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueRemoveElement');
    console.log("[i] g_IOHIDQueueRemoveElement_ptr addr: " + g_IOHIDQueueRemoveElement_ptr)

    Interceptor.attach(g_IOHIDQueueRemoveElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueRemoveElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueRemoveElement");
        }
    });        
 
    const g_IOHIDQueueScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueScheduleWithRunLoop');
    console.log("[i] g_IOHIDQueueScheduleWithRunLoop_ptr addr: " + g_IOHIDQueueScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDQueueScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueScheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDQueueSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueSetCancelHandler');
    console.log("[i] g_IOHIDQueueSetCancelHandler_ptr addr: " + g_IOHIDQueueSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDQueueSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueSetCancelHandler");
        }
    });        
 
    const g_IOHIDQueueSetDepth_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueSetDepth');
    console.log("[i] g_IOHIDQueueSetDepth_ptr addr: " + g_IOHIDQueueSetDepth_ptr)

    Interceptor.attach(g_IOHIDQueueSetDepth_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueSetDepth")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueSetDepth");
        }
    });        
 
    const g_IOHIDQueueSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueSetDispatchQueue');
    console.log("[i] g_IOHIDQueueSetDispatchQueue_ptr addr: " + g_IOHIDQueueSetDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDQueueSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueSetDispatchQueue");
        }
    });        
 
    const g_IOHIDQueueStart_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueStart');
    console.log("[i] g_IOHIDQueueStart_ptr addr: " + g_IOHIDQueueStart_ptr)

    Interceptor.attach(g_IOHIDQueueStart_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueStart")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueStart");
        }
    });        
 
    const g_IOHIDQueueStop_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueStop');
    console.log("[i] g_IOHIDQueueStop_ptr addr: " + g_IOHIDQueueStop_ptr)

    Interceptor.attach(g_IOHIDQueueStop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueStop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueStop");
        }
    });        
 
    const g_IOHIDQueueUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDQueueUnscheduleFromRunLoop');
    console.log("[i] g_IOHIDQueueUnscheduleFromRunLoop_ptr addr: " + g_IOHIDQueueUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOHIDQueueUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDQueueUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDQueueUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOHIDRegisterVirtualDisplay_ptr = Module.getExportByName(g_proc_name, 'IOHIDRegisterVirtualDisplay');
    console.log("[i] g_IOHIDRegisterVirtualDisplay_ptr addr: " + g_IOHIDRegisterVirtualDisplay_ptr)

    Interceptor.attach(g_IOHIDRegisterVirtualDisplay_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDRegisterVirtualDisplay")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDRegisterVirtualDisplay");
        }
    });        
 
    const g_IOHIDRequestAccess_ptr = Module.getExportByName(g_proc_name, 'IOHIDRequestAccess');
    console.log("[i] g_IOHIDRequestAccess_ptr addr: " + g_IOHIDRequestAccess_ptr)

    Interceptor.attach(g_IOHIDRequestAccess_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDRequestAccess")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDRequestAccess");
        }
    });        
 
    const g_IOHIDServiceClientConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientConformsTo');
    console.log("[i] g_IOHIDServiceClientConformsTo_ptr addr: " + g_IOHIDServiceClientConformsTo_ptr)

    Interceptor.attach(g_IOHIDServiceClientConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientConformsTo");
        }
    });        
 
    const g_IOHIDServiceClientCopyDescription_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientCopyDescription');
    console.log("[i] g_IOHIDServiceClientCopyDescription_ptr addr: " + g_IOHIDServiceClientCopyDescription_ptr)

    Interceptor.attach(g_IOHIDServiceClientCopyDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientCopyDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientCopyDescription");
        }
    });        
 
    const g_IOHIDServiceClientCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientCopyEvent');
    console.log("[i] g_IOHIDServiceClientCopyEvent_ptr addr: " + g_IOHIDServiceClientCopyEvent_ptr)

    Interceptor.attach(g_IOHIDServiceClientCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientCopyEvent");
        }
    });        
 
    const g_IOHIDServiceClientCopyMatchingEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientCopyMatchingEvent');
    console.log("[i] g_IOHIDServiceClientCopyMatchingEvent_ptr addr: " + g_IOHIDServiceClientCopyMatchingEvent_ptr)

    Interceptor.attach(g_IOHIDServiceClientCopyMatchingEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientCopyMatchingEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientCopyMatchingEvent");
        }
    });        
 
    const g_IOHIDServiceClientCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientCopyProperties');
    console.log("[i] g_IOHIDServiceClientCopyProperties_ptr addr: " + g_IOHIDServiceClientCopyProperties_ptr)

    Interceptor.attach(g_IOHIDServiceClientCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientCopyProperties");
        }
    });        
 
    const g_IOHIDServiceClientCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientCopyProperty');
    console.log("[i] g_IOHIDServiceClientCopyProperty_ptr addr: " + g_IOHIDServiceClientCopyProperty_ptr)

    Interceptor.attach(g_IOHIDServiceClientCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientCopyProperty");
        }
    });        
 
    const g_IOHIDServiceClientFastPathCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientFastPathCopyEvent');
    console.log("[i] g_IOHIDServiceClientFastPathCopyEvent_ptr addr: " + g_IOHIDServiceClientFastPathCopyEvent_ptr)

    Interceptor.attach(g_IOHIDServiceClientFastPathCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientFastPathCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientFastPathCopyEvent");
        }
    });        
 
    const g_IOHIDServiceClientFastPathCopyEventWithStatus_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientFastPathCopyEventWithStatus');
    console.log("[i] g_IOHIDServiceClientFastPathCopyEventWithStatus_ptr addr: " + g_IOHIDServiceClientFastPathCopyEventWithStatus_ptr)

    Interceptor.attach(g_IOHIDServiceClientFastPathCopyEventWithStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientFastPathCopyEventWithStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientFastPathCopyEventWithStatus");
        }
    });        
 
    const g_IOHIDServiceClientFastPathCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientFastPathCopyProperty');
    console.log("[i] g_IOHIDServiceClientFastPathCopyProperty_ptr addr: " + g_IOHIDServiceClientFastPathCopyProperty_ptr)

    Interceptor.attach(g_IOHIDServiceClientFastPathCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientFastPathCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientFastPathCopyProperty");
        }
    });        
 
    const g_IOHIDServiceClientFastPathInit_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientFastPathInit');
    console.log("[i] g_IOHIDServiceClientFastPathInit_ptr addr: " + g_IOHIDServiceClientFastPathInit_ptr)

    Interceptor.attach(g_IOHIDServiceClientFastPathInit_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientFastPathInit")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientFastPathInit");
        }
    });        
 
    const g_IOHIDServiceClientFastPathInvalidate_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientFastPathInvalidate');
    console.log("[i] g_IOHIDServiceClientFastPathInvalidate_ptr addr: " + g_IOHIDServiceClientFastPathInvalidate_ptr)

    Interceptor.attach(g_IOHIDServiceClientFastPathInvalidate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientFastPathInvalidate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientFastPathInvalidate");
        }
    });        
 
    const g_IOHIDServiceClientFastPathSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientFastPathSetProperty');
    console.log("[i] g_IOHIDServiceClientFastPathSetProperty_ptr addr: " + g_IOHIDServiceClientFastPathSetProperty_ptr)

    Interceptor.attach(g_IOHIDServiceClientFastPathSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientFastPathSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientFastPathSetProperty");
        }
    });        
 
    const g_IOHIDServiceClientGetRegistryID_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientGetRegistryID');
    console.log("[i] g_IOHIDServiceClientGetRegistryID_ptr addr: " + g_IOHIDServiceClientGetRegistryID_ptr)

    Interceptor.attach(g_IOHIDServiceClientGetRegistryID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientGetRegistryID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientGetRegistryID");
        }
    });        
 
    const g_IOHIDServiceClientGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientGetTypeID');
    console.log("[i] g_IOHIDServiceClientGetTypeID_ptr addr: " + g_IOHIDServiceClientGetTypeID_ptr)

    Interceptor.attach(g_IOHIDServiceClientGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientGetTypeID");
        }
    });        
 
    const g_IOHIDServiceClientRegisterRemovalBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientRegisterRemovalBlock');
    console.log("[i] g_IOHIDServiceClientRegisterRemovalBlock_ptr addr: " + g_IOHIDServiceClientRegisterRemovalBlock_ptr)

    Interceptor.attach(g_IOHIDServiceClientRegisterRemovalBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientRegisterRemovalBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientRegisterRemovalBlock");
        }
    });        
 
    const g_IOHIDServiceClientRegisterRemovalCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientRegisterRemovalCallback');
    console.log("[i] g_IOHIDServiceClientRegisterRemovalCallback_ptr addr: " + g_IOHIDServiceClientRegisterRemovalCallback_ptr)

    Interceptor.attach(g_IOHIDServiceClientRegisterRemovalCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientRegisterRemovalCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientRegisterRemovalCallback");
        }
    });        
 
    const g_IOHIDServiceClientSetElementValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientSetElementValue');
    console.log("[i] g_IOHIDServiceClientSetElementValue_ptr addr: " + g_IOHIDServiceClientSetElementValue_ptr)

    Interceptor.attach(g_IOHIDServiceClientSetElementValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientSetElementValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientSetElementValue");
        }
    });        
 
    const g_IOHIDServiceClientSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceClientSetProperty');
    console.log("[i] g_IOHIDServiceClientSetProperty_ptr addr: " + g_IOHIDServiceClientSetProperty_ptr)

    Interceptor.attach(g_IOHIDServiceClientSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceClientSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceClientSetProperty");
        }
    });        
 
    const g_IOHIDServiceConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConformsTo');
    console.log("[i] g_IOHIDServiceConformsTo_ptr addr: " + g_IOHIDServiceConformsTo_ptr)

    Interceptor.attach(g_IOHIDServiceConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConformsTo");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheContainsKey_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheContainsKey');
    console.log("[i] g_IOHIDServiceConnectionCacheContainsKey_ptr addr: " + g_IOHIDServiceConnectionCacheContainsKey_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheContainsKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheContainsKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheContainsKey");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheCopyDebugInfo_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheCopyDebugInfo');
    console.log("[i] g_IOHIDServiceConnectionCacheCopyDebugInfo_ptr addr: " + g_IOHIDServiceConnectionCacheCopyDebugInfo_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheCopyDebugInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheCopyDebugInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheCopyDebugInfo");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheCopyValueForKey_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheCopyValueForKey');
    console.log("[i] g_IOHIDServiceConnectionCacheCopyValueForKey_ptr addr: " + g_IOHIDServiceConnectionCacheCopyValueForKey_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheCopyValueForKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheCopyValueForKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheCopyValueForKey");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheCreate');
    console.log("[i] g_IOHIDServiceConnectionCacheCreate_ptr addr: " + g_IOHIDServiceConnectionCacheCreate_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheCreate");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheGetReportDeadline_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheGetReportDeadline');
    console.log("[i] g_IOHIDServiceConnectionCacheGetReportDeadline_ptr addr: " + g_IOHIDServiceConnectionCacheGetReportDeadline_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheGetReportDeadline_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheGetReportDeadline")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheGetReportDeadline");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheGetTypeID');
    console.log("[i] g_IOHIDServiceConnectionCacheGetTypeID_ptr addr: " + g_IOHIDServiceConnectionCacheGetTypeID_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheGetTypeID");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheSetReportDeadline_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheSetReportDeadline');
    console.log("[i] g_IOHIDServiceConnectionCacheSetReportDeadline_ptr addr: " + g_IOHIDServiceConnectionCacheSetReportDeadline_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheSetReportDeadline_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheSetReportDeadline")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheSetReportDeadline");
        }
    });        
 
    const g_IOHIDServiceConnectionCacheSetValueForKey_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceConnectionCacheSetValueForKey');
    console.log("[i] g_IOHIDServiceConnectionCacheSetValueForKey_ptr addr: " + g_IOHIDServiceConnectionCacheSetValueForKey_ptr)

    Interceptor.attach(g_IOHIDServiceConnectionCacheSetValueForKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceConnectionCacheSetValueForKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceConnectionCacheSetValueForKey");
        }
    });        
 
    const g_IOHIDServiceCopyDescription_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCopyDescription');
    console.log("[i] g_IOHIDServiceCopyDescription_ptr addr: " + g_IOHIDServiceCopyDescription_ptr)

    Interceptor.attach(g_IOHIDServiceCopyDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCopyDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCopyDescription");
        }
    });        
 
    const g_IOHIDServiceCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCopyEvent');
    console.log("[i] g_IOHIDServiceCopyEvent_ptr addr: " + g_IOHIDServiceCopyEvent_ptr)

    Interceptor.attach(g_IOHIDServiceCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCopyEvent");
        }
    });        
 
    const g_IOHIDServiceCopyEventForClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCopyEventForClient');
    console.log("[i] g_IOHIDServiceCopyEventForClient_ptr addr: " + g_IOHIDServiceCopyEventForClient_ptr)

    Interceptor.attach(g_IOHIDServiceCopyEventForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCopyEventForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCopyEventForClient");
        }
    });        
 
    const g_IOHIDServiceCopyMatchingEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCopyMatchingEvent');
    console.log("[i] g_IOHIDServiceCopyMatchingEvent_ptr addr: " + g_IOHIDServiceCopyMatchingEvent_ptr)

    Interceptor.attach(g_IOHIDServiceCopyMatchingEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCopyMatchingEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCopyMatchingEvent");
        }
    });        
 
    const g_IOHIDServiceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCopyProperty');
    console.log("[i] g_IOHIDServiceCopyProperty_ptr addr: " + g_IOHIDServiceCopyProperty_ptr)

    Interceptor.attach(g_IOHIDServiceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCopyProperty");
        }
    });        
 
    const g_IOHIDServiceCreatePropertyChangedNotification_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCreatePropertyChangedNotification');
    console.log("[i] g_IOHIDServiceCreatePropertyChangedNotification_ptr addr: " + g_IOHIDServiceCreatePropertyChangedNotification_ptr)

    Interceptor.attach(g_IOHIDServiceCreatePropertyChangedNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCreatePropertyChangedNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCreatePropertyChangedNotification");
        }
    });        
 
    const g_IOHIDServiceCreateRemovalNotification_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceCreateRemovalNotification');
    console.log("[i] g_IOHIDServiceCreateRemovalNotification_ptr addr: " + g_IOHIDServiceCreateRemovalNotification_ptr)

    Interceptor.attach(g_IOHIDServiceCreateRemovalNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceCreateRemovalNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceCreateRemovalNotification");
        }
    });        
 
    const g_IOHIDServiceFilterClientNotification_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterClientNotification');
    console.log("[i] g_IOHIDServiceFilterClientNotification_ptr addr: " + g_IOHIDServiceFilterClientNotification_ptr)

    Interceptor.attach(g_IOHIDServiceFilterClientNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterClientNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterClientNotification");
        }
    });        
 
    const g_IOHIDServiceFilterClose_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterClose');
    console.log("[i] g_IOHIDServiceFilterClose_ptr addr: " + g_IOHIDServiceFilterClose_ptr)

    Interceptor.attach(g_IOHIDServiceFilterClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterClose");
        }
    });        
 
    const g_IOHIDServiceFilterCompare_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterCompare');
    console.log("[i] g_IOHIDServiceFilterCompare_ptr addr: " + g_IOHIDServiceFilterCompare_ptr)

    Interceptor.attach(g_IOHIDServiceFilterCompare_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterCompare")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterCompare");
        }
    });        
 
    const g_IOHIDServiceFilterCopyPropertyForClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterCopyPropertyForClient');
    console.log("[i] g_IOHIDServiceFilterCopyPropertyForClient_ptr addr: " + g_IOHIDServiceFilterCopyPropertyForClient_ptr)

    Interceptor.attach(g_IOHIDServiceFilterCopyPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterCopyPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterCopyPropertyForClient");
        }
    });        
 
    const g_IOHIDServiceFilterCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterCreate');
    console.log("[i] g_IOHIDServiceFilterCreate_ptr addr: " + g_IOHIDServiceFilterCreate_ptr)

    Interceptor.attach(g_IOHIDServiceFilterCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterCreate");
        }
    });        
 
    const g_IOHIDServiceFilterCreateWithClass_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterCreateWithClass');
    console.log("[i] g_IOHIDServiceFilterCreateWithClass_ptr addr: " + g_IOHIDServiceFilterCreateWithClass_ptr)

    Interceptor.attach(g_IOHIDServiceFilterCreateWithClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterCreateWithClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterCreateWithClass");
        }
    });        
 
    const g_IOHIDServiceFilterFilterCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterFilterCopyEvent');
    console.log("[i] g_IOHIDServiceFilterFilterCopyEvent_ptr addr: " + g_IOHIDServiceFilterFilterCopyEvent_ptr)

    Interceptor.attach(g_IOHIDServiceFilterFilterCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterFilterCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterFilterCopyEvent");
        }
    });        
 
    const g_IOHIDServiceFilterFilterCopyMatchingEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterFilterCopyMatchingEvent');
    console.log("[i] g_IOHIDServiceFilterFilterCopyMatchingEvent_ptr addr: " + g_IOHIDServiceFilterFilterCopyMatchingEvent_ptr)

    Interceptor.attach(g_IOHIDServiceFilterFilterCopyMatchingEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterFilterCopyMatchingEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterFilterCopyMatchingEvent");
        }
    });        
 
    const g_IOHIDServiceFilterFilterEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterFilterEvent');
    console.log("[i] g_IOHIDServiceFilterFilterEvent_ptr addr: " + g_IOHIDServiceFilterFilterEvent_ptr)

    Interceptor.attach(g_IOHIDServiceFilterFilterEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterFilterEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterFilterEvent");
        }
    });        
 
    const g_IOHIDServiceFilterGetMatchScore_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterGetMatchScore');
    console.log("[i] g_IOHIDServiceFilterGetMatchScore_ptr addr: " + g_IOHIDServiceFilterGetMatchScore_ptr)

    Interceptor.attach(g_IOHIDServiceFilterGetMatchScore_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterGetMatchScore")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterGetMatchScore");
        }
    });        
 
    const g_IOHIDServiceFilterGetStateMask_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterGetStateMask');
    console.log("[i] g_IOHIDServiceFilterGetStateMask_ptr addr: " + g_IOHIDServiceFilterGetStateMask_ptr)

    Interceptor.attach(g_IOHIDServiceFilterGetStateMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterGetStateMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterGetStateMask");
        }
    });        
 
    const g_IOHIDServiceFilterGetType_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterGetType');
    console.log("[i] g_IOHIDServiceFilterGetType_ptr addr: " + g_IOHIDServiceFilterGetType_ptr)

    Interceptor.attach(g_IOHIDServiceFilterGetType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterGetType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterGetType");
        }
    });        
 
    const g_IOHIDServiceFilterGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterGetTypeID');
    console.log("[i] g_IOHIDServiceFilterGetTypeID_ptr addr: " + g_IOHIDServiceFilterGetTypeID_ptr)

    Interceptor.attach(g_IOHIDServiceFilterGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterGetTypeID");
        }
    });        
 
    const g_IOHIDServiceFilterMatch_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterMatch');
    console.log("[i] g_IOHIDServiceFilterMatch_ptr addr: " + g_IOHIDServiceFilterMatch_ptr)

    Interceptor.attach(g_IOHIDServiceFilterMatch_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterMatch")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterMatch");
        }
    });        
 
    const g_IOHIDServiceFilterOpen_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterOpen');
    console.log("[i] g_IOHIDServiceFilterOpen_ptr addr: " + g_IOHIDServiceFilterOpen_ptr)

    Interceptor.attach(g_IOHIDServiceFilterOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterOpen");
        }
    });        
 
    const g_IOHIDServiceFilterSchedule_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterSchedule');
    console.log("[i] g_IOHIDServiceFilterSchedule_ptr addr: " + g_IOHIDServiceFilterSchedule_ptr)

    Interceptor.attach(g_IOHIDServiceFilterSchedule_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterSchedule")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterSchedule");
        }
    });        
 
    const g_IOHIDServiceFilterSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterSetCancelHandler');
    console.log("[i] g_IOHIDServiceFilterSetCancelHandler_ptr addr: " + g_IOHIDServiceFilterSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDServiceFilterSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterSetCancelHandler");
        }
    });        
 
    const g_IOHIDServiceFilterSetEventCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterSetEventCallback');
    console.log("[i] g_IOHIDServiceFilterSetEventCallback_ptr addr: " + g_IOHIDServiceFilterSetEventCallback_ptr)

    Interceptor.attach(g_IOHIDServiceFilterSetEventCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterSetEventCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterSetEventCallback");
        }
    });        
 
    const g_IOHIDServiceFilterSetOutputEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterSetOutputEvent');
    console.log("[i] g_IOHIDServiceFilterSetOutputEvent_ptr addr: " + g_IOHIDServiceFilterSetOutputEvent_ptr)

    Interceptor.attach(g_IOHIDServiceFilterSetOutputEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterSetOutputEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterSetOutputEvent");
        }
    });        
 
    const g_IOHIDServiceFilterSetPropertyForClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterSetPropertyForClient');
    console.log("[i] g_IOHIDServiceFilterSetPropertyForClient_ptr addr: " + g_IOHIDServiceFilterSetPropertyForClient_ptr)

    Interceptor.attach(g_IOHIDServiceFilterSetPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterSetPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterSetPropertyForClient");
        }
    });        
 
    const g_IOHIDServiceFilterUnschedule_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceFilterUnschedule');
    console.log("[i] g_IOHIDServiceFilterUnschedule_ptr addr: " + g_IOHIDServiceFilterUnschedule_ptr)

    Interceptor.attach(g_IOHIDServiceFilterUnschedule_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceFilterUnschedule")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceFilterUnschedule");
        }
    });        
 
    const g_IOHIDServiceGetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceGetProperty');
    console.log("[i] g_IOHIDServiceGetProperty_ptr addr: " + g_IOHIDServiceGetProperty_ptr)

    Interceptor.attach(g_IOHIDServiceGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceGetProperty");
        }
    });        
 
    const g_IOHIDServiceGetRegistryID_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceGetRegistryID');
    console.log("[i] g_IOHIDServiceGetRegistryID_ptr addr: " + g_IOHIDServiceGetRegistryID_ptr)

    Interceptor.attach(g_IOHIDServiceGetRegistryID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceGetRegistryID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceGetRegistryID");
        }
    });        
 
    const g_IOHIDServiceGetService_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceGetService');
    console.log("[i] g_IOHIDServiceGetService_ptr addr: " + g_IOHIDServiceGetService_ptr)

    Interceptor.attach(g_IOHIDServiceGetService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceGetService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceGetService");
        }
    });        
 
    const g_IOHIDServiceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceGetTypeID');
    console.log("[i] g_IOHIDServiceGetTypeID_ptr addr: " + g_IOHIDServiceGetTypeID_ptr)

    Interceptor.attach(g_IOHIDServiceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceGetTypeID");
        }
    });        
 
    const g_IOHIDServiceMatchPropertyTable_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceMatchPropertyTable');
    console.log("[i] g_IOHIDServiceMatchPropertyTable_ptr addr: " + g_IOHIDServiceMatchPropertyTable_ptr)

    Interceptor.attach(g_IOHIDServiceMatchPropertyTable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceMatchPropertyTable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceMatchPropertyTable");
        }
    });        
 
    const g_IOHIDServiceSetElementValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceSetElementValue');
    console.log("[i] g_IOHIDServiceSetElementValue_ptr addr: " + g_IOHIDServiceSetElementValue_ptr)

    Interceptor.attach(g_IOHIDServiceSetElementValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceSetElementValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceSetElementValue");
        }
    });        
 
    const g_IOHIDServiceSetOutputEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceSetOutputEvent');
    console.log("[i] g_IOHIDServiceSetOutputEvent_ptr addr: " + g_IOHIDServiceSetOutputEvent_ptr)

    Interceptor.attach(g_IOHIDServiceSetOutputEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceSetOutputEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceSetOutputEvent");
        }
    });        
 
    const g_IOHIDServiceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDServiceSetProperty');
    console.log("[i] g_IOHIDServiceSetProperty_ptr addr: " + g_IOHIDServiceSetProperty_ptr)

    Interceptor.attach(g_IOHIDServiceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDServiceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDServiceSetProperty");
        }
    });        
 
    const g_IOHIDSessionAddService_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionAddService');
    console.log("[i] g_IOHIDSessionAddService_ptr addr: " + g_IOHIDSessionAddService_ptr)

    Interceptor.attach(g_IOHIDSessionAddService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionAddService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionAddService");
        }
    });        
 
    const g_IOHIDSessionClose_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionClose');
    console.log("[i] g_IOHIDSessionClose_ptr addr: " + g_IOHIDSessionClose_ptr)

    Interceptor.attach(g_IOHIDSessionClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionClose");
        }
    });        
 
    const g_IOHIDSessionCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionCopyEvent');
    console.log("[i] g_IOHIDSessionCopyEvent_ptr addr: " + g_IOHIDSessionCopyEvent_ptr)

    Interceptor.attach(g_IOHIDSessionCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionCopyEvent");
        }
    });        
 
    const g_IOHIDSessionCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionCreate');
    console.log("[i] g_IOHIDSessionCreate_ptr addr: " + g_IOHIDSessionCreate_ptr)

    Interceptor.attach(g_IOHIDSessionCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionCreate");
        }
    });        
 
    const g_IOHIDSessionFilterClose_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterClose');
    console.log("[i] g_IOHIDSessionFilterClose_ptr addr: " + g_IOHIDSessionFilterClose_ptr)

    Interceptor.attach(g_IOHIDSessionFilterClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterClose");
        }
    });        
 
    const g_IOHIDSessionFilterCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterCopyEvent');
    console.log("[i] g_IOHIDSessionFilterCopyEvent_ptr addr: " + g_IOHIDSessionFilterCopyEvent_ptr)

    Interceptor.attach(g_IOHIDSessionFilterCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterCopyEvent");
        }
    });        
 
    const g_IOHIDSessionFilterCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterCreate');
    console.log("[i] g_IOHIDSessionFilterCreate_ptr addr: " + g_IOHIDSessionFilterCreate_ptr)

    Interceptor.attach(g_IOHIDSessionFilterCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterCreate");
        }
    });        
 
    const g_IOHIDSessionFilterCreateWithClass_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterCreateWithClass');
    console.log("[i] g_IOHIDSessionFilterCreateWithClass_ptr addr: " + g_IOHIDSessionFilterCreateWithClass_ptr)

    Interceptor.attach(g_IOHIDSessionFilterCreateWithClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterCreateWithClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterCreateWithClass");
        }
    });        
 
    const g_IOHIDSessionFilterFilterCopyEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterFilterCopyEvent');
    console.log("[i] g_IOHIDSessionFilterFilterCopyEvent_ptr addr: " + g_IOHIDSessionFilterFilterCopyEvent_ptr)

    Interceptor.attach(g_IOHIDSessionFilterFilterCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterFilterCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterFilterCopyEvent");
        }
    });        
 
    const g_IOHIDSessionFilterFilterEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterFilterEvent');
    console.log("[i] g_IOHIDSessionFilterFilterEvent_ptr addr: " + g_IOHIDSessionFilterFilterEvent_ptr)

    Interceptor.attach(g_IOHIDSessionFilterFilterEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterFilterEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterFilterEvent");
        }
    });        
 
    const g_IOHIDSessionFilterFilterEventToConnection_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterFilterEventToConnection');
    console.log("[i] g_IOHIDSessionFilterFilterEventToConnection_ptr addr: " + g_IOHIDSessionFilterFilterEventToConnection_ptr)

    Interceptor.attach(g_IOHIDSessionFilterFilterEventToConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterFilterEventToConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterFilterEventToConnection");
        }
    });        
 
    const g_IOHIDSessionFilterGetPropertyForClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterGetPropertyForClient');
    console.log("[i] g_IOHIDSessionFilterGetPropertyForClient_ptr addr: " + g_IOHIDSessionFilterGetPropertyForClient_ptr)

    Interceptor.attach(g_IOHIDSessionFilterGetPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterGetPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterGetPropertyForClient");
        }
    });        
 
    const g_IOHIDSessionFilterGetType_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterGetType');
    console.log("[i] g_IOHIDSessionFilterGetType_ptr addr: " + g_IOHIDSessionFilterGetType_ptr)

    Interceptor.attach(g_IOHIDSessionFilterGetType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterGetType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterGetType");
        }
    });        
 
    const g_IOHIDSessionFilterGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterGetTypeID');
    console.log("[i] g_IOHIDSessionFilterGetTypeID_ptr addr: " + g_IOHIDSessionFilterGetTypeID_ptr)

    Interceptor.attach(g_IOHIDSessionFilterGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterGetTypeID");
        }
    });        
 
    const g_IOHIDSessionFilterOpen_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterOpen');
    console.log("[i] g_IOHIDSessionFilterOpen_ptr addr: " + g_IOHIDSessionFilterOpen_ptr)

    Interceptor.attach(g_IOHIDSessionFilterOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterOpen");
        }
    });        
 
    const g_IOHIDSessionFilterRegisterService_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterRegisterService');
    console.log("[i] g_IOHIDSessionFilterRegisterService_ptr addr: " + g_IOHIDSessionFilterRegisterService_ptr)

    Interceptor.attach(g_IOHIDSessionFilterRegisterService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterRegisterService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterRegisterService");
        }
    });        
 
    const g_IOHIDSessionFilterScheduleWithDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterScheduleWithDispatchQueue');
    console.log("[i] g_IOHIDSessionFilterScheduleWithDispatchQueue_ptr addr: " + g_IOHIDSessionFilterScheduleWithDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDSessionFilterScheduleWithDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterScheduleWithDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterScheduleWithDispatchQueue");
        }
    });        
 
    const g_IOHIDSessionFilterSetPropertyForClient_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterSetPropertyForClient');
    console.log("[i] g_IOHIDSessionFilterSetPropertyForClient_ptr addr: " + g_IOHIDSessionFilterSetPropertyForClient_ptr)

    Interceptor.attach(g_IOHIDSessionFilterSetPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterSetPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterSetPropertyForClient");
        }
    });        
 
    const g_IOHIDSessionFilterUnregisterService_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterUnregisterService');
    console.log("[i] g_IOHIDSessionFilterUnregisterService_ptr addr: " + g_IOHIDSessionFilterUnregisterService_ptr)

    Interceptor.attach(g_IOHIDSessionFilterUnregisterService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterUnregisterService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterUnregisterService");
        }
    });        
 
    const g_IOHIDSessionFilterUnscheduleFromDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionFilterUnscheduleFromDispatchQueue');
    console.log("[i] g_IOHIDSessionFilterUnscheduleFromDispatchQueue_ptr addr: " + g_IOHIDSessionFilterUnscheduleFromDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDSessionFilterUnscheduleFromDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionFilterUnscheduleFromDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionFilterUnscheduleFromDispatchQueue");
        }
    });        
 
    const g_IOHIDSessionGetFilters_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionGetFilters');
    console.log("[i] g_IOHIDSessionGetFilters_ptr addr: " + g_IOHIDSessionGetFilters_ptr)

    Interceptor.attach(g_IOHIDSessionGetFilters_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionGetFilters")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionGetFilters");
        }
    });        
 
    const g_IOHIDSessionGetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionGetProperty');
    console.log("[i] g_IOHIDSessionGetProperty_ptr addr: " + g_IOHIDSessionGetProperty_ptr)

    Interceptor.attach(g_IOHIDSessionGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionGetProperty");
        }
    });        
 
    const g_IOHIDSessionGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionGetTypeID');
    console.log("[i] g_IOHIDSessionGetTypeID_ptr addr: " + g_IOHIDSessionGetTypeID_ptr)

    Interceptor.attach(g_IOHIDSessionGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionGetTypeID");
        }
    });        
 
    const g_IOHIDSessionOpen_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionOpen');
    console.log("[i] g_IOHIDSessionOpen_ptr addr: " + g_IOHIDSessionOpen_ptr)

    Interceptor.attach(g_IOHIDSessionOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionOpen");
        }
    });        
 
    const g_IOHIDSessionRemoveService_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionRemoveService');
    console.log("[i] g_IOHIDSessionRemoveService_ptr addr: " + g_IOHIDSessionRemoveService_ptr)

    Interceptor.attach(g_IOHIDSessionRemoveService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionRemoveService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionRemoveService");
        }
    });        
 
    const g_IOHIDSessionSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDSessionSetProperty');
    console.log("[i] g_IOHIDSessionSetProperty_ptr addr: " + g_IOHIDSessionSetProperty_ptr)

    Interceptor.attach(g_IOHIDSessionSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSessionSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSessionSetProperty");
        }
    });        
 
    const g_IOHIDSetAccelerationWithKey_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetAccelerationWithKey');
    console.log("[i] g_IOHIDSetAccelerationWithKey_ptr addr: " + g_IOHIDSetAccelerationWithKey_ptr)

    Interceptor.attach(g_IOHIDSetAccelerationWithKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetAccelerationWithKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetAccelerationWithKey");
        }
    });        
 
    const g_IOHIDSetCFTypeParameter_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetCFTypeParameter');
    console.log("[i] g_IOHIDSetCFTypeParameter_ptr addr: " + g_IOHIDSetCFTypeParameter_ptr)

    Interceptor.attach(g_IOHIDSetCFTypeParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetCFTypeParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetCFTypeParameter");
        }
    });        
 
    const g_IOHIDSetCursorBounds_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetCursorBounds');
    console.log("[i] g_IOHIDSetCursorBounds_ptr addr: " + g_IOHIDSetCursorBounds_ptr)

    Interceptor.attach(g_IOHIDSetCursorBounds_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetCursorBounds")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetCursorBounds");
        }
    });        
 
    const g_IOHIDSetCursorEnable_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetCursorEnable');
    console.log("[i] g_IOHIDSetCursorEnable_ptr addr: " + g_IOHIDSetCursorEnable_ptr)

    Interceptor.attach(g_IOHIDSetCursorEnable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetCursorEnable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetCursorEnable");
        }
    });        
 
    const g_IOHIDSetEventsEnable_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetEventsEnable');
    console.log("[i] g_IOHIDSetEventsEnable_ptr addr: " + g_IOHIDSetEventsEnable_ptr)

    Interceptor.attach(g_IOHIDSetEventsEnable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetEventsEnable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetEventsEnable");
        }
    });        
 
    const g_IOHIDSetFixedMouseLocation_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetFixedMouseLocation');
    console.log("[i] g_IOHIDSetFixedMouseLocation_ptr addr: " + g_IOHIDSetFixedMouseLocation_ptr)

    Interceptor.attach(g_IOHIDSetFixedMouseLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetFixedMouseLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetFixedMouseLocation");
        }
    });        
 
    const g_IOHIDSetFixedMouseLocationWithTimeStamp_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetFixedMouseLocationWithTimeStamp');
    console.log("[i] g_IOHIDSetFixedMouseLocationWithTimeStamp_ptr addr: " + g_IOHIDSetFixedMouseLocationWithTimeStamp_ptr)

    Interceptor.attach(g_IOHIDSetFixedMouseLocationWithTimeStamp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetFixedMouseLocationWithTimeStamp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetFixedMouseLocationWithTimeStamp");
        }
    });        
 
    const g_IOHIDSetHIDParameterToEventSystem_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetHIDParameterToEventSystem');
    console.log("[i] g_IOHIDSetHIDParameterToEventSystem_ptr addr: " + g_IOHIDSetHIDParameterToEventSystem_ptr)

    Interceptor.attach(g_IOHIDSetHIDParameterToEventSystem_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetHIDParameterToEventSystem")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetHIDParameterToEventSystem");
        }
    });        
 
    const g_IOHIDSetModifierLockState_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetModifierLockState');
    console.log("[i] g_IOHIDSetModifierLockState_ptr addr: " + g_IOHIDSetModifierLockState_ptr)

    Interceptor.attach(g_IOHIDSetModifierLockState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetModifierLockState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetModifierLockState");
        }
    });        
 
    const g_IOHIDSetMouseAcceleration_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetMouseAcceleration');
    console.log("[i] g_IOHIDSetMouseAcceleration_ptr addr: " + g_IOHIDSetMouseAcceleration_ptr)

    Interceptor.attach(g_IOHIDSetMouseAcceleration_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetMouseAcceleration")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetMouseAcceleration");
        }
    });        
 
    const g_IOHIDSetMouseButtonMode_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetMouseButtonMode');
    console.log("[i] g_IOHIDSetMouseButtonMode_ptr addr: " + g_IOHIDSetMouseButtonMode_ptr)

    Interceptor.attach(g_IOHIDSetMouseButtonMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetMouseButtonMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetMouseButtonMode");
        }
    });        
 
    const g_IOHIDSetMouseLocation_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetMouseLocation');
    console.log("[i] g_IOHIDSetMouseLocation_ptr addr: " + g_IOHIDSetMouseLocation_ptr)

    Interceptor.attach(g_IOHIDSetMouseLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetMouseLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetMouseLocation");
        }
    });        
 
    const g_IOHIDSetOnScreenCursorBounds_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetOnScreenCursorBounds');
    console.log("[i] g_IOHIDSetOnScreenCursorBounds_ptr addr: " + g_IOHIDSetOnScreenCursorBounds_ptr)

    Interceptor.attach(g_IOHIDSetOnScreenCursorBounds_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetOnScreenCursorBounds")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetOnScreenCursorBounds");
        }
    });        
 
    const g_IOHIDSetParameter_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetParameter');
    console.log("[i] g_IOHIDSetParameter_ptr addr: " + g_IOHIDSetParameter_ptr)

    Interceptor.attach(g_IOHIDSetParameter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetParameter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetParameter");
        }
    });        
 
    const g_IOHIDSetScrollAcceleration_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetScrollAcceleration');
    console.log("[i] g_IOHIDSetScrollAcceleration_ptr addr: " + g_IOHIDSetScrollAcceleration_ptr)

    Interceptor.attach(g_IOHIDSetScrollAcceleration_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetScrollAcceleration")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetScrollAcceleration");
        }
    });        
 
    const g_IOHIDSetStateForSelector_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetStateForSelector');
    console.log("[i] g_IOHIDSetStateForSelector_ptr addr: " + g_IOHIDSetStateForSelector_ptr)

    Interceptor.attach(g_IOHIDSetStateForSelector_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetStateForSelector")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetStateForSelector");
        }
    });        
 
    const g_IOHIDSetVirtualDisplayBounds_ptr = Module.getExportByName(g_proc_name, 'IOHIDSetVirtualDisplayBounds');
    console.log("[i] g_IOHIDSetVirtualDisplayBounds_ptr addr: " + g_IOHIDSetVirtualDisplayBounds_ptr)

    Interceptor.attach(g_IOHIDSetVirtualDisplayBounds_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDSetVirtualDisplayBounds")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDSetVirtualDisplayBounds");
        }
    });        
 
    const g_IOHIDTransactionAddElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionAddElement');
    console.log("[i] g_IOHIDTransactionAddElement_ptr addr: " + g_IOHIDTransactionAddElement_ptr)

    Interceptor.attach(g_IOHIDTransactionAddElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionAddElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionAddElement");
        }
    });        
 
    const g_IOHIDTransactionClear_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionClear');
    console.log("[i] g_IOHIDTransactionClear_ptr addr: " + g_IOHIDTransactionClear_ptr)

    Interceptor.attach(g_IOHIDTransactionClear_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionClear")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionClear");
        }
    });        
 
    const g_IOHIDTransactionCommit_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionCommit');
    console.log("[i] g_IOHIDTransactionCommit_ptr addr: " + g_IOHIDTransactionCommit_ptr)

    Interceptor.attach(g_IOHIDTransactionCommit_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionCommit")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionCommit");
        }
    });        
 
    const g_IOHIDTransactionCommitWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionCommitWithCallback');
    console.log("[i] g_IOHIDTransactionCommitWithCallback_ptr addr: " + g_IOHIDTransactionCommitWithCallback_ptr)

    Interceptor.attach(g_IOHIDTransactionCommitWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionCommitWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionCommitWithCallback");
        }
    });        
 
    const g_IOHIDTransactionContainsElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionContainsElement');
    console.log("[i] g_IOHIDTransactionContainsElement_ptr addr: " + g_IOHIDTransactionContainsElement_ptr)

    Interceptor.attach(g_IOHIDTransactionContainsElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionContainsElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionContainsElement");
        }
    });        
 
    const g_IOHIDTransactionCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionCreate');
    console.log("[i] g_IOHIDTransactionCreate_ptr addr: " + g_IOHIDTransactionCreate_ptr)

    Interceptor.attach(g_IOHIDTransactionCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionCreate");
        }
    });        
 
    const g_IOHIDTransactionGetDevice_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionGetDevice');
    console.log("[i] g_IOHIDTransactionGetDevice_ptr addr: " + g_IOHIDTransactionGetDevice_ptr)

    Interceptor.attach(g_IOHIDTransactionGetDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionGetDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionGetDevice");
        }
    });        
 
    const g_IOHIDTransactionGetDirection_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionGetDirection');
    console.log("[i] g_IOHIDTransactionGetDirection_ptr addr: " + g_IOHIDTransactionGetDirection_ptr)

    Interceptor.attach(g_IOHIDTransactionGetDirection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionGetDirection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionGetDirection");
        }
    });        
 
    const g_IOHIDTransactionGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionGetTypeID');
    console.log("[i] g_IOHIDTransactionGetTypeID_ptr addr: " + g_IOHIDTransactionGetTypeID_ptr)

    Interceptor.attach(g_IOHIDTransactionGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionGetTypeID");
        }
    });        
 
    const g_IOHIDTransactionGetValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionGetValue');
    console.log("[i] g_IOHIDTransactionGetValue_ptr addr: " + g_IOHIDTransactionGetValue_ptr)

    Interceptor.attach(g_IOHIDTransactionGetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionGetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionGetValue");
        }
    });        
 
    const g_IOHIDTransactionRemoveElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionRemoveElement');
    console.log("[i] g_IOHIDTransactionRemoveElement_ptr addr: " + g_IOHIDTransactionRemoveElement_ptr)

    Interceptor.attach(g_IOHIDTransactionRemoveElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionRemoveElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionRemoveElement");
        }
    });        
 
    const g_IOHIDTransactionScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionScheduleWithRunLoop');
    console.log("[i] g_IOHIDTransactionScheduleWithRunLoop_ptr addr: " + g_IOHIDTransactionScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDTransactionScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionScheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDTransactionSetDirection_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionSetDirection');
    console.log("[i] g_IOHIDTransactionSetDirection_ptr addr: " + g_IOHIDTransactionSetDirection_ptr)

    Interceptor.attach(g_IOHIDTransactionSetDirection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionSetDirection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionSetDirection");
        }
    });        
 
    const g_IOHIDTransactionSetValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionSetValue');
    console.log("[i] g_IOHIDTransactionSetValue_ptr addr: " + g_IOHIDTransactionSetValue_ptr)

    Interceptor.attach(g_IOHIDTransactionSetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionSetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionSetValue");
        }
    });        
 
    const g_IOHIDTransactionUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDTransactionUnscheduleFromRunLoop');
    console.log("[i] g_IOHIDTransactionUnscheduleFromRunLoop_ptr addr: " + g_IOHIDTransactionUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOHIDTransactionUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDTransactionUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDTransactionUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOHIDUnregisterVirtualDisplay_ptr = Module.getExportByName(g_proc_name, 'IOHIDUnregisterVirtualDisplay');
    console.log("[i] g_IOHIDUnregisterVirtualDisplay_ptr addr: " + g_IOHIDUnregisterVirtualDisplay_ptr)

    Interceptor.attach(g_IOHIDUnregisterVirtualDisplay_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUnregisterVirtualDisplay")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUnregisterVirtualDisplay");
        }
    });        
 
    const g_IOHIDUserDeviceActivate_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceActivate');
    console.log("[i] g_IOHIDUserDeviceActivate_ptr addr: " + g_IOHIDUserDeviceActivate_ptr)

    Interceptor.attach(g_IOHIDUserDeviceActivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceActivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceActivate");
        }
    });        
 
    const g_IOHIDUserDeviceCancel_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceCancel');
    console.log("[i] g_IOHIDUserDeviceCancel_ptr addr: " + g_IOHIDUserDeviceCancel_ptr)

    Interceptor.attach(g_IOHIDUserDeviceCancel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceCancel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceCancel");
        }
    });        
 
    const g_IOHIDUserDeviceCopyProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceCopyProperty');
    console.log("[i] g_IOHIDUserDeviceCopyProperty_ptr addr: " + g_IOHIDUserDeviceCopyProperty_ptr)

    Interceptor.attach(g_IOHIDUserDeviceCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceCopyProperty");
        }
    });        
 
    const g_IOHIDUserDeviceCopyService_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceCopyService');
    console.log("[i] g_IOHIDUserDeviceCopyService_ptr addr: " + g_IOHIDUserDeviceCopyService_ptr)

    Interceptor.attach(g_IOHIDUserDeviceCopyService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceCopyService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceCopyService");
        }
    });        
 
    const g_IOHIDUserDeviceCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceCreate');
    console.log("[i] g_IOHIDUserDeviceCreate_ptr addr: " + g_IOHIDUserDeviceCreate_ptr)

    Interceptor.attach(g_IOHIDUserDeviceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceCreate");
        }
    });        
 
    const g_IOHIDUserDeviceCreateWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceCreateWithOptions');
    console.log("[i] g_IOHIDUserDeviceCreateWithOptions_ptr addr: " + g_IOHIDUserDeviceCreateWithOptions_ptr)

    Interceptor.attach(g_IOHIDUserDeviceCreateWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceCreateWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceCreateWithOptions");
        }
    });        
 
    const g_IOHIDUserDeviceCreateWithProperties_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceCreateWithProperties');
    console.log("[i] g_IOHIDUserDeviceCreateWithProperties_ptr addr: " + g_IOHIDUserDeviceCreateWithProperties_ptr)

    Interceptor.attach(g_IOHIDUserDeviceCreateWithProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceCreateWithProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceCreateWithProperties");
        }
    });        
 
    const g_IOHIDUserDeviceGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceGetTypeID');
    console.log("[i] g_IOHIDUserDeviceGetTypeID_ptr addr: " + g_IOHIDUserDeviceGetTypeID_ptr)

    Interceptor.attach(g_IOHIDUserDeviceGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceGetTypeID");
        }
    });        
 
    const g_IOHIDUserDeviceHandleReport_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceHandleReport');
    console.log("[i] g_IOHIDUserDeviceHandleReport_ptr addr: " + g_IOHIDUserDeviceHandleReport_ptr)

    Interceptor.attach(g_IOHIDUserDeviceHandleReport_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceHandleReport")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceHandleReport");
        }
    });        
 
    const g_IOHIDUserDeviceHandleReportAsync_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceHandleReportAsync');
    console.log("[i] g_IOHIDUserDeviceHandleReportAsync_ptr addr: " + g_IOHIDUserDeviceHandleReportAsync_ptr)

    Interceptor.attach(g_IOHIDUserDeviceHandleReportAsync_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceHandleReportAsync")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceHandleReportAsync");
        }
    });        
 
    const g_IOHIDUserDeviceHandleReportAsyncWithTimeStamp_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceHandleReportAsyncWithTimeStamp');
    console.log("[i] g_IOHIDUserDeviceHandleReportAsyncWithTimeStamp_ptr addr: " + g_IOHIDUserDeviceHandleReportAsyncWithTimeStamp_ptr)

    Interceptor.attach(g_IOHIDUserDeviceHandleReportAsyncWithTimeStamp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceHandleReportAsyncWithTimeStamp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceHandleReportAsyncWithTimeStamp");
        }
    });        
 
    const g_IOHIDUserDeviceHandleReportWithTimeStamp_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceHandleReportWithTimeStamp');
    console.log("[i] g_IOHIDUserDeviceHandleReportWithTimeStamp_ptr addr: " + g_IOHIDUserDeviceHandleReportWithTimeStamp_ptr)

    Interceptor.attach(g_IOHIDUserDeviceHandleReportWithTimeStamp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceHandleReportWithTimeStamp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceHandleReportWithTimeStamp");
        }
    });        
 
    const g_IOHIDUserDeviceRegisterGetReportBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceRegisterGetReportBlock');
    console.log("[i] g_IOHIDUserDeviceRegisterGetReportBlock_ptr addr: " + g_IOHIDUserDeviceRegisterGetReportBlock_ptr)

    Interceptor.attach(g_IOHIDUserDeviceRegisterGetReportBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceRegisterGetReportBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceRegisterGetReportBlock");
        }
    });        
 
    const g_IOHIDUserDeviceRegisterGetReportCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceRegisterGetReportCallback');
    console.log("[i] g_IOHIDUserDeviceRegisterGetReportCallback_ptr addr: " + g_IOHIDUserDeviceRegisterGetReportCallback_ptr)

    Interceptor.attach(g_IOHIDUserDeviceRegisterGetReportCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceRegisterGetReportCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceRegisterGetReportCallback");
        }
    });        
 
    const g_IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback');
    console.log("[i] g_IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback_ptr addr: " + g_IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback_ptr)

    Interceptor.attach(g_IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback");
        }
    });        
 
    const g_IOHIDUserDeviceRegisterSetReportBlock_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceRegisterSetReportBlock');
    console.log("[i] g_IOHIDUserDeviceRegisterSetReportBlock_ptr addr: " + g_IOHIDUserDeviceRegisterSetReportBlock_ptr)

    Interceptor.attach(g_IOHIDUserDeviceRegisterSetReportBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceRegisterSetReportBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceRegisterSetReportBlock");
        }
    });        
 
    const g_IOHIDUserDeviceRegisterSetReportCallback_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceRegisterSetReportCallback');
    console.log("[i] g_IOHIDUserDeviceRegisterSetReportCallback_ptr addr: " + g_IOHIDUserDeviceRegisterSetReportCallback_ptr)

    Interceptor.attach(g_IOHIDUserDeviceRegisterSetReportCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceRegisterSetReportCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceRegisterSetReportCallback");
        }
    });        
 
    const g_IOHIDUserDeviceScheduleWithDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceScheduleWithDispatchQueue');
    console.log("[i] g_IOHIDUserDeviceScheduleWithDispatchQueue_ptr addr: " + g_IOHIDUserDeviceScheduleWithDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDUserDeviceScheduleWithDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceScheduleWithDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceScheduleWithDispatchQueue");
        }
    });        
 
    const g_IOHIDUserDeviceScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceScheduleWithRunLoop');
    console.log("[i] g_IOHIDUserDeviceScheduleWithRunLoop_ptr addr: " + g_IOHIDUserDeviceScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOHIDUserDeviceScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceScheduleWithRunLoop");
        }
    });        
 
    const g_IOHIDUserDeviceSetCancelHandler_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceSetCancelHandler');
    console.log("[i] g_IOHIDUserDeviceSetCancelHandler_ptr addr: " + g_IOHIDUserDeviceSetCancelHandler_ptr)

    Interceptor.attach(g_IOHIDUserDeviceSetCancelHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceSetCancelHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceSetCancelHandler");
        }
    });        
 
    const g_IOHIDUserDeviceSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceSetDispatchQueue');
    console.log("[i] g_IOHIDUserDeviceSetDispatchQueue_ptr addr: " + g_IOHIDUserDeviceSetDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDUserDeviceSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceSetDispatchQueue");
        }
    });        
 
    const g_IOHIDUserDeviceSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceSetProperty');
    console.log("[i] g_IOHIDUserDeviceSetProperty_ptr addr: " + g_IOHIDUserDeviceSetProperty_ptr)

    Interceptor.attach(g_IOHIDUserDeviceSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceSetProperty");
        }
    });        
 
    const g_IOHIDUserDeviceUnscheduleFromDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceUnscheduleFromDispatchQueue');
    console.log("[i] g_IOHIDUserDeviceUnscheduleFromDispatchQueue_ptr addr: " + g_IOHIDUserDeviceUnscheduleFromDispatchQueue_ptr)

    Interceptor.attach(g_IOHIDUserDeviceUnscheduleFromDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceUnscheduleFromDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceUnscheduleFromDispatchQueue");
        }
    });        
 
    const g_IOHIDUserDeviceUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOHIDUserDeviceUnscheduleFromRunLoop');
    console.log("[i] g_IOHIDUserDeviceUnscheduleFromRunLoop_ptr addr: " + g_IOHIDUserDeviceUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOHIDUserDeviceUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDUserDeviceUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDUserDeviceUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOHIDValueCreateWithBytes_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueCreateWithBytes');
    console.log("[i] g_IOHIDValueCreateWithBytes_ptr addr: " + g_IOHIDValueCreateWithBytes_ptr)

    Interceptor.attach(g_IOHIDValueCreateWithBytes_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueCreateWithBytes")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueCreateWithBytes");
        }
    });        
 
    const g_IOHIDValueCreateWithBytesNoCopy_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueCreateWithBytesNoCopy');
    console.log("[i] g_IOHIDValueCreateWithBytesNoCopy_ptr addr: " + g_IOHIDValueCreateWithBytesNoCopy_ptr)

    Interceptor.attach(g_IOHIDValueCreateWithBytesNoCopy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueCreateWithBytesNoCopy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueCreateWithBytesNoCopy");
        }
    });        
 
    const g_IOHIDValueCreateWithIntegerValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueCreateWithIntegerValue');
    console.log("[i] g_IOHIDValueCreateWithIntegerValue_ptr addr: " + g_IOHIDValueCreateWithIntegerValue_ptr)

    Interceptor.attach(g_IOHIDValueCreateWithIntegerValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueCreateWithIntegerValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueCreateWithIntegerValue");
        }
    });        
 
    const g_IOHIDValueGetBytePtr_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetBytePtr');
    console.log("[i] g_IOHIDValueGetBytePtr_ptr addr: " + g_IOHIDValueGetBytePtr_ptr)

    Interceptor.attach(g_IOHIDValueGetBytePtr_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetBytePtr")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetBytePtr");
        }
    });        
 
    const g_IOHIDValueGetElement_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetElement');
    console.log("[i] g_IOHIDValueGetElement_ptr addr: " + g_IOHIDValueGetElement_ptr)

    Interceptor.attach(g_IOHIDValueGetElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetElement");
        }
    });        
 
    const g_IOHIDValueGetIntegerValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetIntegerValue');
    console.log("[i] g_IOHIDValueGetIntegerValue_ptr addr: " + g_IOHIDValueGetIntegerValue_ptr)

    Interceptor.attach(g_IOHIDValueGetIntegerValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetIntegerValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetIntegerValue");
        }
    });        
 
    const g_IOHIDValueGetLength_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetLength');
    console.log("[i] g_IOHIDValueGetLength_ptr addr: " + g_IOHIDValueGetLength_ptr)

    Interceptor.attach(g_IOHIDValueGetLength_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetLength")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetLength");
        }
    });        
 
    const g_IOHIDValueGetScaledValue_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetScaledValue');
    console.log("[i] g_IOHIDValueGetScaledValue_ptr addr: " + g_IOHIDValueGetScaledValue_ptr)

    Interceptor.attach(g_IOHIDValueGetScaledValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetScaledValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetScaledValue");
        }
    });        
 
    const g_IOHIDValueGetTimeStamp_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetTimeStamp');
    console.log("[i] g_IOHIDValueGetTimeStamp_ptr addr: " + g_IOHIDValueGetTimeStamp_ptr)

    Interceptor.attach(g_IOHIDValueGetTimeStamp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetTimeStamp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetTimeStamp");
        }
    });        
 
    const g_IOHIDValueGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOHIDValueGetTypeID');
    console.log("[i] g_IOHIDValueGetTypeID_ptr addr: " + g_IOHIDValueGetTypeID_ptr)

    Interceptor.attach(g_IOHIDValueGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDValueGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDValueGetTypeID");
        }
    });        
 
    const g_IOHIDVirtualServiceClientCreate_ptr = Module.getExportByName(g_proc_name, 'IOHIDVirtualServiceClientCreate');
    console.log("[i] g_IOHIDVirtualServiceClientCreate_ptr addr: " + g_IOHIDVirtualServiceClientCreate_ptr)

    Interceptor.attach(g_IOHIDVirtualServiceClientCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDVirtualServiceClientCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDVirtualServiceClientCreate");
        }
    });        
 
    const g_IOHIDVirtualServiceClientCreateWithCallbacks_ptr = Module.getExportByName(g_proc_name, 'IOHIDVirtualServiceClientCreateWithCallbacks');
    console.log("[i] g_IOHIDVirtualServiceClientCreateWithCallbacks_ptr addr: " + g_IOHIDVirtualServiceClientCreateWithCallbacks_ptr)

    Interceptor.attach(g_IOHIDVirtualServiceClientCreateWithCallbacks_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDVirtualServiceClientCreateWithCallbacks")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDVirtualServiceClientCreateWithCallbacks");
        }
    });        
 
    const g_IOHIDVirtualServiceClientDispatchEvent_ptr = Module.getExportByName(g_proc_name, 'IOHIDVirtualServiceClientDispatchEvent');
    console.log("[i] g_IOHIDVirtualServiceClientDispatchEvent_ptr addr: " + g_IOHIDVirtualServiceClientDispatchEvent_ptr)

    Interceptor.attach(g_IOHIDVirtualServiceClientDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDVirtualServiceClientDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDVirtualServiceClientDispatchEvent");
        }
    });        
 
    const g_IOHIDVirtualServiceClientRemove_ptr = Module.getExportByName(g_proc_name, 'IOHIDVirtualServiceClientRemove');
    console.log("[i] g_IOHIDVirtualServiceClientRemove_ptr addr: " + g_IOHIDVirtualServiceClientRemove_ptr)

    Interceptor.attach(g_IOHIDVirtualServiceClientRemove_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOHIDVirtualServiceClientRemove")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOHIDVirtualServiceClientRemove");
        }
    });        
 
    const g_IOI2CCopyInterfaceForID_ptr = Module.getExportByName(g_proc_name, 'IOI2CCopyInterfaceForID');
    console.log("[i] g_IOI2CCopyInterfaceForID_ptr addr: " + g_IOI2CCopyInterfaceForID_ptr)

    Interceptor.attach(g_IOI2CCopyInterfaceForID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOI2CCopyInterfaceForID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOI2CCopyInterfaceForID");
        }
    });        
 
    const g_IOI2CInterfaceClose_ptr = Module.getExportByName(g_proc_name, 'IOI2CInterfaceClose');
    console.log("[i] g_IOI2CInterfaceClose_ptr addr: " + g_IOI2CInterfaceClose_ptr)

    Interceptor.attach(g_IOI2CInterfaceClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOI2CInterfaceClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOI2CInterfaceClose");
        }
    });        
 
    const g_IOI2CInterfaceOpen_ptr = Module.getExportByName(g_proc_name, 'IOI2CInterfaceOpen');
    console.log("[i] g_IOI2CInterfaceOpen_ptr addr: " + g_IOI2CInterfaceOpen_ptr)

    Interceptor.attach(g_IOI2CInterfaceOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOI2CInterfaceOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOI2CInterfaceOpen");
        }
    });        
 
    const g_IOI2CSendRequest_ptr = Module.getExportByName(g_proc_name, 'IOI2CSendRequest');
    console.log("[i] g_IOI2CSendRequest_ptr addr: " + g_IOI2CSendRequest_ptr)

    Interceptor.attach(g_IOI2CSendRequest_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOI2CSendRequest")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOI2CSendRequest");
        }
    });        
 
    const g_IOInitContainerClasses_ptr = Module.getExportByName(g_proc_name, 'IOInitContainerClasses');
    console.log("[i] g_IOInitContainerClasses_ptr addr: " + g_IOInitContainerClasses_ptr)

    Interceptor.attach(g_IOInitContainerClasses_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOInitContainerClasses")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOInitContainerClasses");
        }
    });        
 
    const g_IOIteratorIsValid_ptr = Module.getExportByName(g_proc_name, 'IOIteratorIsValid');
    console.log("[i] g_IOIteratorIsValid_ptr addr: " + g_IOIteratorIsValid_ptr)

    Interceptor.attach(g_IOIteratorIsValid_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOIteratorIsValid")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOIteratorIsValid");
        }
    });        
 
    const g_IOIteratorNext_ptr = Module.getExportByName(g_proc_name, 'IOIteratorNext');
    console.log("[i] g_IOIteratorNext_ptr addr: " + g_IOIteratorNext_ptr)

    Interceptor.attach(g_IOIteratorNext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOIteratorNext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOIteratorNext");
        }
    });        
 
    const g_IOIteratorReset_ptr = Module.getExportByName(g_proc_name, 'IOIteratorReset');
    console.log("[i] g_IOIteratorReset_ptr addr: " + g_IOIteratorReset_ptr)

    Interceptor.attach(g_IOIteratorReset_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOIteratorReset")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOIteratorReset");
        }
    });        
 
    const g_IOKitGetBusyState_ptr = Module.getExportByName(g_proc_name, 'IOKitGetBusyState');
    console.log("[i] g_IOKitGetBusyState_ptr addr: " + g_IOKitGetBusyState_ptr)

    Interceptor.attach(g_IOKitGetBusyState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOKitGetBusyState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOKitGetBusyState");
        }
    });        
 
    const g_IOKitWaitQuiet_ptr = Module.getExportByName(g_proc_name, 'IOKitWaitQuiet');
    console.log("[i] g_IOKitWaitQuiet_ptr addr: " + g_IOKitWaitQuiet_ptr)

    Interceptor.attach(g_IOKitWaitQuiet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOKitWaitQuiet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOKitWaitQuiet");
        }
    });        
 
    const g_IOLoadPEFsFromURL_ptr = Module.getExportByName(g_proc_name, 'IOLoadPEFsFromURL');
    console.log("[i] g_IOLoadPEFsFromURL_ptr addr: " + g_IOLoadPEFsFromURL_ptr)

    Interceptor.attach(g_IOLoadPEFsFromURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOLoadPEFsFromURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOLoadPEFsFromURL");
        }
    });        
 
    const g_IOMIGMachPortCacheAdd_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortCacheAdd');
    console.log("[i] g_IOMIGMachPortCacheAdd_ptr addr: " + g_IOMIGMachPortCacheAdd_ptr)

    Interceptor.attach(g_IOMIGMachPortCacheAdd_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortCacheAdd")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortCacheAdd");
        }
    });        
 
    const g_IOMIGMachPortCacheCopy_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortCacheCopy');
    console.log("[i] g_IOMIGMachPortCacheCopy_ptr addr: " + g_IOMIGMachPortCacheCopy_ptr)

    Interceptor.attach(g_IOMIGMachPortCacheCopy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortCacheCopy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortCacheCopy");
        }
    });        
 
    const g_IOMIGMachPortCacheRemove_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortCacheRemove');
    console.log("[i] g_IOMIGMachPortCacheRemove_ptr addr: " + g_IOMIGMachPortCacheRemove_ptr)

    Interceptor.attach(g_IOMIGMachPortCacheRemove_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortCacheRemove")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortCacheRemove");
        }
    });        
 
    const g_IOMIGMachPortCreate_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortCreate');
    console.log("[i] g_IOMIGMachPortCreate_ptr addr: " + g_IOMIGMachPortCreate_ptr)

    Interceptor.attach(g_IOMIGMachPortCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortCreate");
        }
    });        
 
    const g_IOMIGMachPortGetPort_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortGetPort');
    console.log("[i] g_IOMIGMachPortGetPort_ptr addr: " + g_IOMIGMachPortGetPort_ptr)

    Interceptor.attach(g_IOMIGMachPortGetPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortGetPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortGetPort");
        }
    });        
 
    const g_IOMIGMachPortGetTypeID_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortGetTypeID');
    console.log("[i] g_IOMIGMachPortGetTypeID_ptr addr: " + g_IOMIGMachPortGetTypeID_ptr)

    Interceptor.attach(g_IOMIGMachPortGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortGetTypeID");
        }
    });        
 
    const g_IOMIGMachPortRegisterDemuxCallback_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortRegisterDemuxCallback');
    console.log("[i] g_IOMIGMachPortRegisterDemuxCallback_ptr addr: " + g_IOMIGMachPortRegisterDemuxCallback_ptr)

    Interceptor.attach(g_IOMIGMachPortRegisterDemuxCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortRegisterDemuxCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortRegisterDemuxCallback");
        }
    });        
 
    const g_IOMIGMachPortRegisterTerminationCallback_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortRegisterTerminationCallback');
    console.log("[i] g_IOMIGMachPortRegisterTerminationCallback_ptr addr: " + g_IOMIGMachPortRegisterTerminationCallback_ptr)

    Interceptor.attach(g_IOMIGMachPortRegisterTerminationCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortRegisterTerminationCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortRegisterTerminationCallback");
        }
    });        
 
    const g_IOMIGMachPortScheduleWithDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortScheduleWithDispatchQueue');
    console.log("[i] g_IOMIGMachPortScheduleWithDispatchQueue_ptr addr: " + g_IOMIGMachPortScheduleWithDispatchQueue_ptr)

    Interceptor.attach(g_IOMIGMachPortScheduleWithDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortScheduleWithDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortScheduleWithDispatchQueue");
        }
    });        
 
    const g_IOMIGMachPortScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortScheduleWithRunLoop');
    console.log("[i] g_IOMIGMachPortScheduleWithRunLoop_ptr addr: " + g_IOMIGMachPortScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOMIGMachPortScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortScheduleWithRunLoop");
        }
    });        
 
    const g_IOMIGMachPortUnscheduleFromDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortUnscheduleFromDispatchQueue');
    console.log("[i] g_IOMIGMachPortUnscheduleFromDispatchQueue_ptr addr: " + g_IOMIGMachPortUnscheduleFromDispatchQueue_ptr)

    Interceptor.attach(g_IOMIGMachPortUnscheduleFromDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortUnscheduleFromDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortUnscheduleFromDispatchQueue");
        }
    });        
 
    const g_IOMIGMachPortUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOMIGMachPortUnscheduleFromRunLoop');
    console.log("[i] g_IOMIGMachPortUnscheduleFromRunLoop_ptr addr: " + g_IOMIGMachPortUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOMIGMachPortUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMIGMachPortUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMIGMachPortUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOMainPort_ptr = Module.getExportByName(g_proc_name, 'IOMainPort');
    console.log("[i] g_IOMainPort_ptr addr: " + g_IOMainPort_ptr)

    Interceptor.attach(g_IOMainPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMainPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMainPort");
        }
    });        
 
    const g_IOMasterPort_ptr = Module.getExportByName(g_proc_name, 'IOMasterPort');
    console.log("[i] g_IOMasterPort_ptr addr: " + g_IOMasterPort_ptr)

    Interceptor.attach(g_IOMasterPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOMasterPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOMasterPort");
        }
    });        
 
    const g_IONetworkClose_ptr = Module.getExportByName(g_proc_name, 'IONetworkClose');
    console.log("[i] g_IONetworkClose_ptr addr: " + g_IONetworkClose_ptr)

    Interceptor.attach(g_IONetworkClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkClose");
        }
    });        
 
    const g_IONetworkGetDataCapacity_ptr = Module.getExportByName(g_proc_name, 'IONetworkGetDataCapacity');
    console.log("[i] g_IONetworkGetDataCapacity_ptr addr: " + g_IONetworkGetDataCapacity_ptr)

    Interceptor.attach(g_IONetworkGetDataCapacity_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkGetDataCapacity")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkGetDataCapacity");
        }
    });        
 
    const g_IONetworkGetDataHandle_ptr = Module.getExportByName(g_proc_name, 'IONetworkGetDataHandle');
    console.log("[i] g_IONetworkGetDataHandle_ptr addr: " + g_IONetworkGetDataHandle_ptr)

    Interceptor.attach(g_IONetworkGetDataHandle_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkGetDataHandle")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkGetDataHandle");
        }
    });        
 
    const g_IONetworkGetPacketFiltersMask_ptr = Module.getExportByName(g_proc_name, 'IONetworkGetPacketFiltersMask');
    console.log("[i] g_IONetworkGetPacketFiltersMask_ptr addr: " + g_IONetworkGetPacketFiltersMask_ptr)

    Interceptor.attach(g_IONetworkGetPacketFiltersMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkGetPacketFiltersMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkGetPacketFiltersMask");
        }
    });        
 
    const g_IONetworkOpen_ptr = Module.getExportByName(g_proc_name, 'IONetworkOpen');
    console.log("[i] g_IONetworkOpen_ptr addr: " + g_IONetworkOpen_ptr)

    Interceptor.attach(g_IONetworkOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkOpen");
        }
    });        
 
    const g_IONetworkReadData_ptr = Module.getExportByName(g_proc_name, 'IONetworkReadData');
    console.log("[i] g_IONetworkReadData_ptr addr: " + g_IONetworkReadData_ptr)

    Interceptor.attach(g_IONetworkReadData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkReadData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkReadData");
        }
    });        
 
    const g_IONetworkResetData_ptr = Module.getExportByName(g_proc_name, 'IONetworkResetData');
    console.log("[i] g_IONetworkResetData_ptr addr: " + g_IONetworkResetData_ptr)

    Interceptor.attach(g_IONetworkResetData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkResetData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkResetData");
        }
    });        
 
    const g_IONetworkSetPacketFiltersMask_ptr = Module.getExportByName(g_proc_name, 'IONetworkSetPacketFiltersMask');
    console.log("[i] g_IONetworkSetPacketFiltersMask_ptr addr: " + g_IONetworkSetPacketFiltersMask_ptr)

    Interceptor.attach(g_IONetworkSetPacketFiltersMask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkSetPacketFiltersMask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkSetPacketFiltersMask");
        }
    });        
 
    const g_IONetworkWriteData_ptr = Module.getExportByName(g_proc_name, 'IONetworkWriteData');
    console.log("[i] g_IONetworkWriteData_ptr addr: " + g_IONetworkWriteData_ptr)

    Interceptor.attach(g_IONetworkWriteData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONetworkWriteData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONetworkWriteData");
        }
    });        
 
    const g_IONoteToSelfSupported_ptr = Module.getExportByName(g_proc_name, 'IONoteToSelfSupported');
    console.log("[i] g_IONoteToSelfSupported_ptr addr: " + g_IONoteToSelfSupported_ptr)

    Interceptor.attach(g_IONoteToSelfSupported_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONoteToSelfSupported")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONoteToSelfSupported");
        }
    });        
 
    const g_IONotificationPortCreate_ptr = Module.getExportByName(g_proc_name, 'IONotificationPortCreate');
    console.log("[i] g_IONotificationPortCreate_ptr addr: " + g_IONotificationPortCreate_ptr)

    Interceptor.attach(g_IONotificationPortCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONotificationPortCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONotificationPortCreate");
        }
    });        
 
    const g_IONotificationPortDestroy_ptr = Module.getExportByName(g_proc_name, 'IONotificationPortDestroy');
    console.log("[i] g_IONotificationPortDestroy_ptr addr: " + g_IONotificationPortDestroy_ptr)

    Interceptor.attach(g_IONotificationPortDestroy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONotificationPortDestroy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONotificationPortDestroy");
        }
    });        
 
    const g_IONotificationPortGetMachPort_ptr = Module.getExportByName(g_proc_name, 'IONotificationPortGetMachPort');
    console.log("[i] g_IONotificationPortGetMachPort_ptr addr: " + g_IONotificationPortGetMachPort_ptr)

    Interceptor.attach(g_IONotificationPortGetMachPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONotificationPortGetMachPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONotificationPortGetMachPort");
        }
    });        
 
    const g_IONotificationPortGetRunLoopSource_ptr = Module.getExportByName(g_proc_name, 'IONotificationPortGetRunLoopSource');
    console.log("[i] g_IONotificationPortGetRunLoopSource_ptr addr: " + g_IONotificationPortGetRunLoopSource_ptr)

    Interceptor.attach(g_IONotificationPortGetRunLoopSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONotificationPortGetRunLoopSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONotificationPortGetRunLoopSource");
        }
    });        
 
    const g_IONotificationPortSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IONotificationPortSetDispatchQueue');
    console.log("[i] g_IONotificationPortSetDispatchQueue_ptr addr: " + g_IONotificationPortSetDispatchQueue_ptr)

    Interceptor.attach(g_IONotificationPortSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONotificationPortSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONotificationPortSetDispatchQueue");
        }
    });        
 
    const g_IONotificationPortSetImportanceReceiver_ptr = Module.getExportByName(g_proc_name, 'IONotificationPortSetImportanceReceiver');
    console.log("[i] g_IONotificationPortSetImportanceReceiver_ptr addr: " + g_IONotificationPortSetImportanceReceiver_ptr)

    Interceptor.attach(g_IONotificationPortSetImportanceReceiver_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IONotificationPortSetImportanceReceiver")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IONotificationPortSetImportanceReceiver");
        }
    });        
 
    const g_IOObjectConformsTo_ptr = Module.getExportByName(g_proc_name, 'IOObjectConformsTo');
    console.log("[i] g_IOObjectConformsTo_ptr addr: " + g_IOObjectConformsTo_ptr)

    Interceptor.attach(g_IOObjectConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectConformsTo");
        }
    });        
 
    const g_IOObjectCopyBundleIdentifierForClass_ptr = Module.getExportByName(g_proc_name, 'IOObjectCopyBundleIdentifierForClass');
    console.log("[i] g_IOObjectCopyBundleIdentifierForClass_ptr addr: " + g_IOObjectCopyBundleIdentifierForClass_ptr)

    Interceptor.attach(g_IOObjectCopyBundleIdentifierForClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectCopyBundleIdentifierForClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectCopyBundleIdentifierForClass");
        }
    });        
 
    const g_IOObjectCopyClass_ptr = Module.getExportByName(g_proc_name, 'IOObjectCopyClass');
    console.log("[i] g_IOObjectCopyClass_ptr addr: " + g_IOObjectCopyClass_ptr)

    Interceptor.attach(g_IOObjectCopyClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectCopyClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectCopyClass");
        }
    });        
 
    const g_IOObjectCopySuperclassForClass_ptr = Module.getExportByName(g_proc_name, 'IOObjectCopySuperclassForClass');
    console.log("[i] g_IOObjectCopySuperclassForClass_ptr addr: " + g_IOObjectCopySuperclassForClass_ptr)

    Interceptor.attach(g_IOObjectCopySuperclassForClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectCopySuperclassForClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectCopySuperclassForClass");
        }
    });        
 
    const g_IOObjectGetClass_ptr = Module.getExportByName(g_proc_name, 'IOObjectGetClass');
    console.log("[i] g_IOObjectGetClass_ptr addr: " + g_IOObjectGetClass_ptr)

    Interceptor.attach(g_IOObjectGetClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectGetClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectGetClass");
        }
    });        
 
    const g_IOObjectGetKernelRetainCount_ptr = Module.getExportByName(g_proc_name, 'IOObjectGetKernelRetainCount');
    console.log("[i] g_IOObjectGetKernelRetainCount_ptr addr: " + g_IOObjectGetKernelRetainCount_ptr)

    Interceptor.attach(g_IOObjectGetKernelRetainCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectGetKernelRetainCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectGetKernelRetainCount");
        }
    });        
 
    const g_IOObjectGetRetainCount_ptr = Module.getExportByName(g_proc_name, 'IOObjectGetRetainCount');
    console.log("[i] g_IOObjectGetRetainCount_ptr addr: " + g_IOObjectGetRetainCount_ptr)

    Interceptor.attach(g_IOObjectGetRetainCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectGetRetainCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectGetRetainCount");
        }
    });        
 
    const g_IOObjectGetUserRetainCount_ptr = Module.getExportByName(g_proc_name, 'IOObjectGetUserRetainCount');
    console.log("[i] g_IOObjectGetUserRetainCount_ptr addr: " + g_IOObjectGetUserRetainCount_ptr)

    Interceptor.attach(g_IOObjectGetUserRetainCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectGetUserRetainCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectGetUserRetainCount");
        }
    });        
 
    const g_IOObjectIsEqualTo_ptr = Module.getExportByName(g_proc_name, 'IOObjectIsEqualTo');
    console.log("[i] g_IOObjectIsEqualTo_ptr addr: " + g_IOObjectIsEqualTo_ptr)

    Interceptor.attach(g_IOObjectIsEqualTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectIsEqualTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectIsEqualTo");
        }
    });        
 
    const g_IOObjectRelease_ptr = Module.getExportByName(g_proc_name, 'IOObjectRelease');
    console.log("[i] g_IOObjectRelease_ptr addr: " + g_IOObjectRelease_ptr)

    Interceptor.attach(g_IOObjectRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectRelease");
        }
    });        
 
    const g_IOObjectRetain_ptr = Module.getExportByName(g_proc_name, 'IOObjectRetain');
    console.log("[i] g_IOObjectRetain_ptr addr: " + g_IOObjectRetain_ptr)

    Interceptor.attach(g_IOObjectRetain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOObjectRetain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOObjectRetain");
        }
    });        
 
    const g_IOOpenConnection_ptr = Module.getExportByName(g_proc_name, 'IOOpenConnection');
    console.log("[i] g_IOOpenConnection_ptr addr: " + g_IOOpenConnection_ptr)

    Interceptor.attach(g_IOOpenConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOOpenConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOOpenConnection");
        }
    });        
 
    const g_IOOpenFirmwarePathMatching_ptr = Module.getExportByName(g_proc_name, 'IOOpenFirmwarePathMatching');
    console.log("[i] g_IOOpenFirmwarePathMatching_ptr addr: " + g_IOOpenFirmwarePathMatching_ptr)

    Interceptor.attach(g_IOOpenFirmwarePathMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOOpenFirmwarePathMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOOpenFirmwarePathMatching");
        }
    });        
 
    const g_IOPMActivateSystemPowerSettings_ptr = Module.getExportByName(g_proc_name, 'IOPMActivateSystemPowerSettings');
    console.log("[i] g_IOPMActivateSystemPowerSettings_ptr addr: " + g_IOPMActivateSystemPowerSettings_ptr)

    Interceptor.attach(g_IOPMActivateSystemPowerSettings_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMActivateSystemPowerSettings")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMActivateSystemPowerSettings");
        }
    });        
 
    const g_IOPMAllowRemotePowerChange_ptr = Module.getExportByName(g_proc_name, 'IOPMAllowRemotePowerChange');
    console.log("[i] g_IOPMAllowRemotePowerChange_ptr addr: " + g_IOPMAllowRemotePowerChange_ptr)

    Interceptor.attach(g_IOPMAllowRemotePowerChange_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAllowRemotePowerChange")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAllowRemotePowerChange");
        }
    });        
 
    const g_IOPMAllowsBackgroundTask_ptr = Module.getExportByName(g_proc_name, 'IOPMAllowsBackgroundTask');
    console.log("[i] g_IOPMAllowsBackgroundTask_ptr addr: " + g_IOPMAllowsBackgroundTask_ptr)

    Interceptor.attach(g_IOPMAllowsBackgroundTask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAllowsBackgroundTask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAllowsBackgroundTask");
        }
    });        
 
    const g_IOPMAllowsPushServiceTask_ptr = Module.getExportByName(g_proc_name, 'IOPMAllowsPushServiceTask');
    console.log("[i] g_IOPMAllowsPushServiceTask_ptr addr: " + g_IOPMAllowsPushServiceTask_ptr)

    Interceptor.attach(g_IOPMAllowsPushServiceTask_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAllowsPushServiceTask")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAllowsPushServiceTask");
        }
    });        
 
    const g_IOPMAssertionCopyProperties_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCopyProperties');
    console.log("[i] g_IOPMAssertionCopyProperties_ptr addr: " + g_IOPMAssertionCopyProperties_ptr)

    Interceptor.attach(g_IOPMAssertionCopyProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCopyProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCopyProperties");
        }
    });        
 
    const g_IOPMAssertionCreate_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCreate');
    console.log("[i] g_IOPMAssertionCreate_ptr addr: " + g_IOPMAssertionCreate_ptr)

    Interceptor.attach(g_IOPMAssertionCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCreate");
        }
    });        
 
    const g_IOPMAssertionCreateWithAutoTimeout_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCreateWithAutoTimeout');
    console.log("[i] g_IOPMAssertionCreateWithAutoTimeout_ptr addr: " + g_IOPMAssertionCreateWithAutoTimeout_ptr)

    Interceptor.attach(g_IOPMAssertionCreateWithAutoTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCreateWithAutoTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCreateWithAutoTimeout");
        }
    });        
 
    const g_IOPMAssertionCreateWithDescription_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCreateWithDescription');
    console.log("[i] g_IOPMAssertionCreateWithDescription_ptr addr: " + g_IOPMAssertionCreateWithDescription_ptr)

    Interceptor.attach(g_IOPMAssertionCreateWithDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCreateWithDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCreateWithDescription");
        }
    });        
 
    const g_IOPMAssertionCreateWithName_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCreateWithName');
    console.log("[i] g_IOPMAssertionCreateWithName_ptr addr: " + g_IOPMAssertionCreateWithName_ptr)

    Interceptor.attach(g_IOPMAssertionCreateWithName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCreateWithName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCreateWithName");
        }
    });        
 
    const g_IOPMAssertionCreateWithProperties_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCreateWithProperties');
    console.log("[i] g_IOPMAssertionCreateWithProperties_ptr addr: " + g_IOPMAssertionCreateWithProperties_ptr)

    Interceptor.attach(g_IOPMAssertionCreateWithProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCreateWithProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCreateWithProperties");
        }
    });        
 
    const g_IOPMAssertionCreateWithResourceList_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionCreateWithResourceList');
    console.log("[i] g_IOPMAssertionCreateWithResourceList_ptr addr: " + g_IOPMAssertionCreateWithResourceList_ptr)

    Interceptor.attach(g_IOPMAssertionCreateWithResourceList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionCreateWithResourceList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionCreateWithResourceList");
        }
    });        
 
    const g_IOPMAssertionDeclareNotificationEvent_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionDeclareNotificationEvent');
    console.log("[i] g_IOPMAssertionDeclareNotificationEvent_ptr addr: " + g_IOPMAssertionDeclareNotificationEvent_ptr)

    Interceptor.attach(g_IOPMAssertionDeclareNotificationEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionDeclareNotificationEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionDeclareNotificationEvent");
        }
    });        
 
    const g_IOPMAssertionDeclareSystemActivity_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionDeclareSystemActivity');
    console.log("[i] g_IOPMAssertionDeclareSystemActivity_ptr addr: " + g_IOPMAssertionDeclareSystemActivity_ptr)

    Interceptor.attach(g_IOPMAssertionDeclareSystemActivity_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionDeclareSystemActivity")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionDeclareSystemActivity");
        }
    });        
 
    const g_IOPMAssertionDeclareSystemActivityWithProperties_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionDeclareSystemActivityWithProperties');
    console.log("[i] g_IOPMAssertionDeclareSystemActivityWithProperties_ptr addr: " + g_IOPMAssertionDeclareSystemActivityWithProperties_ptr)

    Interceptor.attach(g_IOPMAssertionDeclareSystemActivityWithProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionDeclareSystemActivityWithProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionDeclareSystemActivityWithProperties");
        }
    });        
 
    const g_IOPMAssertionDeclareUserActivity_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionDeclareUserActivity');
    console.log("[i] g_IOPMAssertionDeclareUserActivity_ptr addr: " + g_IOPMAssertionDeclareUserActivity_ptr)

    Interceptor.attach(g_IOPMAssertionDeclareUserActivity_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionDeclareUserActivity")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionDeclareUserActivity");
        }
    });        
 
    const g_IOPMAssertionNotify_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionNotify');
    console.log("[i] g_IOPMAssertionNotify_ptr addr: " + g_IOPMAssertionNotify_ptr)

    Interceptor.attach(g_IOPMAssertionNotify_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionNotify")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionNotify");
        }
    });        
 
    const g_IOPMAssertionRelease_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionRelease');
    console.log("[i] g_IOPMAssertionRelease_ptr addr: " + g_IOPMAssertionRelease_ptr)

    Interceptor.attach(g_IOPMAssertionRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionRelease");
        }
    });        
 
    const g_IOPMAssertionRetain_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionRetain');
    console.log("[i] g_IOPMAssertionRetain_ptr addr: " + g_IOPMAssertionRetain_ptr)

    Interceptor.attach(g_IOPMAssertionRetain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionRetain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionRetain");
        }
    });        
 
    const g_IOPMAssertionSetBTCollection_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionSetBTCollection');
    console.log("[i] g_IOPMAssertionSetBTCollection_ptr addr: " + g_IOPMAssertionSetBTCollection_ptr)

    Interceptor.attach(g_IOPMAssertionSetBTCollection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionSetBTCollection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionSetBTCollection");
        }
    });        
 
    const g_IOPMAssertionSetProcessState_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionSetProcessState');
    console.log("[i] g_IOPMAssertionSetProcessState_ptr addr: " + g_IOPMAssertionSetProcessState_ptr)

    Interceptor.attach(g_IOPMAssertionSetProcessState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionSetProcessState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionSetProcessState");
        }
    });        
 
    const g_IOPMAssertionSetProperty_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionSetProperty');
    console.log("[i] g_IOPMAssertionSetProperty_ptr addr: " + g_IOPMAssertionSetProperty_ptr)

    Interceptor.attach(g_IOPMAssertionSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionSetProperty");
        }
    });        
 
    const g_IOPMAssertionSetTimeout_ptr = Module.getExportByName(g_proc_name, 'IOPMAssertionSetTimeout');
    console.log("[i] g_IOPMAssertionSetTimeout_ptr addr: " + g_IOPMAssertionSetTimeout_ptr)

    Interceptor.attach(g_IOPMAssertionSetTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMAssertionSetTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMAssertionSetTimeout");
        }
    });        
 
    const g_IOPMCancelAllRepeatingPowerEvents_ptr = Module.getExportByName(g_proc_name, 'IOPMCancelAllRepeatingPowerEvents');
    console.log("[i] g_IOPMCancelAllRepeatingPowerEvents_ptr addr: " + g_IOPMCancelAllRepeatingPowerEvents_ptr)

    Interceptor.attach(g_IOPMCancelAllRepeatingPowerEvents_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCancelAllRepeatingPowerEvents")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCancelAllRepeatingPowerEvents");
        }
    });        
 
    const g_IOPMCancelAllScheduledPowerEvents_ptr = Module.getExportByName(g_proc_name, 'IOPMCancelAllScheduledPowerEvents');
    console.log("[i] g_IOPMCancelAllScheduledPowerEvents_ptr addr: " + g_IOPMCancelAllScheduledPowerEvents_ptr)

    Interceptor.attach(g_IOPMCancelAllScheduledPowerEvents_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCancelAllScheduledPowerEvents")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCancelAllScheduledPowerEvents");
        }
    });        
 
    const g_IOPMCancelScheduledPowerEvent_ptr = Module.getExportByName(g_proc_name, 'IOPMCancelScheduledPowerEvent');
    console.log("[i] g_IOPMCancelScheduledPowerEvent_ptr addr: " + g_IOPMCancelScheduledPowerEvent_ptr)

    Interceptor.attach(g_IOPMCancelScheduledPowerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCancelScheduledPowerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCancelScheduledPowerEvent");
        }
    });        
 
    const g_IOPMChangeSystemActivityAssertionBehavior_ptr = Module.getExportByName(g_proc_name, 'IOPMChangeSystemActivityAssertionBehavior');
    console.log("[i] g_IOPMChangeSystemActivityAssertionBehavior_ptr addr: " + g_IOPMChangeSystemActivityAssertionBehavior_ptr)

    Interceptor.attach(g_IOPMChangeSystemActivityAssertionBehavior_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMChangeSystemActivityAssertionBehavior")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMChangeSystemActivityAssertionBehavior");
        }
    });        
 
    const g_IOPMClaimSystemWakeEvent_ptr = Module.getExportByName(g_proc_name, 'IOPMClaimSystemWakeEvent');
    console.log("[i] g_IOPMClaimSystemWakeEvent_ptr addr: " + g_IOPMClaimSystemWakeEvent_ptr)

    Interceptor.attach(g_IOPMClaimSystemWakeEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMClaimSystemWakeEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMClaimSystemWakeEvent");
        }
    });        
 
    const g_IOPMConnectionAcknowledgeEvent_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionAcknowledgeEvent');
    console.log("[i] g_IOPMConnectionAcknowledgeEvent_ptr addr: " + g_IOPMConnectionAcknowledgeEvent_ptr)

    Interceptor.attach(g_IOPMConnectionAcknowledgeEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionAcknowledgeEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionAcknowledgeEvent");
        }
    });        
 
    const g_IOPMConnectionAcknowledgeEventWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionAcknowledgeEventWithOptions');
    console.log("[i] g_IOPMConnectionAcknowledgeEventWithOptions_ptr addr: " + g_IOPMConnectionAcknowledgeEventWithOptions_ptr)

    Interceptor.attach(g_IOPMConnectionAcknowledgeEventWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionAcknowledgeEventWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionAcknowledgeEventWithOptions");
        }
    });        
 
    const g_IOPMConnectionCreate_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionCreate');
    console.log("[i] g_IOPMConnectionCreate_ptr addr: " + g_IOPMConnectionCreate_ptr)

    Interceptor.attach(g_IOPMConnectionCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionCreate");
        }
    });        
 
    const g_IOPMConnectionGetSystemCapabilities_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionGetSystemCapabilities');
    console.log("[i] g_IOPMConnectionGetSystemCapabilities_ptr addr: " + g_IOPMConnectionGetSystemCapabilities_ptr)

    Interceptor.attach(g_IOPMConnectionGetSystemCapabilities_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionGetSystemCapabilities")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionGetSystemCapabilities");
        }
    });        
 
    const g_IOPMConnectionRelease_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionRelease');
    console.log("[i] g_IOPMConnectionRelease_ptr addr: " + g_IOPMConnectionRelease_ptr)

    Interceptor.attach(g_IOPMConnectionRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionRelease");
        }
    });        
 
    const g_IOPMConnectionScheduleWithRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionScheduleWithRunLoop');
    console.log("[i] g_IOPMConnectionScheduleWithRunLoop_ptr addr: " + g_IOPMConnectionScheduleWithRunLoop_ptr)

    Interceptor.attach(g_IOPMConnectionScheduleWithRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionScheduleWithRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionScheduleWithRunLoop");
        }
    });        
 
    const g_IOPMConnectionSetDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionSetDispatchQueue');
    console.log("[i] g_IOPMConnectionSetDispatchQueue_ptr addr: " + g_IOPMConnectionSetDispatchQueue_ptr)

    Interceptor.attach(g_IOPMConnectionSetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionSetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionSetDispatchQueue");
        }
    });        
 
    const g_IOPMConnectionSetNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionSetNotification');
    console.log("[i] g_IOPMConnectionSetNotification_ptr addr: " + g_IOPMConnectionSetNotification_ptr)

    Interceptor.attach(g_IOPMConnectionSetNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionSetNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionSetNotification");
        }
    });        
 
    const g_IOPMConnectionUnscheduleFromRunLoop_ptr = Module.getExportByName(g_proc_name, 'IOPMConnectionUnscheduleFromRunLoop');
    console.log("[i] g_IOPMConnectionUnscheduleFromRunLoop_ptr addr: " + g_IOPMConnectionUnscheduleFromRunLoop_ptr)

    Interceptor.attach(g_IOPMConnectionUnscheduleFromRunLoop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMConnectionUnscheduleFromRunLoop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMConnectionUnscheduleFromRunLoop");
        }
    });        
 
    const g_IOPMCopyActiveAsyncAssertionsByProcess_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyActiveAsyncAssertionsByProcess');
    console.log("[i] g_IOPMCopyActiveAsyncAssertionsByProcess_ptr addr: " + g_IOPMCopyActiveAsyncAssertionsByProcess_ptr)

    Interceptor.attach(g_IOPMCopyActiveAsyncAssertionsByProcess_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyActiveAsyncAssertionsByProcess")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyActiveAsyncAssertionsByProcess");
        }
    });        
 
    const g_IOPMCopyActivePMPreferences_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyActivePMPreferences');
    console.log("[i] g_IOPMCopyActivePMPreferences_ptr addr: " + g_IOPMCopyActivePMPreferences_ptr)

    Interceptor.attach(g_IOPMCopyActivePMPreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyActivePMPreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyActivePMPreferences");
        }
    });        
 
    const g_IOPMCopyAssertionActivityAggregate_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityAggregate');
    console.log("[i] g_IOPMCopyAssertionActivityAggregate_ptr addr: " + g_IOPMCopyAssertionActivityAggregate_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityAggregate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityAggregate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityAggregate");
        }
    });        
 
    const g_IOPMCopyAssertionActivityAggregateWithAllocator_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityAggregateWithAllocator');
    console.log("[i] g_IOPMCopyAssertionActivityAggregateWithAllocator_ptr addr: " + g_IOPMCopyAssertionActivityAggregateWithAllocator_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityAggregateWithAllocator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityAggregateWithAllocator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityAggregateWithAllocator");
        }
    });        
 
    const g_IOPMCopyAssertionActivityLog_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityLog');
    console.log("[i] g_IOPMCopyAssertionActivityLog_ptr addr: " + g_IOPMCopyAssertionActivityLog_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityLog");
        }
    });        
 
    const g_IOPMCopyAssertionActivityLogWithAllocator_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityLogWithAllocator');
    console.log("[i] g_IOPMCopyAssertionActivityLogWithAllocator_ptr addr: " + g_IOPMCopyAssertionActivityLogWithAllocator_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityLogWithAllocator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityLogWithAllocator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityLogWithAllocator");
        }
    });        
 
    const g_IOPMCopyAssertionActivityUpdate_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityUpdate');
    console.log("[i] g_IOPMCopyAssertionActivityUpdate_ptr addr: " + g_IOPMCopyAssertionActivityUpdate_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityUpdate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityUpdate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityUpdate");
        }
    });        
 
    const g_IOPMCopyAssertionActivityUpdateWithAllocator_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityUpdateWithAllocator');
    console.log("[i] g_IOPMCopyAssertionActivityUpdateWithAllocator_ptr addr: " + g_IOPMCopyAssertionActivityUpdateWithAllocator_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityUpdateWithAllocator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityUpdateWithAllocator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityUpdateWithAllocator");
        }
    });        
 
    const g_IOPMCopyAssertionActivityUpdateWithCallback_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionActivityUpdateWithCallback');
    console.log("[i] g_IOPMCopyAssertionActivityUpdateWithCallback_ptr addr: " + g_IOPMCopyAssertionActivityUpdateWithCallback_ptr)

    Interceptor.attach(g_IOPMCopyAssertionActivityUpdateWithCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionActivityUpdateWithCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionActivityUpdateWithCallback");
        }
    });        
 
    const g_IOPMCopyAssertionsByProcess_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionsByProcess');
    console.log("[i] g_IOPMCopyAssertionsByProcess_ptr addr: " + g_IOPMCopyAssertionsByProcess_ptr)

    Interceptor.attach(g_IOPMCopyAssertionsByProcess_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionsByProcess")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionsByProcess");
        }
    });        
 
    const g_IOPMCopyAssertionsByProcessWithAllocator_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionsByProcessWithAllocator');
    console.log("[i] g_IOPMCopyAssertionsByProcessWithAllocator_ptr addr: " + g_IOPMCopyAssertionsByProcessWithAllocator_ptr)

    Interceptor.attach(g_IOPMCopyAssertionsByProcessWithAllocator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionsByProcessWithAllocator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionsByProcessWithAllocator");
        }
    });        
 
    const g_IOPMCopyAssertionsByType_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionsByType');
    console.log("[i] g_IOPMCopyAssertionsByType_ptr addr: " + g_IOPMCopyAssertionsByType_ptr)

    Interceptor.attach(g_IOPMCopyAssertionsByType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionsByType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionsByType");
        }
    });        
 
    const g_IOPMCopyAssertionsStatus_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyAssertionsStatus');
    console.log("[i] g_IOPMCopyAssertionsStatus_ptr addr: " + g_IOPMCopyAssertionsStatus_ptr)

    Interceptor.attach(g_IOPMCopyAssertionsStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyAssertionsStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyAssertionsStatus");
        }
    });        
 
    const g_IOPMCopyBatteryHeatMap_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyBatteryHeatMap');
    console.log("[i] g_IOPMCopyBatteryHeatMap_ptr addr: " + g_IOPMCopyBatteryHeatMap_ptr)

    Interceptor.attach(g_IOPMCopyBatteryHeatMap_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyBatteryHeatMap")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyBatteryHeatMap");
        }
    });        
 
    const g_IOPMCopyBatteryInfo_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyBatteryInfo');
    console.log("[i] g_IOPMCopyBatteryInfo_ptr addr: " + g_IOPMCopyBatteryInfo_ptr)

    Interceptor.attach(g_IOPMCopyBatteryInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyBatteryInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyBatteryInfo");
        }
    });        
 
    const g_IOPMCopyCPUPowerStatus_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyCPUPowerStatus');
    console.log("[i] g_IOPMCopyCPUPowerStatus_ptr addr: " + g_IOPMCopyCPUPowerStatus_ptr)

    Interceptor.attach(g_IOPMCopyCPUPowerStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyCPUPowerStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyCPUPowerStatus");
        }
    });        
 
    const g_IOPMCopyConnectionStatus_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyConnectionStatus');
    console.log("[i] g_IOPMCopyConnectionStatus_ptr addr: " + g_IOPMCopyConnectionStatus_ptr)

    Interceptor.attach(g_IOPMCopyConnectionStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyConnectionStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyConnectionStatus");
        }
    });        
 
    const g_IOPMCopyCurrentScheduledWake_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyCurrentScheduledWake');
    console.log("[i] g_IOPMCopyCurrentScheduledWake_ptr addr: " + g_IOPMCopyCurrentScheduledWake_ptr)

    Interceptor.attach(g_IOPMCopyCurrentScheduledWake_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyCurrentScheduledWake")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyCurrentScheduledWake");
        }
    });        
 
    const g_IOPMCopyCycleCountData_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyCycleCountData');
    console.log("[i] g_IOPMCopyCycleCountData_ptr addr: " + g_IOPMCopyCycleCountData_ptr)

    Interceptor.attach(g_IOPMCopyCycleCountData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyCycleCountData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyCycleCountData");
        }
    });        
 
    const g_IOPMCopyDefaultPreferences_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyDefaultPreferences');
    console.log("[i] g_IOPMCopyDefaultPreferences_ptr addr: " + g_IOPMCopyDefaultPreferences_ptr)

    Interceptor.attach(g_IOPMCopyDefaultPreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyDefaultPreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyDefaultPreferences");
        }
    });        
 
    const g_IOPMCopyDeviceRestartPreventers_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyDeviceRestartPreventers');
    console.log("[i] g_IOPMCopyDeviceRestartPreventers_ptr addr: " + g_IOPMCopyDeviceRestartPreventers_ptr)

    Interceptor.attach(g_IOPMCopyDeviceRestartPreventers_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyDeviceRestartPreventers")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyDeviceRestartPreventers");
        }
    });        
 
    const g_IOPMCopyFromPrefs_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyFromPrefs');
    console.log("[i] g_IOPMCopyFromPrefs_ptr addr: " + g_IOPMCopyFromPrefs_ptr)

    Interceptor.attach(g_IOPMCopyFromPrefs_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyFromPrefs")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyFromPrefs");
        }
    });        
 
    const g_IOPMCopyHIDPostEventHistory_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyHIDPostEventHistory');
    console.log("[i] g_IOPMCopyHIDPostEventHistory_ptr addr: " + g_IOPMCopyHIDPostEventHistory_ptr)

    Interceptor.attach(g_IOPMCopyHIDPostEventHistory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyHIDPostEventHistory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyHIDPostEventHistory");
        }
    });        
 
    const g_IOPMCopyInactiveAssertionsByProcess_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyInactiveAssertionsByProcess');
    console.log("[i] g_IOPMCopyInactiveAssertionsByProcess_ptr addr: " + g_IOPMCopyInactiveAssertionsByProcess_ptr)

    Interceptor.attach(g_IOPMCopyInactiveAssertionsByProcess_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyInactiveAssertionsByProcess")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyInactiveAssertionsByProcess");
        }
    });        
 
    const g_IOPMCopyKioskModeData_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyKioskModeData');
    console.log("[i] g_IOPMCopyKioskModeData_ptr addr: " + g_IOPMCopyKioskModeData_ptr)

    Interceptor.attach(g_IOPMCopyKioskModeData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyKioskModeData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyKioskModeData");
        }
    });        
 
    const g_IOPMCopyPMPreferences_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyPMPreferences');
    console.log("[i] g_IOPMCopyPMPreferences_ptr addr: " + g_IOPMCopyPMPreferences_ptr)

    Interceptor.attach(g_IOPMCopyPMPreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyPMPreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyPMPreferences");
        }
    });        
 
    const g_IOPMCopyPMSetting_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyPMSetting');
    console.log("[i] g_IOPMCopyPMSetting_ptr addr: " + g_IOPMCopyPMSetting_ptr)

    Interceptor.attach(g_IOPMCopyPMSetting_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyPMSetting")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyPMSetting");
        }
    });        
 
    const g_IOPMCopyPowerHistory_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyPowerHistory');
    console.log("[i] g_IOPMCopyPowerHistory_ptr addr: " + g_IOPMCopyPowerHistory_ptr)

    Interceptor.attach(g_IOPMCopyPowerHistory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyPowerHistory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyPowerHistory");
        }
    });        
 
    const g_IOPMCopyPowerHistoryDetailed_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyPowerHistoryDetailed');
    console.log("[i] g_IOPMCopyPowerHistoryDetailed_ptr addr: " + g_IOPMCopyPowerHistoryDetailed_ptr)

    Interceptor.attach(g_IOPMCopyPowerHistoryDetailed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyPowerHistoryDetailed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyPowerHistoryDetailed");
        }
    });        
 
    const g_IOPMCopyPowerStateInfo_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyPowerStateInfo');
    console.log("[i] g_IOPMCopyPowerStateInfo_ptr addr: " + g_IOPMCopyPowerStateInfo_ptr)

    Interceptor.attach(g_IOPMCopyPowerStateInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyPowerStateInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyPowerStateInfo");
        }
    });        
 
    const g_IOPMCopyPreferencesOnFile_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyPreferencesOnFile');
    console.log("[i] g_IOPMCopyPreferencesOnFile_ptr addr: " + g_IOPMCopyPreferencesOnFile_ptr)

    Interceptor.attach(g_IOPMCopyPreferencesOnFile_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyPreferencesOnFile")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyPreferencesOnFile");
        }
    });        
 
    const g_IOPMCopyRepeatingPowerEvents_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyRepeatingPowerEvents');
    console.log("[i] g_IOPMCopyRepeatingPowerEvents_ptr addr: " + g_IOPMCopyRepeatingPowerEvents_ptr)

    Interceptor.attach(g_IOPMCopyRepeatingPowerEvents_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyRepeatingPowerEvents")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyRepeatingPowerEvents");
        }
    });        
 
    const g_IOPMCopyScheduledPowerEvents_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyScheduledPowerEvents');
    console.log("[i] g_IOPMCopyScheduledPowerEvents_ptr addr: " + g_IOPMCopyScheduledPowerEvents_ptr)

    Interceptor.attach(g_IOPMCopyScheduledPowerEvents_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyScheduledPowerEvents")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyScheduledPowerEvents");
        }
    });        
 
    const g_IOPMCopySleepPreventersList_ptr = Module.getExportByName(g_proc_name, 'IOPMCopySleepPreventersList');
    console.log("[i] g_IOPMCopySleepPreventersList_ptr addr: " + g_IOPMCopySleepPreventersList_ptr)

    Interceptor.attach(g_IOPMCopySleepPreventersList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopySleepPreventersList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopySleepPreventersList");
        }
    });        
 
    const g_IOPMCopySleepPreventersListWithID_ptr = Module.getExportByName(g_proc_name, 'IOPMCopySleepPreventersListWithID');
    console.log("[i] g_IOPMCopySleepPreventersListWithID_ptr addr: " + g_IOPMCopySleepPreventersListWithID_ptr)

    Interceptor.attach(g_IOPMCopySleepPreventersListWithID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopySleepPreventersListWithID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopySleepPreventersListWithID");
        }
    });        
 
    const g_IOPMCopySleepWakeFailure_ptr = Module.getExportByName(g_proc_name, 'IOPMCopySleepWakeFailure');
    console.log("[i] g_IOPMCopySleepWakeFailure_ptr addr: " + g_IOPMCopySleepWakeFailure_ptr)

    Interceptor.attach(g_IOPMCopySleepWakeFailure_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopySleepWakeFailure")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopySleepWakeFailure");
        }
    });        
 
    const g_IOPMCopySystemPowerSettings_ptr = Module.getExportByName(g_proc_name, 'IOPMCopySystemPowerSettings');
    console.log("[i] g_IOPMCopySystemPowerSettings_ptr addr: " + g_IOPMCopySystemPowerSettings_ptr)

    Interceptor.attach(g_IOPMCopySystemPowerSettings_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopySystemPowerSettings")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopySystemPowerSettings");
        }
    });        
 
    const g_IOPMCopyUPSShutdownLevels_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyUPSShutdownLevels');
    console.log("[i] g_IOPMCopyUPSShutdownLevels_ptr addr: " + g_IOPMCopyUPSShutdownLevels_ptr)

    Interceptor.attach(g_IOPMCopyUPSShutdownLevels_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyUPSShutdownLevels")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyUPSShutdownLevels");
        }
    });        
 
    const g_IOPMCopyUserActivityLevelDescription_ptr = Module.getExportByName(g_proc_name, 'IOPMCopyUserActivityLevelDescription');
    console.log("[i] g_IOPMCopyUserActivityLevelDescription_ptr addr: " + g_IOPMCopyUserActivityLevelDescription_ptr)

    Interceptor.attach(g_IOPMCopyUserActivityLevelDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCopyUserActivityLevelDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCopyUserActivityLevelDescription");
        }
    });        
 
    const g_IOPMCtlAssertionType_ptr = Module.getExportByName(g_proc_name, 'IOPMCtlAssertionType');
    console.log("[i] g_IOPMCtlAssertionType_ptr addr: " + g_IOPMCtlAssertionType_ptr)

    Interceptor.attach(g_IOPMCtlAssertionType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMCtlAssertionType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMCtlAssertionType");
        }
    });        
 
    const g_IOPMDeclareNetworkClientActivity_ptr = Module.getExportByName(g_proc_name, 'IOPMDeclareNetworkClientActivity');
    console.log("[i] g_IOPMDeclareNetworkClientActivity_ptr addr: " + g_IOPMDeclareNetworkClientActivity_ptr)

    Interceptor.attach(g_IOPMDeclareNetworkClientActivity_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMDeclareNetworkClientActivity")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMDeclareNetworkClientActivity");
        }
    });        
 
    const g_IOPMDisableAsyncAssertions_ptr = Module.getExportByName(g_proc_name, 'IOPMDisableAsyncAssertions');
    console.log("[i] g_IOPMDisableAsyncAssertions_ptr addr: " + g_IOPMDisableAsyncAssertions_ptr)

    Interceptor.attach(g_IOPMDisableAsyncAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMDisableAsyncAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMDisableAsyncAssertions");
        }
    });        
 
    const g_IOPMEnableAsyncAssertions_ptr = Module.getExportByName(g_proc_name, 'IOPMEnableAsyncAssertions');
    console.log("[i] g_IOPMEnableAsyncAssertions_ptr addr: " + g_IOPMEnableAsyncAssertions_ptr)

    Interceptor.attach(g_IOPMEnableAsyncAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMEnableAsyncAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMEnableAsyncAssertions");
        }
    });        
 
    const g_IOPMFeatureIsAvailable_ptr = Module.getExportByName(g_proc_name, 'IOPMFeatureIsAvailable');
    console.log("[i] g_IOPMFeatureIsAvailable_ptr addr: " + g_IOPMFeatureIsAvailable_ptr)

    Interceptor.attach(g_IOPMFeatureIsAvailable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMFeatureIsAvailable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMFeatureIsAvailable");
        }
    });        
 
    const g_IOPMFeatureIsAvailableWithSupportedTable_ptr = Module.getExportByName(g_proc_name, 'IOPMFeatureIsAvailableWithSupportedTable');
    console.log("[i] g_IOPMFeatureIsAvailableWithSupportedTable_ptr addr: " + g_IOPMFeatureIsAvailableWithSupportedTable_ptr)

    Interceptor.attach(g_IOPMFeatureIsAvailableWithSupportedTable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMFeatureIsAvailableWithSupportedTable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMFeatureIsAvailableWithSupportedTable");
        }
    });        
 
    const g_IOPMFindPowerManagement_ptr = Module.getExportByName(g_proc_name, 'IOPMFindPowerManagement');
    console.log("[i] g_IOPMFindPowerManagement_ptr addr: " + g_IOPMFindPowerManagement_ptr)

    Interceptor.attach(g_IOPMFindPowerManagement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMFindPowerManagement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMFindPowerManagement");
        }
    });        
 
    const g_IOPMGetActivePushConnectionState_ptr = Module.getExportByName(g_proc_name, 'IOPMGetActivePushConnectionState');
    console.log("[i] g_IOPMGetActivePushConnectionState_ptr addr: " + g_IOPMGetActivePushConnectionState_ptr)

    Interceptor.attach(g_IOPMGetActivePushConnectionState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetActivePushConnectionState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetActivePushConnectionState");
        }
    });        
 
    const g_IOPMGetAggressiveness_ptr = Module.getExportByName(g_proc_name, 'IOPMGetAggressiveness');
    console.log("[i] g_IOPMGetAggressiveness_ptr addr: " + g_IOPMGetAggressiveness_ptr)

    Interceptor.attach(g_IOPMGetAggressiveness_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetAggressiveness")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetAggressiveness");
        }
    });        
 
    const g_IOPMGetCapabilitiesDescription_ptr = Module.getExportByName(g_proc_name, 'IOPMGetCapabilitiesDescription');
    console.log("[i] g_IOPMGetCapabilitiesDescription_ptr addr: " + g_IOPMGetCapabilitiesDescription_ptr)

    Interceptor.attach(g_IOPMGetCapabilitiesDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetCapabilitiesDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetCapabilitiesDescription");
        }
    });        
 
    const g_IOPMGetCurrentAsycnRemoteAssertion_ptr = Module.getExportByName(g_proc_name, 'IOPMGetCurrentAsycnRemoteAssertion');
    console.log("[i] g_IOPMGetCurrentAsycnRemoteAssertion_ptr addr: " + g_IOPMGetCurrentAsycnRemoteAssertion_ptr)

    Interceptor.attach(g_IOPMGetCurrentAsycnRemoteAssertion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetCurrentAsycnRemoteAssertion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetCurrentAsycnRemoteAssertion");
        }
    });        
 
    const g_IOPMGetCurrentAsyncActiveAssertions_ptr = Module.getExportByName(g_proc_name, 'IOPMGetCurrentAsyncActiveAssertions');
    console.log("[i] g_IOPMGetCurrentAsyncActiveAssertions_ptr addr: " + g_IOPMGetCurrentAsyncActiveAssertions_ptr)

    Interceptor.attach(g_IOPMGetCurrentAsyncActiveAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetCurrentAsyncActiveAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetCurrentAsyncActiveAssertions");
        }
    });        
 
    const g_IOPMGetCurrentAsyncInactiveAssertions_ptr = Module.getExportByName(g_proc_name, 'IOPMGetCurrentAsyncInactiveAssertions');
    console.log("[i] g_IOPMGetCurrentAsyncInactiveAssertions_ptr addr: " + g_IOPMGetCurrentAsyncInactiveAssertions_ptr)

    Interceptor.attach(g_IOPMGetCurrentAsyncInactiveAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetCurrentAsyncInactiveAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetCurrentAsyncInactiveAssertions");
        }
    });        
 
    const g_IOPMGetCurrentAsyncReleasedAssertions_ptr = Module.getExportByName(g_proc_name, 'IOPMGetCurrentAsyncReleasedAssertions');
    console.log("[i] g_IOPMGetCurrentAsyncReleasedAssertions_ptr addr: " + g_IOPMGetCurrentAsyncReleasedAssertions_ptr)

    Interceptor.attach(g_IOPMGetCurrentAsyncReleasedAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetCurrentAsyncReleasedAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetCurrentAsyncReleasedAssertions");
        }
    });        
 
    const g_IOPMGetCurrentAsyncTimedAssertions_ptr = Module.getExportByName(g_proc_name, 'IOPMGetCurrentAsyncTimedAssertions');
    console.log("[i] g_IOPMGetCurrentAsyncTimedAssertions_ptr addr: " + g_IOPMGetCurrentAsyncTimedAssertions_ptr)

    Interceptor.attach(g_IOPMGetCurrentAsyncTimedAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetCurrentAsyncTimedAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetCurrentAsyncTimedAssertions");
        }
    });        
 
    const g_IOPMGetDarkWakeThermalEmergencyCount_ptr = Module.getExportByName(g_proc_name, 'IOPMGetDarkWakeThermalEmergencyCount');
    console.log("[i] g_IOPMGetDarkWakeThermalEmergencyCount_ptr addr: " + g_IOPMGetDarkWakeThermalEmergencyCount_ptr)

    Interceptor.attach(g_IOPMGetDarkWakeThermalEmergencyCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetDarkWakeThermalEmergencyCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetDarkWakeThermalEmergencyCount");
        }
    });        
 
    const g_IOPMGetLastWakeTime_ptr = Module.getExportByName(g_proc_name, 'IOPMGetLastWakeTime');
    console.log("[i] g_IOPMGetLastWakeTime_ptr addr: " + g_IOPMGetLastWakeTime_ptr)

    Interceptor.attach(g_IOPMGetLastWakeTime_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetLastWakeTime")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetLastWakeTime");
        }
    });        
 
    const g_IOPMGetPerformanceWarningLevel_ptr = Module.getExportByName(g_proc_name, 'IOPMGetPerformanceWarningLevel');
    console.log("[i] g_IOPMGetPerformanceWarningLevel_ptr addr: " + g_IOPMGetPerformanceWarningLevel_ptr)

    Interceptor.attach(g_IOPMGetPerformanceWarningLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetPerformanceWarningLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetPerformanceWarningLevel");
        }
    });        
 
    const g_IOPMGetSleepServicesActive_ptr = Module.getExportByName(g_proc_name, 'IOPMGetSleepServicesActive');
    console.log("[i] g_IOPMGetSleepServicesActive_ptr addr: " + g_IOPMGetSleepServicesActive_ptr)

    Interceptor.attach(g_IOPMGetSleepServicesActive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetSleepServicesActive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetSleepServicesActive");
        }
    });        
 
    const g_IOPMGetThermalWarningLevel_ptr = Module.getExportByName(g_proc_name, 'IOPMGetThermalWarningLevel');
    console.log("[i] g_IOPMGetThermalWarningLevel_ptr addr: " + g_IOPMGetThermalWarningLevel_ptr)

    Interceptor.attach(g_IOPMGetThermalWarningLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetThermalWarningLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetThermalWarningLevel");
        }
    });        
 
    const g_IOPMGetUUID_ptr = Module.getExportByName(g_proc_name, 'IOPMGetUUID');
    console.log("[i] g_IOPMGetUUID_ptr addr: " + g_IOPMGetUUID_ptr)

    Interceptor.attach(g_IOPMGetUUID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetUUID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetUUID");
        }
    });        
 
    const g_IOPMGetUserActivityLevel_ptr = Module.getExportByName(g_proc_name, 'IOPMGetUserActivityLevel');
    console.log("[i] g_IOPMGetUserActivityLevel_ptr addr: " + g_IOPMGetUserActivityLevel_ptr)

    Interceptor.attach(g_IOPMGetUserActivityLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetUserActivityLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetUserActivityLevel");
        }
    });        
 
    const g_IOPMGetValueInt_ptr = Module.getExportByName(g_proc_name, 'IOPMGetValueInt');
    console.log("[i] g_IOPMGetValueInt_ptr addr: " + g_IOPMGetValueInt_ptr)

    Interceptor.attach(g_IOPMGetValueInt_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMGetValueInt")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMGetValueInt");
        }
    });        
 
    const g_IOPMIsADarkWake_ptr = Module.getExportByName(g_proc_name, 'IOPMIsADarkWake');
    console.log("[i] g_IOPMIsADarkWake_ptr addr: " + g_IOPMIsADarkWake_ptr)

    Interceptor.attach(g_IOPMIsADarkWake_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMIsADarkWake")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMIsADarkWake");
        }
    });        
 
    const g_IOPMIsASilentWake_ptr = Module.getExportByName(g_proc_name, 'IOPMIsASilentWake');
    console.log("[i] g_IOPMIsASilentWake_ptr addr: " + g_IOPMIsASilentWake_ptr)

    Interceptor.attach(g_IOPMIsASilentWake_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMIsASilentWake")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMIsASilentWake");
        }
    });        
 
    const g_IOPMIsASleep_ptr = Module.getExportByName(g_proc_name, 'IOPMIsASleep');
    console.log("[i] g_IOPMIsASleep_ptr addr: " + g_IOPMIsASleep_ptr)

    Interceptor.attach(g_IOPMIsASleep_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMIsASleep")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMIsASleep");
        }
    });        
 
    const g_IOPMIsAUserWake_ptr = Module.getExportByName(g_proc_name, 'IOPMIsAUserWake');
    console.log("[i] g_IOPMIsAUserWake_ptr addr: " + g_IOPMIsAUserWake_ptr)

    Interceptor.attach(g_IOPMIsAUserWake_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMIsAUserWake")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMIsAUserWake");
        }
    });        
 
    const g_IOPMLogWakeProgress_ptr = Module.getExportByName(g_proc_name, 'IOPMLogWakeProgress');
    console.log("[i] g_IOPMLogWakeProgress_ptr addr: " + g_IOPMLogWakeProgress_ptr)

    Interceptor.attach(g_IOPMLogWakeProgress_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMLogWakeProgress")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMLogWakeProgress");
        }
    });        
 
    const g_IOPMPerformBlockWithAssertion_ptr = Module.getExportByName(g_proc_name, 'IOPMPerformBlockWithAssertion');
    console.log("[i] g_IOPMPerformBlockWithAssertion_ptr addr: " + g_IOPMPerformBlockWithAssertion_ptr)

    Interceptor.attach(g_IOPMPerformBlockWithAssertion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMPerformBlockWithAssertion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMPerformBlockWithAssertion");
        }
    });        
 
    const g_IOPMRegisterForRemoteSystemPower_ptr = Module.getExportByName(g_proc_name, 'IOPMRegisterForRemoteSystemPower');
    console.log("[i] g_IOPMRegisterForRemoteSystemPower_ptr addr: " + g_IOPMRegisterForRemoteSystemPower_ptr)

    Interceptor.attach(g_IOPMRegisterForRemoteSystemPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMRegisterForRemoteSystemPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMRegisterForRemoteSystemPower");
        }
    });        
 
    const g_IOPMRegisterPrefsChangeNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMRegisterPrefsChangeNotification');
    console.log("[i] g_IOPMRegisterPrefsChangeNotification_ptr addr: " + g_IOPMRegisterPrefsChangeNotification_ptr)

    Interceptor.attach(g_IOPMRegisterPrefsChangeNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMRegisterPrefsChangeNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMRegisterPrefsChangeNotification");
        }
    });        
 
    const g_IOPMRemoveIrrelevantProperties_ptr = Module.getExportByName(g_proc_name, 'IOPMRemoveIrrelevantProperties');
    console.log("[i] g_IOPMRemoveIrrelevantProperties_ptr addr: " + g_IOPMRemoveIrrelevantProperties_ptr)

    Interceptor.attach(g_IOPMRemoveIrrelevantProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMRemoveIrrelevantProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMRemoveIrrelevantProperties");
        }
    });        
 
    const g_IOPMRequestSysWake_ptr = Module.getExportByName(g_proc_name, 'IOPMRequestSysWake');
    console.log("[i] g_IOPMRequestSysWake_ptr addr: " + g_IOPMRequestSysWake_ptr)

    Interceptor.attach(g_IOPMRequestSysWake_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMRequestSysWake")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMRequestSysWake");
        }
    });        
 
    const g_IOPMRevertPMPreferences_ptr = Module.getExportByName(g_proc_name, 'IOPMRevertPMPreferences');
    console.log("[i] g_IOPMRevertPMPreferences_ptr addr: " + g_IOPMRevertPMPreferences_ptr)

    Interceptor.attach(g_IOPMRevertPMPreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMRevertPMPreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMRevertPMPreferences");
        }
    });        
 
    const g_IOPMScheduleAssertionExceptionNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMScheduleAssertionExceptionNotification');
    console.log("[i] g_IOPMScheduleAssertionExceptionNotification_ptr addr: " + g_IOPMScheduleAssertionExceptionNotification_ptr)

    Interceptor.attach(g_IOPMScheduleAssertionExceptionNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMScheduleAssertionExceptionNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMScheduleAssertionExceptionNotification");
        }
    });        
 
    const g_IOPMSchedulePowerEvent_ptr = Module.getExportByName(g_proc_name, 'IOPMSchedulePowerEvent');
    console.log("[i] g_IOPMSchedulePowerEvent_ptr addr: " + g_IOPMSchedulePowerEvent_ptr)

    Interceptor.attach(g_IOPMSchedulePowerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSchedulePowerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSchedulePowerEvent");
        }
    });        
 
    const g_IOPMScheduleRepeatingPowerEvent_ptr = Module.getExportByName(g_proc_name, 'IOPMScheduleRepeatingPowerEvent');
    console.log("[i] g_IOPMScheduleRepeatingPowerEvent_ptr addr: " + g_IOPMScheduleRepeatingPowerEvent_ptr)

    Interceptor.attach(g_IOPMScheduleRepeatingPowerEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMScheduleRepeatingPowerEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMScheduleRepeatingPowerEvent");
        }
    });        
 
    const g_IOPMScheduleUserActiveChangedNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMScheduleUserActiveChangedNotification');
    console.log("[i] g_IOPMScheduleUserActiveChangedNotification_ptr addr: " + g_IOPMScheduleUserActiveChangedNotification_ptr)

    Interceptor.attach(g_IOPMScheduleUserActiveChangedNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMScheduleUserActiveChangedNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMScheduleUserActiveChangedNotification");
        }
    });        
 
    const g_IOPMScheduleUserActivityLevelNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMScheduleUserActivityLevelNotification');
    console.log("[i] g_IOPMScheduleUserActivityLevelNotification_ptr addr: " + g_IOPMScheduleUserActivityLevelNotification_ptr)

    Interceptor.attach(g_IOPMScheduleUserActivityLevelNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMScheduleUserActivityLevelNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMScheduleUserActivityLevelNotification");
        }
    });        
 
    const g_IOPMScheduleUserActivityLevelNotificationWithTimeout_ptr = Module.getExportByName(g_proc_name, 'IOPMScheduleUserActivityLevelNotificationWithTimeout');
    console.log("[i] g_IOPMScheduleUserActivityLevelNotificationWithTimeout_ptr addr: " + g_IOPMScheduleUserActivityLevelNotificationWithTimeout_ptr)

    Interceptor.attach(g_IOPMScheduleUserActivityLevelNotificationWithTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMScheduleUserActivityLevelNotificationWithTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMScheduleUserActivityLevelNotificationWithTimeout");
        }
    });        
 
    const g_IOPMSetActivePushConnectionState_ptr = Module.getExportByName(g_proc_name, 'IOPMSetActivePushConnectionState');
    console.log("[i] g_IOPMSetActivePushConnectionState_ptr addr: " + g_IOPMSetActivePushConnectionState_ptr)

    Interceptor.attach(g_IOPMSetActivePushConnectionState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetActivePushConnectionState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetActivePushConnectionState");
        }
    });        
 
    const g_IOPMSetAggressiveness_ptr = Module.getExportByName(g_proc_name, 'IOPMSetAggressiveness');
    console.log("[i] g_IOPMSetAggressiveness_ptr addr: " + g_IOPMSetAggressiveness_ptr)

    Interceptor.attach(g_IOPMSetAggressiveness_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetAggressiveness")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetAggressiveness");
        }
    });        
 
    const g_IOPMSetAssertionActivityAggregate_ptr = Module.getExportByName(g_proc_name, 'IOPMSetAssertionActivityAggregate');
    console.log("[i] g_IOPMSetAssertionActivityAggregate_ptr addr: " + g_IOPMSetAssertionActivityAggregate_ptr)

    Interceptor.attach(g_IOPMSetAssertionActivityAggregate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetAssertionActivityAggregate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetAssertionActivityAggregate");
        }
    });        
 
    const g_IOPMSetAssertionActivityLog_ptr = Module.getExportByName(g_proc_name, 'IOPMSetAssertionActivityLog');
    console.log("[i] g_IOPMSetAssertionActivityLog_ptr addr: " + g_IOPMSetAssertionActivityLog_ptr)

    Interceptor.attach(g_IOPMSetAssertionActivityLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetAssertionActivityLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetAssertionActivityLog");
        }
    });        
 
    const g_IOPMSetAssertionExceptionLimits_ptr = Module.getExportByName(g_proc_name, 'IOPMSetAssertionExceptionLimits');
    console.log("[i] g_IOPMSetAssertionExceptionLimits_ptr addr: " + g_IOPMSetAssertionExceptionLimits_ptr)

    Interceptor.attach(g_IOPMSetAssertionExceptionLimits_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetAssertionExceptionLimits")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetAssertionExceptionLimits");
        }
    });        
 
    const g_IOPMSetBTWakeInterval_ptr = Module.getExportByName(g_proc_name, 'IOPMSetBTWakeInterval');
    console.log("[i] g_IOPMSetBTWakeInterval_ptr addr: " + g_IOPMSetBTWakeInterval_ptr)

    Interceptor.attach(g_IOPMSetBTWakeInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetBTWakeInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetBTWakeInterval");
        }
    });        
 
    const g_IOPMSetDWLingerInterval_ptr = Module.getExportByName(g_proc_name, 'IOPMSetDWLingerInterval');
    console.log("[i] g_IOPMSetDWLingerInterval_ptr addr: " + g_IOPMSetDWLingerInterval_ptr)

    Interceptor.attach(g_IOPMSetDWLingerInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetDWLingerInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetDWLingerInterval");
        }
    });        
 
    const g_IOPMSetDebugFlags_ptr = Module.getExportByName(g_proc_name, 'IOPMSetDebugFlags');
    console.log("[i] g_IOPMSetDebugFlags_ptr addr: " + g_IOPMSetDebugFlags_ptr)

    Interceptor.attach(g_IOPMSetDebugFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetDebugFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetDebugFlags");
        }
    });        
 
    const g_IOPMSetDesktopMode_ptr = Module.getExportByName(g_proc_name, 'IOPMSetDesktopMode');
    console.log("[i] g_IOPMSetDesktopMode_ptr addr: " + g_IOPMSetDesktopMode_ptr)

    Interceptor.attach(g_IOPMSetDesktopMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetDesktopMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetDesktopMode");
        }
    });        
 
    const g_IOPMSetPMPreference_ptr = Module.getExportByName(g_proc_name, 'IOPMSetPMPreference');
    console.log("[i] g_IOPMSetPMPreference_ptr addr: " + g_IOPMSetPMPreference_ptr)

    Interceptor.attach(g_IOPMSetPMPreference_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetPMPreference")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetPMPreference");
        }
    });        
 
    const g_IOPMSetPMPreferences_ptr = Module.getExportByName(g_proc_name, 'IOPMSetPMPreferences');
    console.log("[i] g_IOPMSetPMPreferences_ptr addr: " + g_IOPMSetPMPreferences_ptr)

    Interceptor.attach(g_IOPMSetPMPreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetPMPreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetPMPreferences");
        }
    });        
 
    const g_IOPMSetReservePowerMode_ptr = Module.getExportByName(g_proc_name, 'IOPMSetReservePowerMode');
    console.log("[i] g_IOPMSetReservePowerMode_ptr addr: " + g_IOPMSetReservePowerMode_ptr)

    Interceptor.attach(g_IOPMSetReservePowerMode_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetReservePowerMode")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetReservePowerMode");
        }
    });        
 
    const g_IOPMSetSleepServicesWakeTimeCap_ptr = Module.getExportByName(g_proc_name, 'IOPMSetSleepServicesWakeTimeCap');
    console.log("[i] g_IOPMSetSleepServicesWakeTimeCap_ptr addr: " + g_IOPMSetSleepServicesWakeTimeCap_ptr)

    Interceptor.attach(g_IOPMSetSleepServicesWakeTimeCap_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetSleepServicesWakeTimeCap")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetSleepServicesWakeTimeCap");
        }
    });        
 
    const g_IOPMSetSystemAssertionTimeout_ptr = Module.getExportByName(g_proc_name, 'IOPMSetSystemAssertionTimeout');
    console.log("[i] g_IOPMSetSystemAssertionTimeout_ptr addr: " + g_IOPMSetSystemAssertionTimeout_ptr)

    Interceptor.attach(g_IOPMSetSystemAssertionTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetSystemAssertionTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetSystemAssertionTimeout");
        }
    });        
 
    const g_IOPMSetSystemPowerSetting_ptr = Module.getExportByName(g_proc_name, 'IOPMSetSystemPowerSetting');
    console.log("[i] g_IOPMSetSystemPowerSetting_ptr addr: " + g_IOPMSetSystemPowerSetting_ptr)

    Interceptor.attach(g_IOPMSetSystemPowerSetting_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetSystemPowerSetting")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetSystemPowerSetting");
        }
    });        
 
    const g_IOPMSetUPSShutdownLevels_ptr = Module.getExportByName(g_proc_name, 'IOPMSetUPSShutdownLevels');
    console.log("[i] g_IOPMSetUPSShutdownLevels_ptr addr: " + g_IOPMSetUPSShutdownLevels_ptr)

    Interceptor.attach(g_IOPMSetUPSShutdownLevels_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetUPSShutdownLevels")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetUPSShutdownLevels");
        }
    });        
 
    const g_IOPMSetUserActivityIdleTimeout_ptr = Module.getExportByName(g_proc_name, 'IOPMSetUserActivityIdleTimeout');
    console.log("[i] g_IOPMSetUserActivityIdleTimeout_ptr addr: " + g_IOPMSetUserActivityIdleTimeout_ptr)

    Interceptor.attach(g_IOPMSetUserActivityIdleTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetUserActivityIdleTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetUserActivityIdleTimeout");
        }
    });        
 
    const g_IOPMSetValueInt_ptr = Module.getExportByName(g_proc_name, 'IOPMSetValueInt');
    console.log("[i] g_IOPMSetValueInt_ptr addr: " + g_IOPMSetValueInt_ptr)

    Interceptor.attach(g_IOPMSetValueInt_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSetValueInt")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSetValueInt");
        }
    });        
 
    const g_IOPMSkylightCheckIn_ptr = Module.getExportByName(g_proc_name, 'IOPMSkylightCheckIn');
    console.log("[i] g_IOPMSkylightCheckIn_ptr addr: " + g_IOPMSkylightCheckIn_ptr)

    Interceptor.attach(g_IOPMSkylightCheckIn_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSkylightCheckIn")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSkylightCheckIn");
        }
    });        
 
    const g_IOPMSkylightCheckInWithCapability_ptr = Module.getExportByName(g_proc_name, 'IOPMSkylightCheckInWithCapability');
    console.log("[i] g_IOPMSkylightCheckInWithCapability_ptr addr: " + g_IOPMSkylightCheckInWithCapability_ptr)

    Interceptor.attach(g_IOPMSkylightCheckInWithCapability_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSkylightCheckInWithCapability")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSkylightCheckInWithCapability");
        }
    });        
 
    const g_IOPMSleepEnabled_ptr = Module.getExportByName(g_proc_name, 'IOPMSleepEnabled');
    console.log("[i] g_IOPMSleepEnabled_ptr addr: " + g_IOPMSleepEnabled_ptr)

    Interceptor.attach(g_IOPMSleepEnabled_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSleepEnabled")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSleepEnabled");
        }
    });        
 
    const g_IOPMSleepSystem_ptr = Module.getExportByName(g_proc_name, 'IOPMSleepSystem');
    console.log("[i] g_IOPMSleepSystem_ptr addr: " + g_IOPMSleepSystem_ptr)

    Interceptor.attach(g_IOPMSleepSystem_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSleepSystem")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSleepSystem");
        }
    });        
 
    const g_IOPMSleepSystemWithOptions_ptr = Module.getExportByName(g_proc_name, 'IOPMSleepSystemWithOptions');
    console.log("[i] g_IOPMSleepSystemWithOptions_ptr addr: " + g_IOPMSleepSystemWithOptions_ptr)

    Interceptor.attach(g_IOPMSleepSystemWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSleepSystemWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSleepSystemWithOptions");
        }
    });        
 
    const g_IOPMSleepWakeCopyUUID_ptr = Module.getExportByName(g_proc_name, 'IOPMSleepWakeCopyUUID');
    console.log("[i] g_IOPMSleepWakeCopyUUID_ptr addr: " + g_IOPMSleepWakeCopyUUID_ptr)

    Interceptor.attach(g_IOPMSleepWakeCopyUUID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSleepWakeCopyUUID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSleepWakeCopyUUID");
        }
    });        
 
    const g_IOPMSleepWakeSetUUID_ptr = Module.getExportByName(g_proc_name, 'IOPMSleepWakeSetUUID');
    console.log("[i] g_IOPMSleepWakeSetUUID_ptr addr: " + g_IOPMSleepWakeSetUUID_ptr)

    Interceptor.attach(g_IOPMSleepWakeSetUUID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMSleepWakeSetUUID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMSleepWakeSetUUID");
        }
    });        
 
    const g_IOPMUnregisterExceptionNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMUnregisterExceptionNotification');
    console.log("[i] g_IOPMUnregisterExceptionNotification_ptr addr: " + g_IOPMUnregisterExceptionNotification_ptr)

    Interceptor.attach(g_IOPMUnregisterExceptionNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMUnregisterExceptionNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMUnregisterExceptionNotification");
        }
    });        
 
    const g_IOPMUnregisterNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMUnregisterNotification');
    console.log("[i] g_IOPMUnregisterNotification_ptr addr: " + g_IOPMUnregisterNotification_ptr)

    Interceptor.attach(g_IOPMUnregisterNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMUnregisterNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMUnregisterNotification");
        }
    });        
 
    const g_IOPMUnregisterPrefsChangeNotification_ptr = Module.getExportByName(g_proc_name, 'IOPMUnregisterPrefsChangeNotification');
    console.log("[i] g_IOPMUnregisterPrefsChangeNotification_ptr addr: " + g_IOPMUnregisterPrefsChangeNotification_ptr)

    Interceptor.attach(g_IOPMUnregisterPrefsChangeNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMUnregisterPrefsChangeNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMUnregisterPrefsChangeNotification");
        }
    });        
 
    const g_IOPMUserIsActive_ptr = Module.getExportByName(g_proc_name, 'IOPMUserIsActive');
    console.log("[i] g_IOPMUserIsActive_ptr addr: " + g_IOPMUserIsActive_ptr)

    Interceptor.attach(g_IOPMUserIsActive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMUserIsActive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMUserIsActive");
        }
    });        
 
    const g_IOPMUsingDefaultPreferences_ptr = Module.getExportByName(g_proc_name, 'IOPMUsingDefaultPreferences');
    console.log("[i] g_IOPMUsingDefaultPreferences_ptr addr: " + g_IOPMUsingDefaultPreferences_ptr)

    Interceptor.attach(g_IOPMUsingDefaultPreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMUsingDefaultPreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMUsingDefaultPreferences");
        }
    });        
 
    const g_IOPMWriteToPrefs_ptr = Module.getExportByName(g_proc_name, 'IOPMWriteToPrefs');
    console.log("[i] g_IOPMWriteToPrefs_ptr addr: " + g_IOPMWriteToPrefs_ptr)

    Interceptor.attach(g_IOPMWriteToPrefs_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPMWriteToPrefs")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPMWriteToPrefs");
        }
    });        
 
    const g_IOPSAccCreateAttachNotification_ptr = Module.getExportByName(g_proc_name, 'IOPSAccCreateAttachNotification');
    console.log("[i] g_IOPSAccCreateAttachNotification_ptr addr: " + g_IOPSAccCreateAttachNotification_ptr)

    Interceptor.attach(g_IOPSAccCreateAttachNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSAccCreateAttachNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSAccCreateAttachNotification");
        }
    });        
 
    const g_IOPSAccCreateLimitedPowerNotification_ptr = Module.getExportByName(g_proc_name, 'IOPSAccCreateLimitedPowerNotification');
    console.log("[i] g_IOPSAccCreateLimitedPowerNotification_ptr addr: " + g_IOPSAccCreateLimitedPowerNotification_ptr)

    Interceptor.attach(g_IOPSAccCreateLimitedPowerNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSAccCreateLimitedPowerNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSAccCreateLimitedPowerNotification");
        }
    });        
 
    const g_IOPSAccNotificationCreateRunLoopSource_ptr = Module.getExportByName(g_proc_name, 'IOPSAccNotificationCreateRunLoopSource');
    console.log("[i] g_IOPSAccNotificationCreateRunLoopSource_ptr addr: " + g_IOPSAccNotificationCreateRunLoopSource_ptr)

    Interceptor.attach(g_IOPSAccNotificationCreateRunLoopSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSAccNotificationCreateRunLoopSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSAccNotificationCreateRunLoopSource");
        }
    });        
 
    const g_IOPSCopyExternalPowerAdapterDetails_ptr = Module.getExportByName(g_proc_name, 'IOPSCopyExternalPowerAdapterDetails');
    console.log("[i] g_IOPSCopyExternalPowerAdapterDetails_ptr addr: " + g_IOPSCopyExternalPowerAdapterDetails_ptr)

    Interceptor.attach(g_IOPSCopyExternalPowerAdapterDetails_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCopyExternalPowerAdapterDetails")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCopyExternalPowerAdapterDetails");
        }
    });        
 
    const g_IOPSCopyInternalBatteriesArray_ptr = Module.getExportByName(g_proc_name, 'IOPSCopyInternalBatteriesArray');
    console.log("[i] g_IOPSCopyInternalBatteriesArray_ptr addr: " + g_IOPSCopyInternalBatteriesArray_ptr)

    Interceptor.attach(g_IOPSCopyInternalBatteriesArray_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCopyInternalBatteriesArray")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCopyInternalBatteriesArray");
        }
    });        
 
    const g_IOPSCopyPowerSourcesByType_ptr = Module.getExportByName(g_proc_name, 'IOPSCopyPowerSourcesByType');
    console.log("[i] g_IOPSCopyPowerSourcesByType_ptr addr: " + g_IOPSCopyPowerSourcesByType_ptr)

    Interceptor.attach(g_IOPSCopyPowerSourcesByType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCopyPowerSourcesByType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCopyPowerSourcesByType");
        }
    });        
 
    const g_IOPSCopyPowerSourcesInfo_ptr = Module.getExportByName(g_proc_name, 'IOPSCopyPowerSourcesInfo');
    console.log("[i] g_IOPSCopyPowerSourcesInfo_ptr addr: " + g_IOPSCopyPowerSourcesInfo_ptr)

    Interceptor.attach(g_IOPSCopyPowerSourcesInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCopyPowerSourcesInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCopyPowerSourcesInfo");
        }
    });        
 
    const g_IOPSCopyPowerSourcesList_ptr = Module.getExportByName(g_proc_name, 'IOPSCopyPowerSourcesList');
    console.log("[i] g_IOPSCopyPowerSourcesList_ptr addr: " + g_IOPSCopyPowerSourcesList_ptr)

    Interceptor.attach(g_IOPSCopyPowerSourcesList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCopyPowerSourcesList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCopyPowerSourcesList");
        }
    });        
 
    const g_IOPSCopyUPSArray_ptr = Module.getExportByName(g_proc_name, 'IOPSCopyUPSArray');
    console.log("[i] g_IOPSCopyUPSArray_ptr addr: " + g_IOPSCopyUPSArray_ptr)

    Interceptor.attach(g_IOPSCopyUPSArray_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCopyUPSArray")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCopyUPSArray");
        }
    });        
 
    const g_IOPSCreateLimitedPowerNotification_ptr = Module.getExportByName(g_proc_name, 'IOPSCreateLimitedPowerNotification');
    console.log("[i] g_IOPSCreateLimitedPowerNotification_ptr addr: " + g_IOPSCreateLimitedPowerNotification_ptr)

    Interceptor.attach(g_IOPSCreateLimitedPowerNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCreateLimitedPowerNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCreateLimitedPowerNotification");
        }
    });        
 
    const g_IOPSCreatePowerSource_ptr = Module.getExportByName(g_proc_name, 'IOPSCreatePowerSource');
    console.log("[i] g_IOPSCreatePowerSource_ptr addr: " + g_IOPSCreatePowerSource_ptr)

    Interceptor.attach(g_IOPSCreatePowerSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSCreatePowerSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSCreatePowerSource");
        }
    });        
 
    const g_IOPSDrawingUnlimitedPower_ptr = Module.getExportByName(g_proc_name, 'IOPSDrawingUnlimitedPower');
    console.log("[i] g_IOPSDrawingUnlimitedPower_ptr addr: " + g_IOPSDrawingUnlimitedPower_ptr)

    Interceptor.attach(g_IOPSDrawingUnlimitedPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSDrawingUnlimitedPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSDrawingUnlimitedPower");
        }
    });        
 
    const g_IOPSGetActiveBattery_ptr = Module.getExportByName(g_proc_name, 'IOPSGetActiveBattery');
    console.log("[i] g_IOPSGetActiveBattery_ptr addr: " + g_IOPSGetActiveBattery_ptr)

    Interceptor.attach(g_IOPSGetActiveBattery_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetActiveBattery")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetActiveBattery");
        }
    });        
 
    const g_IOPSGetActiveUPS_ptr = Module.getExportByName(g_proc_name, 'IOPSGetActiveUPS');
    console.log("[i] g_IOPSGetActiveUPS_ptr addr: " + g_IOPSGetActiveUPS_ptr)

    Interceptor.attach(g_IOPSGetActiveUPS_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetActiveUPS")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetActiveUPS");
        }
    });        
 
    const g_IOPSGetBatteryWarningLevel_ptr = Module.getExportByName(g_proc_name, 'IOPSGetBatteryWarningLevel');
    console.log("[i] g_IOPSGetBatteryWarningLevel_ptr addr: " + g_IOPSGetBatteryWarningLevel_ptr)

    Interceptor.attach(g_IOPSGetBatteryWarningLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetBatteryWarningLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetBatteryWarningLevel");
        }
    });        
 
    const g_IOPSGetPercentRemaining_ptr = Module.getExportByName(g_proc_name, 'IOPSGetPercentRemaining');
    console.log("[i] g_IOPSGetPercentRemaining_ptr addr: " + g_IOPSGetPercentRemaining_ptr)

    Interceptor.attach(g_IOPSGetPercentRemaining_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetPercentRemaining")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetPercentRemaining");
        }
    });        
 
    const g_IOPSGetPowerSourceDescription_ptr = Module.getExportByName(g_proc_name, 'IOPSGetPowerSourceDescription');
    console.log("[i] g_IOPSGetPowerSourceDescription_ptr addr: " + g_IOPSGetPowerSourceDescription_ptr)

    Interceptor.attach(g_IOPSGetPowerSourceDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetPowerSourceDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetPowerSourceDescription");
        }
    });        
 
    const g_IOPSGetProvidingPowerSourceType_ptr = Module.getExportByName(g_proc_name, 'IOPSGetProvidingPowerSourceType');
    console.log("[i] g_IOPSGetProvidingPowerSourceType_ptr addr: " + g_IOPSGetProvidingPowerSourceType_ptr)

    Interceptor.attach(g_IOPSGetProvidingPowerSourceType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetProvidingPowerSourceType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetProvidingPowerSourceType");
        }
    });        
 
    const g_IOPSGetSupportedPowerSources_ptr = Module.getExportByName(g_proc_name, 'IOPSGetSupportedPowerSources');
    console.log("[i] g_IOPSGetSupportedPowerSources_ptr addr: " + g_IOPSGetSupportedPowerSources_ptr)

    Interceptor.attach(g_IOPSGetSupportedPowerSources_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetSupportedPowerSources")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetSupportedPowerSources");
        }
    });        
 
    const g_IOPSGetTimeRemainingEstimate_ptr = Module.getExportByName(g_proc_name, 'IOPSGetTimeRemainingEstimate');
    console.log("[i] g_IOPSGetTimeRemainingEstimate_ptr addr: " + g_IOPSGetTimeRemainingEstimate_ptr)

    Interceptor.attach(g_IOPSGetTimeRemainingEstimate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSGetTimeRemainingEstimate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSGetTimeRemainingEstimate");
        }
    });        
 
    const g_IOPSNotificationCreateRunLoopSource_ptr = Module.getExportByName(g_proc_name, 'IOPSNotificationCreateRunLoopSource');
    console.log("[i] g_IOPSNotificationCreateRunLoopSource_ptr addr: " + g_IOPSNotificationCreateRunLoopSource_ptr)

    Interceptor.attach(g_IOPSNotificationCreateRunLoopSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSNotificationCreateRunLoopSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSNotificationCreateRunLoopSource");
        }
    });        
 
    const g_IOPSPowerSourceSupported_ptr = Module.getExportByName(g_proc_name, 'IOPSPowerSourceSupported');
    console.log("[i] g_IOPSPowerSourceSupported_ptr addr: " + g_IOPSPowerSourceSupported_ptr)

    Interceptor.attach(g_IOPSPowerSourceSupported_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSPowerSourceSupported")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSPowerSourceSupported");
        }
    });        
 
    const g_IOPSReleasePowerSource_ptr = Module.getExportByName(g_proc_name, 'IOPSReleasePowerSource');
    console.log("[i] g_IOPSReleasePowerSource_ptr addr: " + g_IOPSReleasePowerSource_ptr)

    Interceptor.attach(g_IOPSReleasePowerSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSReleasePowerSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSReleasePowerSource");
        }
    });        
 
    const g_IOPSRequestBatteryUpdate_ptr = Module.getExportByName(g_proc_name, 'IOPSRequestBatteryUpdate');
    console.log("[i] g_IOPSRequestBatteryUpdate_ptr addr: " + g_IOPSRequestBatteryUpdate_ptr)

    Interceptor.attach(g_IOPSRequestBatteryUpdate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSRequestBatteryUpdate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSRequestBatteryUpdate");
        }
    });        
 
    const g_IOPSSetPowerSourceDetails_ptr = Module.getExportByName(g_proc_name, 'IOPSSetPowerSourceDetails');
    console.log("[i] g_IOPSSetPowerSourceDetails_ptr addr: " + g_IOPSSetPowerSourceDetails_ptr)

    Interceptor.attach(g_IOPSSetPowerSourceDetails_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPSSetPowerSourceDetails")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPSSetPowerSourceDetails");
        }
    });        
 
    const g_IOPlatformCopyFeatureActive_ptr = Module.getExportByName(g_proc_name, 'IOPlatformCopyFeatureActive');
    console.log("[i] g_IOPlatformCopyFeatureActive_ptr addr: " + g_IOPlatformCopyFeatureActive_ptr)

    Interceptor.attach(g_IOPlatformCopyFeatureActive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPlatformCopyFeatureActive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPlatformCopyFeatureActive");
        }
    });        
 
    const g_IOPlatformCopyFeatureDefault_ptr = Module.getExportByName(g_proc_name, 'IOPlatformCopyFeatureDefault');
    console.log("[i] g_IOPlatformCopyFeatureDefault_ptr addr: " + g_IOPlatformCopyFeatureDefault_ptr)

    Interceptor.attach(g_IOPlatformCopyFeatureDefault_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPlatformCopyFeatureDefault")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPlatformCopyFeatureDefault");
        }
    });        
 
    const g_IOPlatformGetDeviceColor_ptr = Module.getExportByName(g_proc_name, 'IOPlatformGetDeviceColor');
    console.log("[i] g_IOPlatformGetDeviceColor_ptr addr: " + g_IOPlatformGetDeviceColor_ptr)

    Interceptor.attach(g_IOPlatformGetDeviceColor_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOPlatformGetDeviceColor")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOPlatformGetDeviceColor");
        }
    });        
 
    const g_IORegisterApp_ptr = Module.getExportByName(g_proc_name, 'IORegisterApp');
    console.log("[i] g_IORegisterApp_ptr addr: " + g_IORegisterApp_ptr)

    Interceptor.attach(g_IORegisterApp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegisterApp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegisterApp");
        }
    });        
 
    const g_IORegisterClient_ptr = Module.getExportByName(g_proc_name, 'IORegisterClient');
    console.log("[i] g_IORegisterClient_ptr addr: " + g_IORegisterClient_ptr)

    Interceptor.attach(g_IORegisterClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegisterClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegisterClient");
        }
    });        
 
    const g_IORegisterForSystemPower_ptr = Module.getExportByName(g_proc_name, 'IORegisterForSystemPower');
    console.log("[i] g_IORegisterForSystemPower_ptr addr: " + g_IORegisterForSystemPower_ptr)

    Interceptor.attach(g_IORegisterForSystemPower_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegisterForSystemPower")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegisterForSystemPower");
        }
    });        
 
    const g_IORegistryCreateEnumerator_ptr = Module.getExportByName(g_proc_name, 'IORegistryCreateEnumerator');
    console.log("[i] g_IORegistryCreateEnumerator_ptr addr: " + g_IORegistryCreateEnumerator_ptr)

    Interceptor.attach(g_IORegistryCreateEnumerator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryCreateEnumerator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryCreateEnumerator");
        }
    });        
 
    const g_IORegistryCreateIterator_ptr = Module.getExportByName(g_proc_name, 'IORegistryCreateIterator');
    console.log("[i] g_IORegistryCreateIterator_ptr addr: " + g_IORegistryCreateIterator_ptr)

    Interceptor.attach(g_IORegistryCreateIterator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryCreateIterator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryCreateIterator");
        }
    });        
 
    const g_IORegistryDisposeEnumerator_ptr = Module.getExportByName(g_proc_name, 'IORegistryDisposeEnumerator');
    console.log("[i] g_IORegistryDisposeEnumerator_ptr addr: " + g_IORegistryDisposeEnumerator_ptr)

    Interceptor.attach(g_IORegistryDisposeEnumerator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryDisposeEnumerator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryDisposeEnumerator");
        }
    });        
 
    const g_IORegistryEntryCopyFromPath_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryCopyFromPath');
    console.log("[i] g_IORegistryEntryCopyFromPath_ptr addr: " + g_IORegistryEntryCopyFromPath_ptr)

    Interceptor.attach(g_IORegistryEntryCopyFromPath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryCopyFromPath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryCopyFromPath");
        }
    });        
 
    const g_IORegistryEntryCopyPath_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryCopyPath');
    console.log("[i] g_IORegistryEntryCopyPath_ptr addr: " + g_IORegistryEntryCopyPath_ptr)

    Interceptor.attach(g_IORegistryEntryCopyPath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryCopyPath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryCopyPath");
        }
    });        
 
    const g_IORegistryEntryCreateCFProperties_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryCreateCFProperties');
    console.log("[i] g_IORegistryEntryCreateCFProperties_ptr addr: " + g_IORegistryEntryCreateCFProperties_ptr)

    Interceptor.attach(g_IORegistryEntryCreateCFProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryCreateCFProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryCreateCFProperties");
        }
    });        
 
    const g_IORegistryEntryCreateCFProperty_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryCreateCFProperty');
    console.log("[i] g_IORegistryEntryCreateCFProperty_ptr addr: " + g_IORegistryEntryCreateCFProperty_ptr)

    Interceptor.attach(g_IORegistryEntryCreateCFProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryCreateCFProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryCreateCFProperty");
        }
    });        
 
    const g_IORegistryEntryCreateIterator_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryCreateIterator');
    console.log("[i] g_IORegistryEntryCreateIterator_ptr addr: " + g_IORegistryEntryCreateIterator_ptr)

    Interceptor.attach(g_IORegistryEntryCreateIterator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryCreateIterator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryCreateIterator");
        }
    });        
 
    const g_IORegistryEntryFromPath_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryFromPath');
    console.log("[i] g_IORegistryEntryFromPath_ptr addr: " + g_IORegistryEntryFromPath_ptr)

    Interceptor.attach(g_IORegistryEntryFromPath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryFromPath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryFromPath");
        }
    });        
 
    const g_IORegistryEntryGetChildEntry_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetChildEntry');
    console.log("[i] g_IORegistryEntryGetChildEntry_ptr addr: " + g_IORegistryEntryGetChildEntry_ptr)

    Interceptor.attach(g_IORegistryEntryGetChildEntry_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetChildEntry")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetChildEntry");
        }
    });        
 
    const g_IORegistryEntryGetChildIterator_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetChildIterator');
    console.log("[i] g_IORegistryEntryGetChildIterator_ptr addr: " + g_IORegistryEntryGetChildIterator_ptr)

    Interceptor.attach(g_IORegistryEntryGetChildIterator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetChildIterator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetChildIterator");
        }
    });        
 
    const g_IORegistryEntryGetLocationInPlane_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetLocationInPlane');
    console.log("[i] g_IORegistryEntryGetLocationInPlane_ptr addr: " + g_IORegistryEntryGetLocationInPlane_ptr)

    Interceptor.attach(g_IORegistryEntryGetLocationInPlane_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetLocationInPlane")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetLocationInPlane");
        }
    });        
 
    const g_IORegistryEntryGetName_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetName');
    console.log("[i] g_IORegistryEntryGetName_ptr addr: " + g_IORegistryEntryGetName_ptr)

    Interceptor.attach(g_IORegistryEntryGetName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetName");
        }
    });        
 
    const g_IORegistryEntryGetNameInPlane_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetNameInPlane');
    console.log("[i] g_IORegistryEntryGetNameInPlane_ptr addr: " + g_IORegistryEntryGetNameInPlane_ptr)

    Interceptor.attach(g_IORegistryEntryGetNameInPlane_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetNameInPlane")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetNameInPlane");
        }
    });        
 
    const g_IORegistryEntryGetParentEntry_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetParentEntry');
    console.log("[i] g_IORegistryEntryGetParentEntry_ptr addr: " + g_IORegistryEntryGetParentEntry_ptr)

    Interceptor.attach(g_IORegistryEntryGetParentEntry_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetParentEntry")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetParentEntry");
        }
    });        
 
    const g_IORegistryEntryGetParentIterator_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetParentIterator');
    console.log("[i] g_IORegistryEntryGetParentIterator_ptr addr: " + g_IORegistryEntryGetParentIterator_ptr)

    Interceptor.attach(g_IORegistryEntryGetParentIterator_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetParentIterator")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetParentIterator");
        }
    });        
 
    const g_IORegistryEntryGetPath_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetPath');
    console.log("[i] g_IORegistryEntryGetPath_ptr addr: " + g_IORegistryEntryGetPath_ptr)

    Interceptor.attach(g_IORegistryEntryGetPath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetPath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetPath");
        }
    });        
 
    const g_IORegistryEntryGetProperty_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetProperty');
    console.log("[i] g_IORegistryEntryGetProperty_ptr addr: " + g_IORegistryEntryGetProperty_ptr)

    Interceptor.attach(g_IORegistryEntryGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetProperty");
        }
    });        
 
    const g_IORegistryEntryGetRegistryEntryID_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryGetRegistryEntryID');
    console.log("[i] g_IORegistryEntryGetRegistryEntryID_ptr addr: " + g_IORegistryEntryGetRegistryEntryID_ptr)

    Interceptor.attach(g_IORegistryEntryGetRegistryEntryID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryGetRegistryEntryID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryGetRegistryEntryID");
        }
    });        
 
    const g_IORegistryEntryIDMatching_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryIDMatching');
    console.log("[i] g_IORegistryEntryIDMatching_ptr addr: " + g_IORegistryEntryIDMatching_ptr)

    Interceptor.attach(g_IORegistryEntryIDMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryIDMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryIDMatching");
        }
    });        
 
    const g_IORegistryEntryInPlane_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntryInPlane');
    console.log("[i] g_IORegistryEntryInPlane_ptr addr: " + g_IORegistryEntryInPlane_ptr)

    Interceptor.attach(g_IORegistryEntryInPlane_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntryInPlane")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntryInPlane");
        }
    });        
 
    const g_IORegistryEntrySearchCFProperty_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntrySearchCFProperty');
    console.log("[i] g_IORegistryEntrySearchCFProperty_ptr addr: " + g_IORegistryEntrySearchCFProperty_ptr)

    Interceptor.attach(g_IORegistryEntrySearchCFProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntrySearchCFProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntrySearchCFProperty");
        }
    });        
 
    const g_IORegistryEntrySetCFProperties_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntrySetCFProperties');
    console.log("[i] g_IORegistryEntrySetCFProperties_ptr addr: " + g_IORegistryEntrySetCFProperties_ptr)

    Interceptor.attach(g_IORegistryEntrySetCFProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntrySetCFProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntrySetCFProperties");
        }
    });        
 
    const g_IORegistryEntrySetCFProperty_ptr = Module.getExportByName(g_proc_name, 'IORegistryEntrySetCFProperty');
    console.log("[i] g_IORegistryEntrySetCFProperty_ptr addr: " + g_IORegistryEntrySetCFProperty_ptr)

    Interceptor.attach(g_IORegistryEntrySetCFProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEntrySetCFProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEntrySetCFProperty");
        }
    });        
 
    const g_IORegistryEnumeratorNextConforming_ptr = Module.getExportByName(g_proc_name, 'IORegistryEnumeratorNextConforming');
    console.log("[i] g_IORegistryEnumeratorNextConforming_ptr addr: " + g_IORegistryEnumeratorNextConforming_ptr)

    Interceptor.attach(g_IORegistryEnumeratorNextConforming_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEnumeratorNextConforming")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEnumeratorNextConforming");
        }
    });        
 
    const g_IORegistryEnumeratorReset_ptr = Module.getExportByName(g_proc_name, 'IORegistryEnumeratorReset');
    console.log("[i] g_IORegistryEnumeratorReset_ptr addr: " + g_IORegistryEnumeratorReset_ptr)

    Interceptor.attach(g_IORegistryEnumeratorReset_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryEnumeratorReset")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryEnumeratorReset");
        }
    });        
 
    const g_IORegistryGetRootEntry_ptr = Module.getExportByName(g_proc_name, 'IORegistryGetRootEntry');
    console.log("[i] g_IORegistryGetRootEntry_ptr addr: " + g_IORegistryGetRootEntry_ptr)

    Interceptor.attach(g_IORegistryGetRootEntry_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryGetRootEntry")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryGetRootEntry");
        }
    });        
 
    const g_IORegistryIteratorEnterEntry_ptr = Module.getExportByName(g_proc_name, 'IORegistryIteratorEnterEntry');
    console.log("[i] g_IORegistryIteratorEnterEntry_ptr addr: " + g_IORegistryIteratorEnterEntry_ptr)

    Interceptor.attach(g_IORegistryIteratorEnterEntry_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryIteratorEnterEntry")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryIteratorEnterEntry");
        }
    });        
 
    const g_IORegistryIteratorExitEntry_ptr = Module.getExportByName(g_proc_name, 'IORegistryIteratorExitEntry');
    console.log("[i] g_IORegistryIteratorExitEntry_ptr addr: " + g_IORegistryIteratorExitEntry_ptr)

    Interceptor.attach(g_IORegistryIteratorExitEntry_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IORegistryIteratorExitEntry")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IORegistryIteratorExitEntry");
        }
    });        
 
    const g_IOSMCKeyProxyPresent_ptr = Module.getExportByName(g_proc_name, 'IOSMCKeyProxyPresent');
    console.log("[i] g_IOSMCKeyProxyPresent_ptr addr: " + g_IOSMCKeyProxyPresent_ptr)

    Interceptor.attach(g_IOSMCKeyProxyPresent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOSMCKeyProxyPresent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOSMCKeyProxyPresent");
        }
    });        
 
    const g_IOServiceAddInterestNotification_ptr = Module.getExportByName(g_proc_name, 'IOServiceAddInterestNotification');
    console.log("[i] g_IOServiceAddInterestNotification_ptr addr: " + g_IOServiceAddInterestNotification_ptr)

    Interceptor.attach(g_IOServiceAddInterestNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceAddInterestNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceAddInterestNotification");
        }
    });        
 
    const g_IOServiceAddMatchingNotification_ptr = Module.getExportByName(g_proc_name, 'IOServiceAddMatchingNotification');
    console.log("[i] g_IOServiceAddMatchingNotification_ptr addr: " + g_IOServiceAddMatchingNotification_ptr)

    Interceptor.attach(g_IOServiceAddMatchingNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceAddMatchingNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceAddMatchingNotification");
        }
    });        
 
    const g_IOServiceAddNotification_ptr = Module.getExportByName(g_proc_name, 'IOServiceAddNotification');
    console.log("[i] g_IOServiceAddNotification_ptr addr: " + g_IOServiceAddNotification_ptr)

    Interceptor.attach(g_IOServiceAddNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceAddNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceAddNotification");
        }
    });        
 
    const g_IOServiceAuthorize_ptr = Module.getExportByName(g_proc_name, 'IOServiceAuthorize');
    console.log("[i] g_IOServiceAuthorize_ptr addr: " + g_IOServiceAuthorize_ptr)

    Interceptor.attach(g_IOServiceAuthorize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceAuthorize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceAuthorize");
        }
    });        
 
    const g_IOServiceClose_ptr = Module.getExportByName(g_proc_name, 'IOServiceClose');
    console.log("[i] g_IOServiceClose_ptr addr: " + g_IOServiceClose_ptr)

    Interceptor.attach(g_IOServiceClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceClose");
        }
    });        
 
    const g_IOServiceCopySystemStateNotificationService_ptr = Module.getExportByName(g_proc_name, 'IOServiceCopySystemStateNotificationService');
    console.log("[i] g_IOServiceCopySystemStateNotificationService_ptr addr: " + g_IOServiceCopySystemStateNotificationService_ptr)

    Interceptor.attach(g_IOServiceCopySystemStateNotificationService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceCopySystemStateNotificationService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceCopySystemStateNotificationService");
        }
    });        
 
    const g_IOServiceGetBusyState_ptr = Module.getExportByName(g_proc_name, 'IOServiceGetBusyState');
    console.log("[i] g_IOServiceGetBusyState_ptr addr: " + g_IOServiceGetBusyState_ptr)

    Interceptor.attach(g_IOServiceGetBusyState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceGetBusyState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceGetBusyState");
        }
    });        
 
    const g_IOServiceGetBusyStateAndTime_ptr = Module.getExportByName(g_proc_name, 'IOServiceGetBusyStateAndTime');
    console.log("[i] g_IOServiceGetBusyStateAndTime_ptr addr: " + g_IOServiceGetBusyStateAndTime_ptr)

    Interceptor.attach(g_IOServiceGetBusyStateAndTime_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceGetBusyStateAndTime")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceGetBusyStateAndTime");
        }
    });        
 
    const g_IOServiceGetMatchingService_ptr = Module.getExportByName(g_proc_name, 'IOServiceGetMatchingService');
    console.log("[i] g_IOServiceGetMatchingService_ptr addr: " + g_IOServiceGetMatchingService_ptr)

    Interceptor.attach(g_IOServiceGetMatchingService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceGetMatchingService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceGetMatchingService");
        }
    });        
 
    const g_IOServiceGetMatchingServices_ptr = Module.getExportByName(g_proc_name, 'IOServiceGetMatchingServices');
    console.log("[i] g_IOServiceGetMatchingServices_ptr addr: " + g_IOServiceGetMatchingServices_ptr)

    Interceptor.attach(g_IOServiceGetMatchingServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceGetMatchingServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceGetMatchingServices");
        }
    });        
 
    const g_IOServiceGetState_ptr = Module.getExportByName(g_proc_name, 'IOServiceGetState');
    console.log("[i] g_IOServiceGetState_ptr addr: " + g_IOServiceGetState_ptr)

    Interceptor.attach(g_IOServiceGetState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceGetState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceGetState");
        }
    });        
 
    const g_IOServiceMatchPropertyTable_ptr = Module.getExportByName(g_proc_name, 'IOServiceMatchPropertyTable');
    console.log("[i] g_IOServiceMatchPropertyTable_ptr addr: " + g_IOServiceMatchPropertyTable_ptr)

    Interceptor.attach(g_IOServiceMatchPropertyTable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceMatchPropertyTable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceMatchPropertyTable");
        }
    });        
 
    const g_IOServiceMatching_ptr = Module.getExportByName(g_proc_name, 'IOServiceMatching');
    console.log("[i] g_IOServiceMatching_ptr addr: " + g_IOServiceMatching_ptr)

    Interceptor.attach(g_IOServiceMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceMatching");
        }
    });        
 
    const g_IOServiceNameMatching_ptr = Module.getExportByName(g_proc_name, 'IOServiceNameMatching');
    console.log("[i] g_IOServiceNameMatching_ptr addr: " + g_IOServiceNameMatching_ptr)

    Interceptor.attach(g_IOServiceNameMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceNameMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceNameMatching");
        }
    });        
 
    const g_IOServiceOFPathToBSDName_ptr = Module.getExportByName(g_proc_name, 'IOServiceOFPathToBSDName');
    console.log("[i] g_IOServiceOFPathToBSDName_ptr addr: " + g_IOServiceOFPathToBSDName_ptr)

    Interceptor.attach(g_IOServiceOFPathToBSDName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceOFPathToBSDName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceOFPathToBSDName");
        }
    });        
 
    const g_IOServiceOpen_ptr = Module.getExportByName(g_proc_name, 'IOServiceOpen');
    console.log("[i] g_IOServiceOpen_ptr addr: " + g_IOServiceOpen_ptr)

    Interceptor.attach(g_IOServiceOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceOpen");
        }
    });        
 
    const g_IOServiceOpenAsFileDescriptor_ptr = Module.getExportByName(g_proc_name, 'IOServiceOpenAsFileDescriptor');
    console.log("[i] g_IOServiceOpenAsFileDescriptor_ptr addr: " + g_IOServiceOpenAsFileDescriptor_ptr)

    Interceptor.attach(g_IOServiceOpenAsFileDescriptor_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceOpenAsFileDescriptor")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceOpenAsFileDescriptor");
        }
    });        
 
    const g_IOServiceRequestProbe_ptr = Module.getExportByName(g_proc_name, 'IOServiceRequestProbe');
    console.log("[i] g_IOServiceRequestProbe_ptr addr: " + g_IOServiceRequestProbe_ptr)

    Interceptor.attach(g_IOServiceRequestProbe_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceRequestProbe")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceRequestProbe");
        }
    });        
 
    const g_IOServiceStateNotificationItemCopy_ptr = Module.getExportByName(g_proc_name, 'IOServiceStateNotificationItemCopy');
    console.log("[i] g_IOServiceStateNotificationItemCopy_ptr addr: " + g_IOServiceStateNotificationItemCopy_ptr)

    Interceptor.attach(g_IOServiceStateNotificationItemCopy_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceStateNotificationItemCopy")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceStateNotificationItemCopy");
        }
    });        
 
    const g_IOServiceStateNotificationItemCreate_ptr = Module.getExportByName(g_proc_name, 'IOServiceStateNotificationItemCreate');
    console.log("[i] g_IOServiceStateNotificationItemCreate_ptr addr: " + g_IOServiceStateNotificationItemCreate_ptr)

    Interceptor.attach(g_IOServiceStateNotificationItemCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceStateNotificationItemCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceStateNotificationItemCreate");
        }
    });        
 
    const g_IOServiceStateNotificationItemSet_ptr = Module.getExportByName(g_proc_name, 'IOServiceStateNotificationItemSet');
    console.log("[i] g_IOServiceStateNotificationItemSet_ptr addr: " + g_IOServiceStateNotificationItemSet_ptr)

    Interceptor.attach(g_IOServiceStateNotificationItemSet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceStateNotificationItemSet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceStateNotificationItemSet");
        }
    });        
 
    const g_IOServiceWaitQuiet_ptr = Module.getExportByName(g_proc_name, 'IOServiceWaitQuiet');
    console.log("[i] g_IOServiceWaitQuiet_ptr addr: " + g_IOServiceWaitQuiet_ptr)

    Interceptor.attach(g_IOServiceWaitQuiet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOServiceWaitQuiet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOServiceWaitQuiet");
        }
    });        
 
    const g_IOSetNotificationPort_ptr = Module.getExportByName(g_proc_name, 'IOSetNotificationPort');
    console.log("[i] g_IOSetNotificationPort_ptr addr: " + g_IOSetNotificationPort_ptr)

    Interceptor.attach(g_IOSetNotificationPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOSetNotificationPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOSetNotificationPort");
        }
    });        
 
    const g_IOURLCreateDataAndPropertiesFromResource_ptr = Module.getExportByName(g_proc_name, 'IOURLCreateDataAndPropertiesFromResource');
    console.log("[i] g_IOURLCreateDataAndPropertiesFromResource_ptr addr: " + g_IOURLCreateDataAndPropertiesFromResource_ptr)

    Interceptor.attach(g_IOURLCreateDataAndPropertiesFromResource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOURLCreateDataAndPropertiesFromResource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOURLCreateDataAndPropertiesFromResource");
        }
    });        
 
    const g_IOURLCreatePropertyFromResource_ptr = Module.getExportByName(g_proc_name, 'IOURLCreatePropertyFromResource');
    console.log("[i] g_IOURLCreatePropertyFromResource_ptr addr: " + g_IOURLCreatePropertyFromResource_ptr)

    Interceptor.attach(g_IOURLCreatePropertyFromResource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: IOURLCreatePropertyFromResource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: IOURLCreatePropertyFromResource");
        }
    });        
 
    const g_KextManagerCopyLoadedKextInfo_ptr = Module.getExportByName(g_proc_name, 'KextManagerCopyLoadedKextInfo');
    console.log("[i] g_KextManagerCopyLoadedKextInfo_ptr addr: " + g_KextManagerCopyLoadedKextInfo_ptr)

    Interceptor.attach(g_KextManagerCopyLoadedKextInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: KextManagerCopyLoadedKextInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: KextManagerCopyLoadedKextInfo");
        }
    });        
 
    const g_KextManagerCreateURLForBundleIdentifier_ptr = Module.getExportByName(g_proc_name, 'KextManagerCreateURLForBundleIdentifier');
    console.log("[i] g_KextManagerCreateURLForBundleIdentifier_ptr addr: " + g_KextManagerCreateURLForBundleIdentifier_ptr)

    Interceptor.attach(g_KextManagerCreateURLForBundleIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: KextManagerCreateURLForBundleIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: KextManagerCreateURLForBundleIdentifier");
        }
    });        
 
    const g_KextManagerLoadKextWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'KextManagerLoadKextWithIdentifier');
    console.log("[i] g_KextManagerLoadKextWithIdentifier_ptr addr: " + g_KextManagerLoadKextWithIdentifier_ptr)

    Interceptor.attach(g_KextManagerLoadKextWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: KextManagerLoadKextWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: KextManagerLoadKextWithIdentifier");
        }
    });        
 
    const g_KextManagerLoadKextWithURL_ptr = Module.getExportByName(g_proc_name, 'KextManagerLoadKextWithURL');
    console.log("[i] g_KextManagerLoadKextWithURL_ptr addr: " + g_KextManagerLoadKextWithURL_ptr)

    Interceptor.attach(g_KextManagerLoadKextWithURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: KextManagerLoadKextWithURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: KextManagerLoadKextWithURL");
        }
    });        
 
    const g_KextManagerUnloadKextWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'KextManagerUnloadKextWithIdentifier');
    console.log("[i] g_KextManagerUnloadKextWithIdentifier_ptr addr: " + g_KextManagerUnloadKextWithIdentifier_ptr)

    Interceptor.attach(g_KextManagerUnloadKextWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: KextManagerUnloadKextWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: KextManagerUnloadKextWithIdentifier");
        }
    });        
 
    const g_NXClickTime_ptr = Module.getExportByName(g_proc_name, 'NXClickTime');
    console.log("[i] g_NXClickTime_ptr addr: " + g_NXClickTime_ptr)

    Interceptor.attach(g_NXClickTime_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXClickTime")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXClickTime");
        }
    });        
 
    const g_NXCloseEventStatus_ptr = Module.getExportByName(g_proc_name, 'NXCloseEventStatus');
    console.log("[i] g_NXCloseEventStatus_ptr addr: " + g_NXCloseEventStatus_ptr)

    Interceptor.attach(g_NXCloseEventStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXCloseEventStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXCloseEventStatus");
        }
    });        
 
    const g_NXEventSystemInfo_ptr = Module.getExportByName(g_proc_name, 'NXEventSystemInfo');
    console.log("[i] g_NXEventSystemInfo_ptr addr: " + g_NXEventSystemInfo_ptr)

    Interceptor.attach(g_NXEventSystemInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXEventSystemInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXEventSystemInfo");
        }
    });        
 
    const g_NXGetClickSpace_ptr = Module.getExportByName(g_proc_name, 'NXGetClickSpace');
    console.log("[i] g_NXGetClickSpace_ptr addr: " + g_NXGetClickSpace_ptr)

    Interceptor.attach(g_NXGetClickSpace_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXGetClickSpace")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXGetClickSpace");
        }
    });        
 
    const g_NXGetKeyMapping_ptr = Module.getExportByName(g_proc_name, 'NXGetKeyMapping');
    console.log("[i] g_NXGetKeyMapping_ptr addr: " + g_NXGetKeyMapping_ptr)

    Interceptor.attach(g_NXGetKeyMapping_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXGetKeyMapping")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXGetKeyMapping");
        }
    });        
 
    const g_NXKeyMappingLength_ptr = Module.getExportByName(g_proc_name, 'NXKeyMappingLength');
    console.log("[i] g_NXKeyMappingLength_ptr addr: " + g_NXKeyMappingLength_ptr)

    Interceptor.attach(g_NXKeyMappingLength_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXKeyMappingLength")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXKeyMappingLength");
        }
    });        
 
    const g_NXKeyRepeatInterval_ptr = Module.getExportByName(g_proc_name, 'NXKeyRepeatInterval');
    console.log("[i] g_NXKeyRepeatInterval_ptr addr: " + g_NXKeyRepeatInterval_ptr)

    Interceptor.attach(g_NXKeyRepeatInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXKeyRepeatInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXKeyRepeatInterval");
        }
    });        
 
    const g_NXKeyRepeatThreshold_ptr = Module.getExportByName(g_proc_name, 'NXKeyRepeatThreshold');
    console.log("[i] g_NXKeyRepeatThreshold_ptr addr: " + g_NXKeyRepeatThreshold_ptr)

    Interceptor.attach(g_NXKeyRepeatThreshold_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXKeyRepeatThreshold")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXKeyRepeatThreshold");
        }
    });        
 
    const g_NXOpenEventStatus_ptr = Module.getExportByName(g_proc_name, 'NXOpenEventStatus');
    console.log("[i] g_NXOpenEventStatus_ptr addr: " + g_NXOpenEventStatus_ptr)

    Interceptor.attach(g_NXOpenEventStatus_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXOpenEventStatus")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXOpenEventStatus");
        }
    });        
 
    const g_NXResetKeyboard_ptr = Module.getExportByName(g_proc_name, 'NXResetKeyboard');
    console.log("[i] g_NXResetKeyboard_ptr addr: " + g_NXResetKeyboard_ptr)

    Interceptor.attach(g_NXResetKeyboard_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXResetKeyboard")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXResetKeyboard");
        }
    });        
 
    const g_NXResetMouse_ptr = Module.getExportByName(g_proc_name, 'NXResetMouse');
    console.log("[i] g_NXResetMouse_ptr addr: " + g_NXResetMouse_ptr)

    Interceptor.attach(g_NXResetMouse_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXResetMouse")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXResetMouse");
        }
    });        
 
    const g_NXSetClickSpace_ptr = Module.getExportByName(g_proc_name, 'NXSetClickSpace');
    console.log("[i] g_NXSetClickSpace_ptr addr: " + g_NXSetClickSpace_ptr)

    Interceptor.attach(g_NXSetClickSpace_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXSetClickSpace")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXSetClickSpace");
        }
    });        
 
    const g_NXSetClickTime_ptr = Module.getExportByName(g_proc_name, 'NXSetClickTime');
    console.log("[i] g_NXSetClickTime_ptr addr: " + g_NXSetClickTime_ptr)

    Interceptor.attach(g_NXSetClickTime_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXSetClickTime")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXSetClickTime");
        }
    });        
 
    const g_NXSetKeyMapping_ptr = Module.getExportByName(g_proc_name, 'NXSetKeyMapping');
    console.log("[i] g_NXSetKeyMapping_ptr addr: " + g_NXSetKeyMapping_ptr)

    Interceptor.attach(g_NXSetKeyMapping_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXSetKeyMapping")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXSetKeyMapping");
        }
    });        
 
    const g_NXSetKeyRepeatInterval_ptr = Module.getExportByName(g_proc_name, 'NXSetKeyRepeatInterval');
    console.log("[i] g_NXSetKeyRepeatInterval_ptr addr: " + g_NXSetKeyRepeatInterval_ptr)

    Interceptor.attach(g_NXSetKeyRepeatInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXSetKeyRepeatInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXSetKeyRepeatInterval");
        }
    });        
 
    const g_NXSetKeyRepeatThreshold_ptr = Module.getExportByName(g_proc_name, 'NXSetKeyRepeatThreshold');
    console.log("[i] g_NXSetKeyRepeatThreshold_ptr addr: " + g_NXSetKeyRepeatThreshold_ptr)

    Interceptor.attach(g_NXSetKeyRepeatThreshold_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: NXSetKeyRepeatThreshold")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: NXSetKeyRepeatThreshold");
        }
    });        
 
    const g_OSGetNotificationFromMessage_ptr = Module.getExportByName(g_proc_name, 'OSGetNotificationFromMessage');
    console.log("[i] g_OSGetNotificationFromMessage_ptr addr: " + g_OSGetNotificationFromMessage_ptr)

    Interceptor.attach(g_OSGetNotificationFromMessage_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSGetNotificationFromMessage")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSGetNotificationFromMessage");
        }
    });        
 
    const g_OSKextAuthenticate_ptr = Module.getExportByName(g_proc_name, 'OSKextAuthenticate');
    console.log("[i] g_OSKextAuthenticate_ptr addr: " + g_OSKextAuthenticate_ptr)

    Interceptor.attach(g_OSKextAuthenticate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextAuthenticate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextAuthenticate");
        }
    });        
 
    const g_OSKextAuthenticateDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextAuthenticateDependencies');
    console.log("[i] g_OSKextAuthenticateDependencies_ptr addr: " + g_OSKextAuthenticateDependencies_ptr)

    Interceptor.attach(g_OSKextAuthenticateDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextAuthenticateDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextAuthenticateDependencies");
        }
    });        
 
    const g_OSKextCopyAllDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyAllDependencies');
    console.log("[i] g_OSKextCopyAllDependencies_ptr addr: " + g_OSKextCopyAllDependencies_ptr)

    Interceptor.attach(g_OSKextCopyAllDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyAllDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyAllDependencies");
        }
    });        
 
    const g_OSKextCopyAllRequestedIdentifiers_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyAllRequestedIdentifiers');
    console.log("[i] g_OSKextCopyAllRequestedIdentifiers_ptr addr: " + g_OSKextCopyAllRequestedIdentifiers_ptr)

    Interceptor.attach(g_OSKextCopyAllRequestedIdentifiers_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyAllRequestedIdentifiers")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyAllRequestedIdentifiers");
        }
    });        
 
    const g_OSKextCopyArchitectures_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyArchitectures');
    console.log("[i] g_OSKextCopyArchitectures_ptr addr: " + g_OSKextCopyArchitectures_ptr)

    Interceptor.attach(g_OSKextCopyArchitectures_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyArchitectures")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyArchitectures");
        }
    });        
 
    const g_OSKextCopyContainerForPluginKext_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyContainerForPluginKext');
    console.log("[i] g_OSKextCopyContainerForPluginKext_ptr addr: " + g_OSKextCopyContainerForPluginKext_ptr)

    Interceptor.attach(g_OSKextCopyContainerForPluginKext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyContainerForPluginKext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyContainerForPluginKext");
        }
    });        
 
    const g_OSKextCopyDeclaredDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyDeclaredDependencies');
    console.log("[i] g_OSKextCopyDeclaredDependencies_ptr addr: " + g_OSKextCopyDeclaredDependencies_ptr)

    Interceptor.attach(g_OSKextCopyDeclaredDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyDeclaredDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyDeclaredDependencies");
        }
    });        
 
    const g_OSKextCopyDependents_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyDependents');
    console.log("[i] g_OSKextCopyDependents_ptr addr: " + g_OSKextCopyDependents_ptr)

    Interceptor.attach(g_OSKextCopyDependents_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyDependents")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyDependents");
        }
    });        
 
    const g_OSKextCopyDiagnostics_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyDiagnostics');
    console.log("[i] g_OSKextCopyDiagnostics_ptr addr: " + g_OSKextCopyDiagnostics_ptr)

    Interceptor.attach(g_OSKextCopyDiagnostics_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyDiagnostics")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyDiagnostics");
        }
    });        
 
    const g_OSKextCopyExecutableForArchitecture_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyExecutableForArchitecture');
    console.log("[i] g_OSKextCopyExecutableForArchitecture_ptr addr: " + g_OSKextCopyExecutableForArchitecture_ptr)

    Interceptor.attach(g_OSKextCopyExecutableForArchitecture_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyExecutableForArchitecture")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyExecutableForArchitecture");
        }
    });        
 
    const g_OSKextCopyExecutableName_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyExecutableName');
    console.log("[i] g_OSKextCopyExecutableName_ptr addr: " + g_OSKextCopyExecutableName_ptr)

    Interceptor.attach(g_OSKextCopyExecutableName_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyExecutableName")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyExecutableName");
        }
    });        
 
    const g_OSKextCopyIndirectDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyIndirectDependencies');
    console.log("[i] g_OSKextCopyIndirectDependencies_ptr addr: " + g_OSKextCopyIndirectDependencies_ptr)

    Interceptor.attach(g_OSKextCopyIndirectDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyIndirectDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyIndirectDependencies");
        }
    });        
 
    const g_OSKextCopyInfoDictionary_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyInfoDictionary');
    console.log("[i] g_OSKextCopyInfoDictionary_ptr addr: " + g_OSKextCopyInfoDictionary_ptr)

    Interceptor.attach(g_OSKextCopyInfoDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyInfoDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyInfoDictionary");
        }
    });        
 
    const g_OSKextCopyKextsWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyKextsWithIdentifier');
    console.log("[i] g_OSKextCopyKextsWithIdentifier_ptr addr: " + g_OSKextCopyKextsWithIdentifier_ptr)

    Interceptor.attach(g_OSKextCopyKextsWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyKextsWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyKextsWithIdentifier");
        }
    });        
 
    const g_OSKextCopyKextsWithIdentifiers_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyKextsWithIdentifiers');
    console.log("[i] g_OSKextCopyKextsWithIdentifiers_ptr addr: " + g_OSKextCopyKextsWithIdentifiers_ptr)

    Interceptor.attach(g_OSKextCopyKextsWithIdentifiers_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyKextsWithIdentifiers")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyKextsWithIdentifiers");
        }
    });        
 
    const g_OSKextCopyLinkDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyLinkDependencies');
    console.log("[i] g_OSKextCopyLinkDependencies_ptr addr: " + g_OSKextCopyLinkDependencies_ptr)

    Interceptor.attach(g_OSKextCopyLinkDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyLinkDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyLinkDependencies");
        }
    });        
 
    const g_OSKextCopyLoadList_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyLoadList');
    console.log("[i] g_OSKextCopyLoadList_ptr addr: " + g_OSKextCopyLoadList_ptr)

    Interceptor.attach(g_OSKextCopyLoadList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyLoadList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyLoadList");
        }
    });        
 
    const g_OSKextCopyLoadListForKexts_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyLoadListForKexts');
    console.log("[i] g_OSKextCopyLoadListForKexts_ptr addr: " + g_OSKextCopyLoadListForKexts_ptr)

    Interceptor.attach(g_OSKextCopyLoadListForKexts_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyLoadListForKexts")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyLoadListForKexts");
        }
    });        
 
    const g_OSKextCopyLoadedKextInfo_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyLoadedKextInfo');
    console.log("[i] g_OSKextCopyLoadedKextInfo_ptr addr: " + g_OSKextCopyLoadedKextInfo_ptr)

    Interceptor.attach(g_OSKextCopyLoadedKextInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyLoadedKextInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyLoadedKextInfo");
        }
    });        
 
    const g_OSKextCopyLoadedKextInfoByUUID_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyLoadedKextInfoByUUID');
    console.log("[i] g_OSKextCopyLoadedKextInfoByUUID_ptr addr: " + g_OSKextCopyLoadedKextInfoByUUID_ptr)

    Interceptor.attach(g_OSKextCopyLoadedKextInfoByUUID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyLoadedKextInfoByUUID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyLoadedKextInfoByUUID");
        }
    });        
 
    const g_OSKextCopyPersonalitiesArray_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyPersonalitiesArray');
    console.log("[i] g_OSKextCopyPersonalitiesArray_ptr addr: " + g_OSKextCopyPersonalitiesArray_ptr)

    Interceptor.attach(g_OSKextCopyPersonalitiesArray_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyPersonalitiesArray")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyPersonalitiesArray");
        }
    });        
 
    const g_OSKextCopyPersonalitiesOfKexts_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyPersonalitiesOfKexts');
    console.log("[i] g_OSKextCopyPersonalitiesOfKexts_ptr addr: " + g_OSKextCopyPersonalitiesOfKexts_ptr)

    Interceptor.attach(g_OSKextCopyPersonalitiesOfKexts_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyPersonalitiesOfKexts")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyPersonalitiesOfKexts");
        }
    });        
 
    const g_OSKextCopyPlugins_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyPlugins');
    console.log("[i] g_OSKextCopyPlugins_ptr addr: " + g_OSKextCopyPlugins_ptr)

    Interceptor.attach(g_OSKextCopyPlugins_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyPlugins")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyPlugins");
        }
    });        
 
    const g_OSKextCopyResource_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyResource');
    console.log("[i] g_OSKextCopyResource_ptr addr: " + g_OSKextCopyResource_ptr)

    Interceptor.attach(g_OSKextCopyResource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyResource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyResource");
        }
    });        
 
    const g_OSKextCopySymbolReferences_ptr = Module.getExportByName(g_proc_name, 'OSKextCopySymbolReferences');
    console.log("[i] g_OSKextCopySymbolReferences_ptr addr: " + g_OSKextCopySymbolReferences_ptr)

    Interceptor.attach(g_OSKextCopySymbolReferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopySymbolReferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopySymbolReferences");
        }
    });        
 
    const g_OSKextCopyUUIDForAddress_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyUUIDForAddress');
    console.log("[i] g_OSKextCopyUUIDForAddress_ptr addr: " + g_OSKextCopyUUIDForAddress_ptr)

    Interceptor.attach(g_OSKextCopyUUIDForAddress_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyUUIDForAddress")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyUUIDForAddress");
        }
    });        
 
    const g_OSKextCopyUUIDForArchitecture_ptr = Module.getExportByName(g_proc_name, 'OSKextCopyUUIDForArchitecture');
    console.log("[i] g_OSKextCopyUUIDForArchitecture_ptr addr: " + g_OSKextCopyUUIDForArchitecture_ptr)

    Interceptor.attach(g_OSKextCopyUUIDForArchitecture_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCopyUUIDForArchitecture")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCopyUUIDForArchitecture");
        }
    });        
 
    const g_OSKextCreate_ptr = Module.getExportByName(g_proc_name, 'OSKextCreate');
    console.log("[i] g_OSKextCreate_ptr addr: " + g_OSKextCreate_ptr)

    Interceptor.attach(g_OSKextCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreate");
        }
    });        
 
    const g_OSKextCreateKextsFromMkextData_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateKextsFromMkextData');
    console.log("[i] g_OSKextCreateKextsFromMkextData_ptr addr: " + g_OSKextCreateKextsFromMkextData_ptr)

    Interceptor.attach(g_OSKextCreateKextsFromMkextData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateKextsFromMkextData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateKextsFromMkextData");
        }
    });        
 
    const g_OSKextCreateKextsFromMkextFile_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateKextsFromMkextFile');
    console.log("[i] g_OSKextCreateKextsFromMkextFile_ptr addr: " + g_OSKextCreateKextsFromMkextFile_ptr)

    Interceptor.attach(g_OSKextCreateKextsFromMkextFile_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateKextsFromMkextFile")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateKextsFromMkextFile");
        }
    });        
 
    const g_OSKextCreateKextsFromURL_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateKextsFromURL');
    console.log("[i] g_OSKextCreateKextsFromURL_ptr addr: " + g_OSKextCreateKextsFromURL_ptr)

    Interceptor.attach(g_OSKextCreateKextsFromURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateKextsFromURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateKextsFromURL");
        }
    });        
 
    const g_OSKextCreateKextsFromURLs_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateKextsFromURLs');
    console.log("[i] g_OSKextCreateKextsFromURLs_ptr addr: " + g_OSKextCreateKextsFromURLs_ptr)

    Interceptor.attach(g_OSKextCreateKextsFromURLs_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateKextsFromURLs")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateKextsFromURLs");
        }
    });        
 
    const g_OSKextCreateLoadedKextInfo_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateLoadedKextInfo');
    console.log("[i] g_OSKextCreateLoadedKextInfo_ptr addr: " + g_OSKextCreateLoadedKextInfo_ptr)

    Interceptor.attach(g_OSKextCreateLoadedKextInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateLoadedKextInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateLoadedKextInfo");
        }
    });        
 
    const g_OSKextCreateMkext_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateMkext');
    console.log("[i] g_OSKextCreateMkext_ptr addr: " + g_OSKextCreateMkext_ptr)

    Interceptor.attach(g_OSKextCreateMkext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateMkext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateMkext");
        }
    });        
 
    const g_OSKextCreatePrelinkedKernel_ptr = Module.getExportByName(g_proc_name, 'OSKextCreatePrelinkedKernel');
    console.log("[i] g_OSKextCreatePrelinkedKernel_ptr addr: " + g_OSKextCreatePrelinkedKernel_ptr)

    Interceptor.attach(g_OSKextCreatePrelinkedKernel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreatePrelinkedKernel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreatePrelinkedKernel");
        }
    });        
 
    const g_OSKextCreateWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextCreateWithIdentifier');
    console.log("[i] g_OSKextCreateWithIdentifier_ptr addr: " + g_OSKextCreateWithIdentifier_ptr)

    Interceptor.attach(g_OSKextCreateWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextCreateWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextCreateWithIdentifier");
        }
    });        
 
    const g_OSKextDeclaresExecutable_ptr = Module.getExportByName(g_proc_name, 'OSKextDeclaresExecutable');
    console.log("[i] g_OSKextDeclaresExecutable_ptr addr: " + g_OSKextDeclaresExecutable_ptr)

    Interceptor.attach(g_OSKextDeclaresExecutable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextDeclaresExecutable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextDeclaresExecutable");
        }
    });        
 
    const g_OSKextDeclaresUserExecutable_ptr = Module.getExportByName(g_proc_name, 'OSKextDeclaresUserExecutable');
    console.log("[i] g_OSKextDeclaresUserExecutable_ptr addr: " + g_OSKextDeclaresUserExecutable_ptr)

    Interceptor.attach(g_OSKextDeclaresUserExecutable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextDeclaresUserExecutable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextDeclaresUserExecutable");
        }
    });        
 
    const g_OSKextDependenciesAreLoadableInSafeBoot_ptr = Module.getExportByName(g_proc_name, 'OSKextDependenciesAreLoadableInSafeBoot');
    console.log("[i] g_OSKextDependenciesAreLoadableInSafeBoot_ptr addr: " + g_OSKextDependenciesAreLoadableInSafeBoot_ptr)

    Interceptor.attach(g_OSKextDependenciesAreLoadableInSafeBoot_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextDependenciesAreLoadableInSafeBoot")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextDependenciesAreLoadableInSafeBoot");
        }
    });        
 
    const g_OSKextDependsOnKext_ptr = Module.getExportByName(g_proc_name, 'OSKextDependsOnKext');
    console.log("[i] g_OSKextDependsOnKext_ptr addr: " + g_OSKextDependsOnKext_ptr)

    Interceptor.attach(g_OSKextDependsOnKext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextDependsOnKext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextDependsOnKext");
        }
    });        
 
    const g_OSKextFilterRequiredKexts_ptr = Module.getExportByName(g_proc_name, 'OSKextFilterRequiredKexts');
    console.log("[i] g_OSKextFilterRequiredKexts_ptr addr: " + g_OSKextFilterRequiredKexts_ptr)

    Interceptor.attach(g_OSKextFilterRequiredKexts_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextFilterRequiredKexts")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextFilterRequiredKexts");
        }
    });        
 
    const g_OSKextFindLinkDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextFindLinkDependencies');
    console.log("[i] g_OSKextFindLinkDependencies_ptr addr: " + g_OSKextFindLinkDependencies_ptr)

    Interceptor.attach(g_OSKextFindLinkDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextFindLinkDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextFindLinkDependencies");
        }
    });        
 
    const g_OSKextFlushDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextFlushDependencies');
    console.log("[i] g_OSKextFlushDependencies_ptr addr: " + g_OSKextFlushDependencies_ptr)

    Interceptor.attach(g_OSKextFlushDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextFlushDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextFlushDependencies");
        }
    });        
 
    const g_OSKextFlushDiagnostics_ptr = Module.getExportByName(g_proc_name, 'OSKextFlushDiagnostics');
    console.log("[i] g_OSKextFlushDiagnostics_ptr addr: " + g_OSKextFlushDiagnostics_ptr)

    Interceptor.attach(g_OSKextFlushDiagnostics_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextFlushDiagnostics")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextFlushDiagnostics");
        }
    });        
 
    const g_OSKextFlushInfoDictionary_ptr = Module.getExportByName(g_proc_name, 'OSKextFlushInfoDictionary');
    console.log("[i] g_OSKextFlushInfoDictionary_ptr addr: " + g_OSKextFlushInfoDictionary_ptr)

    Interceptor.attach(g_OSKextFlushInfoDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextFlushInfoDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextFlushInfoDictionary");
        }
    });        
 
    const g_OSKextFlushLoadInfo_ptr = Module.getExportByName(g_proc_name, 'OSKextFlushLoadInfo');
    console.log("[i] g_OSKextFlushLoadInfo_ptr addr: " + g_OSKextFlushLoadInfo_ptr)

    Interceptor.attach(g_OSKextFlushLoadInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextFlushLoadInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextFlushLoadInfo");
        }
    });        
 
    const g_OSKextGenerateDebugSymbols_ptr = Module.getExportByName(g_proc_name, 'OSKextGenerateDebugSymbols');
    console.log("[i] g_OSKextGenerateDebugSymbols_ptr addr: " + g_OSKextGenerateDebugSymbols_ptr)

    Interceptor.attach(g_OSKextGenerateDebugSymbols_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGenerateDebugSymbols")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGenerateDebugSymbols");
        }
    });        
 
    const g_OSKextGetActualSafeBoot_ptr = Module.getExportByName(g_proc_name, 'OSKextGetActualSafeBoot');
    console.log("[i] g_OSKextGetActualSafeBoot_ptr addr: " + g_OSKextGetActualSafeBoot_ptr)

    Interceptor.attach(g_OSKextGetActualSafeBoot_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetActualSafeBoot")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetActualSafeBoot");
        }
    });        
 
    const g_OSKextGetAllKexts_ptr = Module.getExportByName(g_proc_name, 'OSKextGetAllKexts');
    console.log("[i] g_OSKextGetAllKexts_ptr addr: " + g_OSKextGetAllKexts_ptr)

    Interceptor.attach(g_OSKextGetAllKexts_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetAllKexts")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetAllKexts");
        }
    });        
 
    const g_OSKextGetArchitecture_ptr = Module.getExportByName(g_proc_name, 'OSKextGetArchitecture');
    console.log("[i] g_OSKextGetArchitecture_ptr addr: " + g_OSKextGetArchitecture_ptr)

    Interceptor.attach(g_OSKextGetArchitecture_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetArchitecture")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetArchitecture");
        }
    });        
 
    const g_OSKextGetCompatibleKextWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextGetCompatibleKextWithIdentifier');
    console.log("[i] g_OSKextGetCompatibleKextWithIdentifier_ptr addr: " + g_OSKextGetCompatibleKextWithIdentifier_ptr)

    Interceptor.attach(g_OSKextGetCompatibleKextWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetCompatibleKextWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetCompatibleKextWithIdentifier");
        }
    });        
 
    const g_OSKextGetCompatibleVersion_ptr = Module.getExportByName(g_proc_name, 'OSKextGetCompatibleVersion');
    console.log("[i] g_OSKextGetCompatibleVersion_ptr addr: " + g_OSKextGetCompatibleVersion_ptr)

    Interceptor.attach(g_OSKextGetCompatibleVersion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetCompatibleVersion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetCompatibleVersion");
        }
    });        
 
    const g_OSKextGetExecutableURL_ptr = Module.getExportByName(g_proc_name, 'OSKextGetExecutableURL');
    console.log("[i] g_OSKextGetExecutableURL_ptr addr: " + g_OSKextGetExecutableURL_ptr)

    Interceptor.attach(g_OSKextGetExecutableURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetExecutableURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetExecutableURL");
        }
    });        
 
    const g_OSKextGetIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextGetIdentifier');
    console.log("[i] g_OSKextGetIdentifier_ptr addr: " + g_OSKextGetIdentifier_ptr)

    Interceptor.attach(g_OSKextGetIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetIdentifier");
        }
    });        
 
    const g_OSKextGetKernelExecutableURL_ptr = Module.getExportByName(g_proc_name, 'OSKextGetKernelExecutableURL');
    console.log("[i] g_OSKextGetKernelExecutableURL_ptr addr: " + g_OSKextGetKernelExecutableURL_ptr)

    Interceptor.attach(g_OSKextGetKernelExecutableURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetKernelExecutableURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetKernelExecutableURL");
        }
    });        
 
    const g_OSKextGetKextWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextGetKextWithIdentifier');
    console.log("[i] g_OSKextGetKextWithIdentifier_ptr addr: " + g_OSKextGetKextWithIdentifier_ptr)

    Interceptor.attach(g_OSKextGetKextWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetKextWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetKextWithIdentifier");
        }
    });        
 
    const g_OSKextGetKextWithIdentifierAndVersion_ptr = Module.getExportByName(g_proc_name, 'OSKextGetKextWithIdentifierAndVersion');
    console.log("[i] g_OSKextGetKextWithIdentifierAndVersion_ptr addr: " + g_OSKextGetKextWithIdentifierAndVersion_ptr)

    Interceptor.attach(g_OSKextGetKextWithIdentifierAndVersion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetKextWithIdentifierAndVersion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetKextWithIdentifierAndVersion");
        }
    });        
 
    const g_OSKextGetKextWithURL_ptr = Module.getExportByName(g_proc_name, 'OSKextGetKextWithURL');
    console.log("[i] g_OSKextGetKextWithURL_ptr addr: " + g_OSKextGetKextWithURL_ptr)

    Interceptor.attach(g_OSKextGetKextWithURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetKextWithURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetKextWithURL");
        }
    });        
 
    const g_OSKextGetLoadAddress_ptr = Module.getExportByName(g_proc_name, 'OSKextGetLoadAddress');
    console.log("[i] g_OSKextGetLoadAddress_ptr addr: " + g_OSKextGetLoadAddress_ptr)

    Interceptor.attach(g_OSKextGetLoadAddress_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetLoadAddress")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetLoadAddress");
        }
    });        
 
    const g_OSKextGetLoadTag_ptr = Module.getExportByName(g_proc_name, 'OSKextGetLoadTag');
    console.log("[i] g_OSKextGetLoadTag_ptr addr: " + g_OSKextGetLoadTag_ptr)

    Interceptor.attach(g_OSKextGetLoadTag_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetLoadTag")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetLoadTag");
        }
    });        
 
    const g_OSKextGetLoadedKextWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextGetLoadedKextWithIdentifier');
    console.log("[i] g_OSKextGetLoadedKextWithIdentifier_ptr addr: " + g_OSKextGetLoadedKextWithIdentifier_ptr)

    Interceptor.attach(g_OSKextGetLoadedKextWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetLoadedKextWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetLoadedKextWithIdentifier");
        }
    });        
 
    const g_OSKextGetLogFilter_ptr = Module.getExportByName(g_proc_name, 'OSKextGetLogFilter');
    console.log("[i] g_OSKextGetLogFilter_ptr addr: " + g_OSKextGetLogFilter_ptr)

    Interceptor.attach(g_OSKextGetLogFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetLogFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetLogFilter");
        }
    });        
 
    const g_OSKextGetRecordsDiagnostics_ptr = Module.getExportByName(g_proc_name, 'OSKextGetRecordsDiagnostics');
    console.log("[i] g_OSKextGetRecordsDiagnostics_ptr addr: " + g_OSKextGetRecordsDiagnostics_ptr)

    Interceptor.attach(g_OSKextGetRecordsDiagnostics_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetRecordsDiagnostics")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetRecordsDiagnostics");
        }
    });        
 
    const g_OSKextGetRunningKernelArchitecture_ptr = Module.getExportByName(g_proc_name, 'OSKextGetRunningKernelArchitecture');
    console.log("[i] g_OSKextGetRunningKernelArchitecture_ptr addr: " + g_OSKextGetRunningKernelArchitecture_ptr)

    Interceptor.attach(g_OSKextGetRunningKernelArchitecture_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetRunningKernelArchitecture")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetRunningKernelArchitecture");
        }
    });        
 
    const g_OSKextGetSimulatedSafeBoot_ptr = Module.getExportByName(g_proc_name, 'OSKextGetSimulatedSafeBoot');
    console.log("[i] g_OSKextGetSimulatedSafeBoot_ptr addr: " + g_OSKextGetSimulatedSafeBoot_ptr)

    Interceptor.attach(g_OSKextGetSimulatedSafeBoot_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetSimulatedSafeBoot")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetSimulatedSafeBoot");
        }
    });        
 
    const g_OSKextGetSystemExtensionsFolderURLs_ptr = Module.getExportByName(g_proc_name, 'OSKextGetSystemExtensionsFolderURLs');
    console.log("[i] g_OSKextGetSystemExtensionsFolderURLs_ptr addr: " + g_OSKextGetSystemExtensionsFolderURLs_ptr)

    Interceptor.attach(g_OSKextGetSystemExtensionsFolderURLs_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetSystemExtensionsFolderURLs")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetSystemExtensionsFolderURLs");
        }
    });        
 
    const g_OSKextGetTargetString_ptr = Module.getExportByName(g_proc_name, 'OSKextGetTargetString');
    console.log("[i] g_OSKextGetTargetString_ptr addr: " + g_OSKextGetTargetString_ptr)

    Interceptor.attach(g_OSKextGetTargetString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetTargetString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetTargetString");
        }
    });        
 
    const g_OSKextGetTypeID_ptr = Module.getExportByName(g_proc_name, 'OSKextGetTypeID');
    console.log("[i] g_OSKextGetTypeID_ptr addr: " + g_OSKextGetTypeID_ptr)

    Interceptor.attach(g_OSKextGetTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetTypeID");
        }
    });        
 
    const g_OSKextGetURL_ptr = Module.getExportByName(g_proc_name, 'OSKextGetURL');
    console.log("[i] g_OSKextGetURL_ptr addr: " + g_OSKextGetURL_ptr)

    Interceptor.attach(g_OSKextGetURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetURL");
        }
    });        
 
    const g_OSKextGetUserExecutableURL_ptr = Module.getExportByName(g_proc_name, 'OSKextGetUserExecutableURL');
    console.log("[i] g_OSKextGetUserExecutableURL_ptr addr: " + g_OSKextGetUserExecutableURL_ptr)

    Interceptor.attach(g_OSKextGetUserExecutableURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetUserExecutableURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetUserExecutableURL");
        }
    });        
 
    const g_OSKextGetUsesCaches_ptr = Module.getExportByName(g_proc_name, 'OSKextGetUsesCaches');
    console.log("[i] g_OSKextGetUsesCaches_ptr addr: " + g_OSKextGetUsesCaches_ptr)

    Interceptor.attach(g_OSKextGetUsesCaches_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetUsesCaches")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetUsesCaches");
        }
    });        
 
    const g_OSKextGetValueForInfoDictionaryKey_ptr = Module.getExportByName(g_proc_name, 'OSKextGetValueForInfoDictionaryKey');
    console.log("[i] g_OSKextGetValueForInfoDictionaryKey_ptr addr: " + g_OSKextGetValueForInfoDictionaryKey_ptr)

    Interceptor.attach(g_OSKextGetValueForInfoDictionaryKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetValueForInfoDictionaryKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetValueForInfoDictionaryKey");
        }
    });        
 
    const g_OSKextGetVersion_ptr = Module.getExportByName(g_proc_name, 'OSKextGetVersion');
    console.log("[i] g_OSKextGetVersion_ptr addr: " + g_OSKextGetVersion_ptr)

    Interceptor.attach(g_OSKextGetVersion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextGetVersion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextGetVersion");
        }
    });        
 
    const g_OSKextHasLogOrDebugFlags_ptr = Module.getExportByName(g_proc_name, 'OSKextHasLogOrDebugFlags');
    console.log("[i] g_OSKextHasLogOrDebugFlags_ptr addr: " + g_OSKextHasLogOrDebugFlags_ptr)

    Interceptor.attach(g_OSKextHasLogOrDebugFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextHasLogOrDebugFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextHasLogOrDebugFlags");
        }
    });        
 
    const g_OSKextIsAuthentic_ptr = Module.getExportByName(g_proc_name, 'OSKextIsAuthentic');
    console.log("[i] g_OSKextIsAuthentic_ptr addr: " + g_OSKextIsAuthentic_ptr)

    Interceptor.attach(g_OSKextIsAuthentic_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsAuthentic")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsAuthentic");
        }
    });        
 
    const g_OSKextIsCompatibleWithVersion_ptr = Module.getExportByName(g_proc_name, 'OSKextIsCompatibleWithVersion');
    console.log("[i] g_OSKextIsCompatibleWithVersion_ptr addr: " + g_OSKextIsCompatibleWithVersion_ptr)

    Interceptor.attach(g_OSKextIsCompatibleWithVersion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsCompatibleWithVersion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsCompatibleWithVersion");
        }
    });        
 
    const g_OSKextIsFromMkext_ptr = Module.getExportByName(g_proc_name, 'OSKextIsFromMkext');
    console.log("[i] g_OSKextIsFromMkext_ptr addr: " + g_OSKextIsFromMkext_ptr)

    Interceptor.attach(g_OSKextIsFromMkext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsFromMkext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsFromMkext");
        }
    });        
 
    const g_OSKextIsInExcludeList_ptr = Module.getExportByName(g_proc_name, 'OSKextIsInExcludeList');
    console.log("[i] g_OSKextIsInExcludeList_ptr addr: " + g_OSKextIsInExcludeList_ptr)

    Interceptor.attach(g_OSKextIsInExcludeList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsInExcludeList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsInExcludeList");
        }
    });        
 
    const g_OSKextIsInterface_ptr = Module.getExportByName(g_proc_name, 'OSKextIsInterface');
    console.log("[i] g_OSKextIsInterface_ptr addr: " + g_OSKextIsInterface_ptr)

    Interceptor.attach(g_OSKextIsInterface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsInterface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsInterface");
        }
    });        
 
    const g_OSKextIsKernelComponent_ptr = Module.getExportByName(g_proc_name, 'OSKextIsKernelComponent');
    console.log("[i] g_OSKextIsKernelComponent_ptr addr: " + g_OSKextIsKernelComponent_ptr)

    Interceptor.attach(g_OSKextIsKernelComponent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsKernelComponent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsKernelComponent");
        }
    });        
 
    const g_OSKextIsLibrary_ptr = Module.getExportByName(g_proc_name, 'OSKextIsLibrary');
    console.log("[i] g_OSKextIsLibrary_ptr addr: " + g_OSKextIsLibrary_ptr)

    Interceptor.attach(g_OSKextIsLibrary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsLibrary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsLibrary");
        }
    });        
 
    const g_OSKextIsLoadable_ptr = Module.getExportByName(g_proc_name, 'OSKextIsLoadable');
    console.log("[i] g_OSKextIsLoadable_ptr addr: " + g_OSKextIsLoadable_ptr)

    Interceptor.attach(g_OSKextIsLoadable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsLoadable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsLoadable");
        }
    });        
 
    const g_OSKextIsLoadableInSafeBoot_ptr = Module.getExportByName(g_proc_name, 'OSKextIsLoadableInSafeBoot');
    console.log("[i] g_OSKextIsLoadableInSafeBoot_ptr addr: " + g_OSKextIsLoadableInSafeBoot_ptr)

    Interceptor.attach(g_OSKextIsLoadableInSafeBoot_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsLoadableInSafeBoot")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsLoadableInSafeBoot");
        }
    });        
 
    const g_OSKextIsLoaded_ptr = Module.getExportByName(g_proc_name, 'OSKextIsLoaded');
    console.log("[i] g_OSKextIsLoaded_ptr addr: " + g_OSKextIsLoaded_ptr)

    Interceptor.attach(g_OSKextIsLoaded_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsLoaded")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsLoaded");
        }
    });        
 
    const g_OSKextIsLoggingEnabled_ptr = Module.getExportByName(g_proc_name, 'OSKextIsLoggingEnabled');
    console.log("[i] g_OSKextIsLoggingEnabled_ptr addr: " + g_OSKextIsLoggingEnabled_ptr)

    Interceptor.attach(g_OSKextIsLoggingEnabled_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsLoggingEnabled")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsLoggingEnabled");
        }
    });        
 
    const g_OSKextIsPlugin_ptr = Module.getExportByName(g_proc_name, 'OSKextIsPlugin');
    console.log("[i] g_OSKextIsPlugin_ptr addr: " + g_OSKextIsPlugin_ptr)

    Interceptor.attach(g_OSKextIsPlugin_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsPlugin")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsPlugin");
        }
    });        
 
    const g_OSKextIsSigned_ptr = Module.getExportByName(g_proc_name, 'OSKextIsSigned');
    console.log("[i] g_OSKextIsSigned_ptr addr: " + g_OSKextIsSigned_ptr)

    Interceptor.attach(g_OSKextIsSigned_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsSigned")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsSigned");
        }
    });        
 
    const g_OSKextIsStarted_ptr = Module.getExportByName(g_proc_name, 'OSKextIsStarted');
    console.log("[i] g_OSKextIsStarted_ptr addr: " + g_OSKextIsStarted_ptr)

    Interceptor.attach(g_OSKextIsStarted_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsStarted")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsStarted");
        }
    });        
 
    const g_OSKextIsValid_ptr = Module.getExportByName(g_proc_name, 'OSKextIsValid');
    console.log("[i] g_OSKextIsValid_ptr addr: " + g_OSKextIsValid_ptr)

    Interceptor.attach(g_OSKextIsValid_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextIsValid")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextIsValid");
        }
    });        
 
    const g_OSKextLoad_ptr = Module.getExportByName(g_proc_name, 'OSKextLoad');
    console.log("[i] g_OSKextLoad_ptr addr: " + g_OSKextLoad_ptr)

    Interceptor.attach(g_OSKextLoad_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextLoad")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextLoad");
        }
    });        
 
    const g_OSKextLoadWithOptions_ptr = Module.getExportByName(g_proc_name, 'OSKextLoadWithOptions');
    console.log("[i] g_OSKextLoadWithOptions_ptr addr: " + g_OSKextLoadWithOptions_ptr)

    Interceptor.attach(g_OSKextLoadWithOptions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextLoadWithOptions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextLoadWithOptions");
        }
    });        
 
    const g_OSKextLog_ptr = Module.getExportByName(g_proc_name, 'OSKextLog');
    console.log("[i] g_OSKextLog_ptr addr: " + g_OSKextLog_ptr)

    Interceptor.attach(g_OSKextLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextLog");
        }
    });        
 
    const g_OSKextLogCFString_ptr = Module.getExportByName(g_proc_name, 'OSKextLogCFString');
    console.log("[i] g_OSKextLogCFString_ptr addr: " + g_OSKextLogCFString_ptr)

    Interceptor.attach(g_OSKextLogCFString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextLogCFString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextLogCFString");
        }
    });        
 
    const g_OSKextLogDependencyGraph_ptr = Module.getExportByName(g_proc_name, 'OSKextLogDependencyGraph');
    console.log("[i] g_OSKextLogDependencyGraph_ptr addr: " + g_OSKextLogDependencyGraph_ptr)

    Interceptor.attach(g_OSKextLogDependencyGraph_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextLogDependencyGraph")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextLogDependencyGraph");
        }
    });        
 
    const g_OSKextLogDiagnostics_ptr = Module.getExportByName(g_proc_name, 'OSKextLogDiagnostics');
    console.log("[i] g_OSKextLogDiagnostics_ptr addr: " + g_OSKextLogDiagnostics_ptr)

    Interceptor.attach(g_OSKextLogDiagnostics_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextLogDiagnostics")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextLogDiagnostics");
        }
    });        
 
    const g_OSKextMatchesRequiredFlags_ptr = Module.getExportByName(g_proc_name, 'OSKextMatchesRequiredFlags');
    console.log("[i] g_OSKextMatchesRequiredFlags_ptr addr: " + g_OSKextMatchesRequiredFlags_ptr)

    Interceptor.attach(g_OSKextMatchesRequiredFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextMatchesRequiredFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextMatchesRequiredFlags");
        }
    });        
 
    const g_OSKextNeedsLoadAddressForDebugSymbols_ptr = Module.getExportByName(g_proc_name, 'OSKextNeedsLoadAddressForDebugSymbols');
    console.log("[i] g_OSKextNeedsLoadAddressForDebugSymbols_ptr addr: " + g_OSKextNeedsLoadAddressForDebugSymbols_ptr)

    Interceptor.attach(g_OSKextNeedsLoadAddressForDebugSymbols_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextNeedsLoadAddressForDebugSymbols")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextNeedsLoadAddressForDebugSymbols");
        }
    });        
 
    const g_OSKextOtherVersionIsLoaded_ptr = Module.getExportByName(g_proc_name, 'OSKextOtherVersionIsLoaded');
    console.log("[i] g_OSKextOtherVersionIsLoaded_ptr addr: " + g_OSKextOtherVersionIsLoaded_ptr)

    Interceptor.attach(g_OSKextOtherVersionIsLoaded_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextOtherVersionIsLoaded")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextOtherVersionIsLoaded");
        }
    });        
 
    const g_OSKextParseVersionCFString_ptr = Module.getExportByName(g_proc_name, 'OSKextParseVersionCFString');
    console.log("[i] g_OSKextParseVersionCFString_ptr addr: " + g_OSKextParseVersionCFString_ptr)

    Interceptor.attach(g_OSKextParseVersionCFString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextParseVersionCFString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextParseVersionCFString");
        }
    });        
 
    const g_OSKextParseVersionString_ptr = Module.getExportByName(g_proc_name, 'OSKextParseVersionString');
    console.log("[i] g_OSKextParseVersionString_ptr addr: " + g_OSKextParseVersionString_ptr)

    Interceptor.attach(g_OSKextParseVersionString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextParseVersionString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextParseVersionString");
        }
    });        
 
    const g_OSKextReadLoadedKextInfo_ptr = Module.getExportByName(g_proc_name, 'OSKextReadLoadedKextInfo');
    console.log("[i] g_OSKextReadLoadedKextInfo_ptr addr: " + g_OSKextReadLoadedKextInfo_ptr)

    Interceptor.attach(g_OSKextReadLoadedKextInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextReadLoadedKextInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextReadLoadedKextInfo");
        }
    });        
 
    const g_OSKextRemoveKextPersonalitiesFromKernel_ptr = Module.getExportByName(g_proc_name, 'OSKextRemoveKextPersonalitiesFromKernel');
    console.log("[i] g_OSKextRemoveKextPersonalitiesFromKernel_ptr addr: " + g_OSKextRemoveKextPersonalitiesFromKernel_ptr)

    Interceptor.attach(g_OSKextRemoveKextPersonalitiesFromKernel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextRemoveKextPersonalitiesFromKernel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextRemoveKextPersonalitiesFromKernel");
        }
    });        
 
    const g_OSKextRemovePersonalitiesForIdentifierFromKernel_ptr = Module.getExportByName(g_proc_name, 'OSKextRemovePersonalitiesForIdentifierFromKernel');
    console.log("[i] g_OSKextRemovePersonalitiesForIdentifierFromKernel_ptr addr: " + g_OSKextRemovePersonalitiesForIdentifierFromKernel_ptr)

    Interceptor.attach(g_OSKextRemovePersonalitiesForIdentifierFromKernel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextRemovePersonalitiesForIdentifierFromKernel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextRemovePersonalitiesForIdentifierFromKernel");
        }
    });        
 
    const g_OSKextResolveDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextResolveDependencies');
    console.log("[i] g_OSKextResolveDependencies_ptr addr: " + g_OSKextResolveDependencies_ptr)

    Interceptor.attach(g_OSKextResolveDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextResolveDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextResolveDependencies");
        }
    });        
 
    const g_OSKextSendKextPersonalitiesToKernel_ptr = Module.getExportByName(g_proc_name, 'OSKextSendKextPersonalitiesToKernel');
    console.log("[i] g_OSKextSendKextPersonalitiesToKernel_ptr addr: " + g_OSKextSendKextPersonalitiesToKernel_ptr)

    Interceptor.attach(g_OSKextSendKextPersonalitiesToKernel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSendKextPersonalitiesToKernel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSendKextPersonalitiesToKernel");
        }
    });        
 
    const g_OSKextSendPersonalitiesOfKextsToKernel_ptr = Module.getExportByName(g_proc_name, 'OSKextSendPersonalitiesOfKextsToKernel');
    console.log("[i] g_OSKextSendPersonalitiesOfKextsToKernel_ptr addr: " + g_OSKextSendPersonalitiesOfKextsToKernel_ptr)

    Interceptor.attach(g_OSKextSendPersonalitiesOfKextsToKernel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSendPersonalitiesOfKextsToKernel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSendPersonalitiesOfKextsToKernel");
        }
    });        
 
    const g_OSKextSendPersonalitiesToKernel_ptr = Module.getExportByName(g_proc_name, 'OSKextSendPersonalitiesToKernel');
    console.log("[i] g_OSKextSendPersonalitiesToKernel_ptr addr: " + g_OSKextSendPersonalitiesToKernel_ptr)

    Interceptor.attach(g_OSKextSendPersonalitiesToKernel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSendPersonalitiesToKernel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSendPersonalitiesToKernel");
        }
    });        
 
    const g_OSKextSetArchitecture_ptr = Module.getExportByName(g_proc_name, 'OSKextSetArchitecture');
    console.log("[i] g_OSKextSetArchitecture_ptr addr: " + g_OSKextSetArchitecture_ptr)

    Interceptor.attach(g_OSKextSetArchitecture_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetArchitecture")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetArchitecture");
        }
    });        
 
    const g_OSKextSetExecutableSuffix_ptr = Module.getExportByName(g_proc_name, 'OSKextSetExecutableSuffix');
    console.log("[i] g_OSKextSetExecutableSuffix_ptr addr: " + g_OSKextSetExecutableSuffix_ptr)

    Interceptor.attach(g_OSKextSetExecutableSuffix_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetExecutableSuffix")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetExecutableSuffix");
        }
    });        
 
    const g_OSKextSetLoadAddress_ptr = Module.getExportByName(g_proc_name, 'OSKextSetLoadAddress');
    console.log("[i] g_OSKextSetLoadAddress_ptr addr: " + g_OSKextSetLoadAddress_ptr)

    Interceptor.attach(g_OSKextSetLoadAddress_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetLoadAddress")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetLoadAddress");
        }
    });        
 
    const g_OSKextSetLogFilter_ptr = Module.getExportByName(g_proc_name, 'OSKextSetLogFilter');
    console.log("[i] g_OSKextSetLogFilter_ptr addr: " + g_OSKextSetLogFilter_ptr)

    Interceptor.attach(g_OSKextSetLogFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetLogFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetLogFilter");
        }
    });        
 
    const g_OSKextSetLogOutputFunction_ptr = Module.getExportByName(g_proc_name, 'OSKextSetLogOutputFunction');
    console.log("[i] g_OSKextSetLogOutputFunction_ptr addr: " + g_OSKextSetLogOutputFunction_ptr)

    Interceptor.attach(g_OSKextSetLogOutputFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetLogOutputFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetLogOutputFunction");
        }
    });        
 
    const g_OSKextSetLoggingEnabled_ptr = Module.getExportByName(g_proc_name, 'OSKextSetLoggingEnabled');
    console.log("[i] g_OSKextSetLoggingEnabled_ptr addr: " + g_OSKextSetLoggingEnabled_ptr)

    Interceptor.attach(g_OSKextSetLoggingEnabled_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetLoggingEnabled")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetLoggingEnabled");
        }
    });        
 
    const g_OSKextSetRecordsDiagnostics_ptr = Module.getExportByName(g_proc_name, 'OSKextSetRecordsDiagnostics');
    console.log("[i] g_OSKextSetRecordsDiagnostics_ptr addr: " + g_OSKextSetRecordsDiagnostics_ptr)

    Interceptor.attach(g_OSKextSetRecordsDiagnostics_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetRecordsDiagnostics")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetRecordsDiagnostics");
        }
    });        
 
    const g_OSKextSetSimulatedSafeBoot_ptr = Module.getExportByName(g_proc_name, 'OSKextSetSimulatedSafeBoot');
    console.log("[i] g_OSKextSetSimulatedSafeBoot_ptr addr: " + g_OSKextSetSimulatedSafeBoot_ptr)

    Interceptor.attach(g_OSKextSetSimulatedSafeBoot_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetSimulatedSafeBoot")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetSimulatedSafeBoot");
        }
    });        
 
    const g_OSKextSetTargetString_ptr = Module.getExportByName(g_proc_name, 'OSKextSetTargetString');
    console.log("[i] g_OSKextSetTargetString_ptr addr: " + g_OSKextSetTargetString_ptr)

    Interceptor.attach(g_OSKextSetTargetString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetTargetString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetTargetString");
        }
    });        
 
    const g_OSKextSetUsesCaches_ptr = Module.getExportByName(g_proc_name, 'OSKextSetUsesCaches');
    console.log("[i] g_OSKextSetUsesCaches_ptr addr: " + g_OSKextSetUsesCaches_ptr)

    Interceptor.attach(g_OSKextSetUsesCaches_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSetUsesCaches")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSetUsesCaches");
        }
    });        
 
    const g_OSKextStart_ptr = Module.getExportByName(g_proc_name, 'OSKextStart');
    console.log("[i] g_OSKextStart_ptr addr: " + g_OSKextStart_ptr)

    Interceptor.attach(g_OSKextStart_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextStart")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextStart");
        }
    });        
 
    const g_OSKextStop_ptr = Module.getExportByName(g_proc_name, 'OSKextStop');
    console.log("[i] g_OSKextStop_ptr addr: " + g_OSKextStop_ptr)

    Interceptor.attach(g_OSKextStop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextStop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextStop");
        }
    });        
 
    const g_OSKextSupportsArchitecture_ptr = Module.getExportByName(g_proc_name, 'OSKextSupportsArchitecture');
    console.log("[i] g_OSKextSupportsArchitecture_ptr addr: " + g_OSKextSupportsArchitecture_ptr)

    Interceptor.attach(g_OSKextSupportsArchitecture_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextSupportsArchitecture")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextSupportsArchitecture");
        }
    });        
 
    const g_OSKextUnload_ptr = Module.getExportByName(g_proc_name, 'OSKextUnload');
    console.log("[i] g_OSKextUnload_ptr addr: " + g_OSKextUnload_ptr)

    Interceptor.attach(g_OSKextUnload_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextUnload")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextUnload");
        }
    });        
 
    const g_OSKextUnloadKextWithIdentifier_ptr = Module.getExportByName(g_proc_name, 'OSKextUnloadKextWithIdentifier');
    console.log("[i] g_OSKextUnloadKextWithIdentifier_ptr addr: " + g_OSKextUnloadKextWithIdentifier_ptr)

    Interceptor.attach(g_OSKextUnloadKextWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextUnloadKextWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextUnloadKextWithIdentifier");
        }
    });        
 
    const g_OSKextVLog_ptr = Module.getExportByName(g_proc_name, 'OSKextVLog');
    console.log("[i] g_OSKextVLog_ptr addr: " + g_OSKextVLog_ptr)

    Interceptor.attach(g_OSKextVLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextVLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextVLog");
        }
    });        
 
    const g_OSKextVLogCFString_ptr = Module.getExportByName(g_proc_name, 'OSKextVLogCFString');
    console.log("[i] g_OSKextVLogCFString_ptr addr: " + g_OSKextVLogCFString_ptr)

    Interceptor.attach(g_OSKextVLogCFString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextVLogCFString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextVLogCFString");
        }
    });        
 
    const g_OSKextValidate_ptr = Module.getExportByName(g_proc_name, 'OSKextValidate');
    console.log("[i] g_OSKextValidate_ptr addr: " + g_OSKextValidate_ptr)

    Interceptor.attach(g_OSKextValidate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextValidate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextValidate");
        }
    });        
 
    const g_OSKextValidateDependencies_ptr = Module.getExportByName(g_proc_name, 'OSKextValidateDependencies');
    console.log("[i] g_OSKextValidateDependencies_ptr addr: " + g_OSKextValidateDependencies_ptr)

    Interceptor.attach(g_OSKextValidateDependencies_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextValidateDependencies")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextValidateDependencies");
        }
    });        
 
    const g_OSKextVersionGetString_ptr = Module.getExportByName(g_proc_name, 'OSKextVersionGetString');
    console.log("[i] g_OSKextVersionGetString_ptr addr: " + g_OSKextVersionGetString_ptr)

    Interceptor.attach(g_OSKextVersionGetString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: OSKextVersionGetString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: OSKextVersionGetString");
        }
    });        
 
    const g_SCDynamicStoreAddWatchedKey_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreAddWatchedKey');
    console.log("[i] g_SCDynamicStoreAddWatchedKey_ptr addr: " + g_SCDynamicStoreAddWatchedKey_ptr)

    Interceptor.attach(g_SCDynamicStoreAddWatchedKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreAddWatchedKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreAddWatchedKey");
        }
    });        
 
    const g_SCDynamicStoreCopyMultiple_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreCopyMultiple');
    console.log("[i] g_SCDynamicStoreCopyMultiple_ptr addr: " + g_SCDynamicStoreCopyMultiple_ptr)

    Interceptor.attach(g_SCDynamicStoreCopyMultiple_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreCopyMultiple")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreCopyMultiple");
        }
    });        
 
    const g_SCDynamicStoreCopyValue_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreCopyValue');
    console.log("[i] g_SCDynamicStoreCopyValue_ptr addr: " + g_SCDynamicStoreCopyValue_ptr)

    Interceptor.attach(g_SCDynamicStoreCopyValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreCopyValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreCopyValue");
        }
    });        
 
    const g_SCDynamicStoreCreate_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreCreate');
    console.log("[i] g_SCDynamicStoreCreate_ptr addr: " + g_SCDynamicStoreCreate_ptr)

    Interceptor.attach(g_SCDynamicStoreCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreCreate");
        }
    });        
 
    const g_SCDynamicStoreCreateRunLoopSource_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreCreateRunLoopSource');
    console.log("[i] g_SCDynamicStoreCreateRunLoopSource_ptr addr: " + g_SCDynamicStoreCreateRunLoopSource_ptr)

    Interceptor.attach(g_SCDynamicStoreCreateRunLoopSource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreCreateRunLoopSource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreCreateRunLoopSource");
        }
    });        
 
    const g_SCDynamicStoreKeyCreate_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreKeyCreate');
    console.log("[i] g_SCDynamicStoreKeyCreate_ptr addr: " + g_SCDynamicStoreKeyCreate_ptr)

    Interceptor.attach(g_SCDynamicStoreKeyCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreKeyCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreKeyCreate");
        }
    });        
 
    const g_SCDynamicStoreKeyCreatePreferences_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreKeyCreatePreferences');
    console.log("[i] g_SCDynamicStoreKeyCreatePreferences_ptr addr: " + g_SCDynamicStoreKeyCreatePreferences_ptr)

    Interceptor.attach(g_SCDynamicStoreKeyCreatePreferences_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreKeyCreatePreferences")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreKeyCreatePreferences");
        }
    });        
 
    const g_SCDynamicStoreNotifyValue_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreNotifyValue');
    console.log("[i] g_SCDynamicStoreNotifyValue_ptr addr: " + g_SCDynamicStoreNotifyValue_ptr)

    Interceptor.attach(g_SCDynamicStoreNotifyValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreNotifyValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreNotifyValue");
        }
    });        
 
    const g_SCDynamicStoreSetNotificationKeys_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreSetNotificationKeys');
    console.log("[i] g_SCDynamicStoreSetNotificationKeys_ptr addr: " + g_SCDynamicStoreSetNotificationKeys_ptr)

    Interceptor.attach(g_SCDynamicStoreSetNotificationKeys_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreSetNotificationKeys")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreSetNotificationKeys");
        }
    });        
 
    const g_SCDynamicStoreSetValue_ptr = Module.getExportByName(g_proc_name, 'SCDynamicStoreSetValue');
    console.log("[i] g_SCDynamicStoreSetValue_ptr addr: " + g_SCDynamicStoreSetValue_ptr)

    Interceptor.attach(g_SCDynamicStoreSetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCDynamicStoreSetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCDynamicStoreSetValue");
        }
    });        
 
    const g_SCError_ptr = Module.getExportByName(g_proc_name, 'SCError');
    console.log("[i] g_SCError_ptr addr: " + g_SCError_ptr)

    Interceptor.attach(g_SCError_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCError")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCError");
        }
    });        
 
    const g_SCPreferencesApplyChanges_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesApplyChanges');
    console.log("[i] g_SCPreferencesApplyChanges_ptr addr: " + g_SCPreferencesApplyChanges_ptr)

    Interceptor.attach(g_SCPreferencesApplyChanges_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesApplyChanges")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesApplyChanges");
        }
    });        
 
    const g_SCPreferencesCommitChanges_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesCommitChanges');
    console.log("[i] g_SCPreferencesCommitChanges_ptr addr: " + g_SCPreferencesCommitChanges_ptr)

    Interceptor.attach(g_SCPreferencesCommitChanges_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesCommitChanges")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesCommitChanges");
        }
    });        
 
    const g_SCPreferencesCreate_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesCreate');
    console.log("[i] g_SCPreferencesCreate_ptr addr: " + g_SCPreferencesCreate_ptr)

    Interceptor.attach(g_SCPreferencesCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesCreate");
        }
    });        
 
    const g_SCPreferencesCreateWithAuthorization_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesCreateWithAuthorization');
    console.log("[i] g_SCPreferencesCreateWithAuthorization_ptr addr: " + g_SCPreferencesCreateWithAuthorization_ptr)

    Interceptor.attach(g_SCPreferencesCreateWithAuthorization_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesCreateWithAuthorization")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesCreateWithAuthorization");
        }
    });        
 
    const g_SCPreferencesGetValue_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesGetValue');
    console.log("[i] g_SCPreferencesGetValue_ptr addr: " + g_SCPreferencesGetValue_ptr)

    Interceptor.attach(g_SCPreferencesGetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesGetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesGetValue");
        }
    });        
 
    const g_SCPreferencesLock_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesLock');
    console.log("[i] g_SCPreferencesLock_ptr addr: " + g_SCPreferencesLock_ptr)

    Interceptor.attach(g_SCPreferencesLock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesLock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesLock");
        }
    });        
 
    const g_SCPreferencesRemoveValue_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesRemoveValue');
    console.log("[i] g_SCPreferencesRemoveValue_ptr addr: " + g_SCPreferencesRemoveValue_ptr)

    Interceptor.attach(g_SCPreferencesRemoveValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesRemoveValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesRemoveValue");
        }
    });        
 
    const g_SCPreferencesSetValue_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesSetValue');
    console.log("[i] g_SCPreferencesSetValue_ptr addr: " + g_SCPreferencesSetValue_ptr)

    Interceptor.attach(g_SCPreferencesSetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesSetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesSetValue");
        }
    });        
 
    const g_SCPreferencesUnlock_ptr = Module.getExportByName(g_proc_name, 'SCPreferencesUnlock');
    console.log("[i] g_SCPreferencesUnlock_ptr addr: " + g_SCPreferencesUnlock_ptr)

    Interceptor.attach(g_SCPreferencesUnlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: SCPreferencesUnlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: SCPreferencesUnlock");
        }
    });        
 
    const g__CFURLCopyAbsolutePath_ptr = Module.getExportByName(g_proc_name, '_CFURLCopyAbsolutePath');
    console.log("[i] g__CFURLCopyAbsolutePath_ptr addr: " + g__CFURLCopyAbsolutePath_ptr)

    Interceptor.attach(g__CFURLCopyAbsolutePath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _CFURLCopyAbsolutePath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _CFURLCopyAbsolutePath");
        }
    });        
 
    const g__IOAVCreateStringOfColorIDs_ptr = Module.getExportByName(g_proc_name, '_IOAVCreateStringOfColorIDs');
    console.log("[i] g__IOAVCreateStringOfColorIDs_ptr addr: " + g__IOAVCreateStringOfColorIDs_ptr)

    Interceptor.attach(g__IOAVCreateStringOfColorIDs_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOAVCreateStringOfColorIDs")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOAVCreateStringOfColorIDs");
        }
    });        
 
    const g__IOAVElementListGetElementIDAtIndex_ptr = Module.getExportByName(g_proc_name, '_IOAVElementListGetElementIDAtIndex');
    console.log("[i] g__IOAVElementListGetElementIDAtIndex_ptr addr: " + g__IOAVElementListGetElementIDAtIndex_ptr)

    Interceptor.attach(g__IOAVElementListGetElementIDAtIndex_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOAVElementListGetElementIDAtIndex")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOAVElementListGetElementIDAtIndex");
        }
    });        
 
    const g__IOAVStringAppendIndendationAndFormat_ptr = Module.getExportByName(g_proc_name, '_IOAVStringAppendIndendationAndFormat');
    console.log("[i] g__IOAVStringAppendIndendationAndFormat_ptr addr: " + g__IOAVStringAppendIndendationAndFormat_ptr)

    Interceptor.attach(g__IOAVStringAppendIndendationAndFormat_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOAVStringAppendIndendationAndFormat")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOAVStringAppendIndendationAndFormat");
        }
    });        
 
    const g__IODataQueueDequeue_ptr = Module.getExportByName(g_proc_name, '_IODataQueueDequeue');
    console.log("[i] g__IODataQueueDequeue_ptr addr: " + g__IODataQueueDequeue_ptr)

    Interceptor.attach(g__IODataQueueDequeue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IODataQueueDequeue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IODataQueueDequeue");
        }
    });        
 
    const g__IODataQueueEnqueueWithReadCallback_ptr = Module.getExportByName(g_proc_name, '_IODataQueueEnqueueWithReadCallback');
    console.log("[i] g__IODataQueueEnqueueWithReadCallback_ptr addr: " + g__IODataQueueEnqueueWithReadCallback_ptr)

    Interceptor.attach(g__IODataQueueEnqueueWithReadCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IODataQueueEnqueueWithReadCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IODataQueueEnqueueWithReadCallback");
        }
    });        
 
    const g__IODataQueuePeek_ptr = Module.getExportByName(g_proc_name, '_IODataQueuePeek');
    console.log("[i] g__IODataQueuePeek_ptr addr: " + g__IODataQueuePeek_ptr)

    Interceptor.attach(g__IODataQueuePeek_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IODataQueuePeek")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IODataQueuePeek");
        }
    });        
 
    const g__IODispatchCalloutWithDispatch_ptr = Module.getExportByName(g_proc_name, '_IODispatchCalloutWithDispatch');
    console.log("[i] g__IODispatchCalloutWithDispatch_ptr addr: " + g__IODispatchCalloutWithDispatch_ptr)

    Interceptor.attach(g__IODispatchCalloutWithDispatch_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IODispatchCalloutWithDispatch")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IODispatchCalloutWithDispatch");
        }
    });        
 
    const g__IOHIDArrayAppendSInt64_ptr = Module.getExportByName(g_proc_name, '_IOHIDArrayAppendSInt64');
    console.log("[i] g__IOHIDArrayAppendSInt64_ptr addr: " + g__IOHIDArrayAppendSInt64_ptr)

    Interceptor.attach(g__IOHIDArrayAppendSInt64_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDArrayAppendSInt64")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDArrayAppendSInt64");
        }
    });        
 
    const g__IOHIDCFArrayApplyBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDCFArrayApplyBlock');
    console.log("[i] g__IOHIDCFArrayApplyBlock_ptr addr: " + g__IOHIDCFArrayApplyBlock_ptr)

    Interceptor.attach(g__IOHIDCFArrayApplyBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCFArrayApplyBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCFArrayApplyBlock");
        }
    });        
 
    const g__IOHIDCFDictionaryApplyBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDCFDictionaryApplyBlock');
    console.log("[i] g__IOHIDCFDictionaryApplyBlock_ptr addr: " + g__IOHIDCFDictionaryApplyBlock_ptr)

    Interceptor.attach(g__IOHIDCFDictionaryApplyBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCFDictionaryApplyBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCFDictionaryApplyBlock");
        }
    });        
 
    const g__IOHIDCFSetApplyBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDCFSetApplyBlock');
    console.log("[i] g__IOHIDCFSetApplyBlock_ptr addr: " + g__IOHIDCFSetApplyBlock_ptr)

    Interceptor.attach(g__IOHIDCFSetApplyBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCFSetApplyBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCFSetApplyBlock");
        }
    });        
 
    const g__IOHIDCallbackApplier_ptr = Module.getExportByName(g_proc_name, '_IOHIDCallbackApplier');
    console.log("[i] g__IOHIDCallbackApplier_ptr addr: " + g__IOHIDCallbackApplier_ptr)

    Interceptor.attach(g__IOHIDCallbackApplier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCallbackApplier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCallbackApplier");
        }
    });        
 
    const g__IOHIDCopyServiceClientInfo_ptr = Module.getExportByName(g_proc_name, '_IOHIDCopyServiceClientInfo');
    console.log("[i] g__IOHIDCopyServiceClientInfo_ptr addr: " + g__IOHIDCopyServiceClientInfo_ptr)

    Interceptor.attach(g__IOHIDCopyServiceClientInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCopyServiceClientInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCopyServiceClientInfo");
        }
    });        
 
    const g__IOHIDCreateBinaryData_ptr = Module.getExportByName(g_proc_name, '_IOHIDCreateBinaryData');
    console.log("[i] g__IOHIDCreateBinaryData_ptr addr: " + g__IOHIDCreateBinaryData_ptr)

    Interceptor.attach(g__IOHIDCreateBinaryData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCreateBinaryData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCreateBinaryData");
        }
    });        
 
    const g__IOHIDCreateTimeString_ptr = Module.getExportByName(g_proc_name, '_IOHIDCreateTimeString');
    console.log("[i] g__IOHIDCreateTimeString_ptr addr: " + g__IOHIDCreateTimeString_ptr)

    Interceptor.attach(g__IOHIDCreateTimeString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDCreateTimeString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDCreateTimeString");
        }
    });        
 
    const g__IOHIDDebugEventAddPerfData_ptr = Module.getExportByName(g_proc_name, '_IOHIDDebugEventAddPerfData');
    console.log("[i] g__IOHIDDebugEventAddPerfData_ptr addr: " + g__IOHIDDebugEventAddPerfData_ptr)

    Interceptor.attach(g__IOHIDDebugEventAddPerfData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDebugEventAddPerfData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDebugEventAddPerfData");
        }
    });        
 
    const g__IOHIDDebugTrace_ptr = Module.getExportByName(g_proc_name, '_IOHIDDebugTrace');
    console.log("[i] g__IOHIDDebugTrace_ptr addr: " + g__IOHIDDebugTrace_ptr)

    Interceptor.attach(g__IOHIDDebugTrace_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDebugTrace")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDebugTrace");
        }
    });        
 
    const g__IOHIDDeviceCreatePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDDeviceCreatePrivate');
    console.log("[i] g__IOHIDDeviceCreatePrivate_ptr addr: " + g__IOHIDDeviceCreatePrivate_ptr)

    Interceptor.attach(g__IOHIDDeviceCreatePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDeviceCreatePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDeviceCreatePrivate");
        }
    });        
 
    const g__IOHIDDeviceGetIOCFPlugInInterface_ptr = Module.getExportByName(g_proc_name, '_IOHIDDeviceGetIOCFPlugInInterface');
    console.log("[i] g__IOHIDDeviceGetIOCFPlugInInterface_ptr addr: " + g__IOHIDDeviceGetIOCFPlugInInterface_ptr)

    Interceptor.attach(g__IOHIDDeviceGetIOCFPlugInInterface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDeviceGetIOCFPlugInInterface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDeviceGetIOCFPlugInInterface");
        }
    });        
 
    const g__IOHIDDeviceReleasePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDDeviceReleasePrivate');
    console.log("[i] g__IOHIDDeviceReleasePrivate_ptr addr: " + g__IOHIDDeviceReleasePrivate_ptr)

    Interceptor.attach(g__IOHIDDeviceReleasePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDeviceReleasePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDeviceReleasePrivate");
        }
    });        
 
    const g__IOHIDDictionaryAddCStr_ptr = Module.getExportByName(g_proc_name, '_IOHIDDictionaryAddCStr');
    console.log("[i] g__IOHIDDictionaryAddCStr_ptr addr: " + g__IOHIDDictionaryAddCStr_ptr)

    Interceptor.attach(g__IOHIDDictionaryAddCStr_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDictionaryAddCStr")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDictionaryAddCStr");
        }
    });        
 
    const g__IOHIDDictionaryAddSInt32_ptr = Module.getExportByName(g_proc_name, '_IOHIDDictionaryAddSInt32');
    console.log("[i] g__IOHIDDictionaryAddSInt32_ptr addr: " + g__IOHIDDictionaryAddSInt32_ptr)

    Interceptor.attach(g__IOHIDDictionaryAddSInt32_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDictionaryAddSInt32")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDictionaryAddSInt32");
        }
    });        
 
    const g__IOHIDDictionaryAddSInt64_ptr = Module.getExportByName(g_proc_name, '_IOHIDDictionaryAddSInt64');
    console.log("[i] g__IOHIDDictionaryAddSInt64_ptr addr: " + g__IOHIDDictionaryAddSInt64_ptr)

    Interceptor.attach(g__IOHIDDictionaryAddSInt64_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDDictionaryAddSInt64")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDDictionaryAddSInt64");
        }
    });        
 
    const g__IOHIDElementCreatePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementCreatePrivate');
    console.log("[i] g__IOHIDElementCreatePrivate_ptr addr: " + g__IOHIDElementCreatePrivate_ptr)

    Interceptor.attach(g__IOHIDElementCreatePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementCreatePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementCreatePrivate");
        }
    });        
 
    const g__IOHIDElementCreateWithElement_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementCreateWithElement');
    console.log("[i] g__IOHIDElementCreateWithElement_ptr addr: " + g__IOHIDElementCreateWithElement_ptr)

    Interceptor.attach(g__IOHIDElementCreateWithElement_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementCreateWithElement")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementCreateWithElement");
        }
    });        
 
    const g__IOHIDElementCreateWithParentAndData_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementCreateWithParentAndData');
    console.log("[i] g__IOHIDElementCreateWithParentAndData_ptr addr: " + g__IOHIDElementCreateWithParentAndData_ptr)

    Interceptor.attach(g__IOHIDElementCreateWithParentAndData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementCreateWithParentAndData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementCreateWithParentAndData");
        }
    });        
 
    const g__IOHIDElementGetCalibrationInfo_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementGetCalibrationInfo');
    console.log("[i] g__IOHIDElementGetCalibrationInfo_ptr addr: " + g__IOHIDElementGetCalibrationInfo_ptr)

    Interceptor.attach(g__IOHIDElementGetCalibrationInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementGetCalibrationInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementGetCalibrationInfo");
        }
    });        
 
    const g__IOHIDElementGetFlags_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementGetFlags');
    console.log("[i] g__IOHIDElementGetFlags_ptr addr: " + g__IOHIDElementGetFlags_ptr)

    Interceptor.attach(g__IOHIDElementGetFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementGetFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementGetFlags");
        }
    });        
 
    const g__IOHIDElementGetLength_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementGetLength');
    console.log("[i] g__IOHIDElementGetLength_ptr addr: " + g__IOHIDElementGetLength_ptr)

    Interceptor.attach(g__IOHIDElementGetLength_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementGetLength")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementGetLength");
        }
    });        
 
    const g__IOHIDElementGetValue_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementGetValue');
    console.log("[i] g__IOHIDElementGetValue_ptr addr: " + g__IOHIDElementGetValue_ptr)

    Interceptor.attach(g__IOHIDElementGetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementGetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementGetValue");
        }
    });        
 
    const g__IOHIDElementReleasePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementReleasePrivate');
    console.log("[i] g__IOHIDElementReleasePrivate_ptr addr: " + g__IOHIDElementReleasePrivate_ptr)

    Interceptor.attach(g__IOHIDElementReleasePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementReleasePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementReleasePrivate");
        }
    });        
 
    const g__IOHIDElementSetDevice_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementSetDevice');
    console.log("[i] g__IOHIDElementSetDevice_ptr addr: " + g__IOHIDElementSetDevice_ptr)

    Interceptor.attach(g__IOHIDElementSetDevice_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementSetDevice")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementSetDevice");
        }
    });        
 
    const g__IOHIDElementSetDeviceInterface_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementSetDeviceInterface');
    console.log("[i] g__IOHIDElementSetDeviceInterface_ptr addr: " + g__IOHIDElementSetDeviceInterface_ptr)

    Interceptor.attach(g__IOHIDElementSetDeviceInterface_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementSetDeviceInterface")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementSetDeviceInterface");
        }
    });        
 
    const g__IOHIDElementSetValue_ptr = Module.getExportByName(g_proc_name, '_IOHIDElementSetValue');
    console.log("[i] g__IOHIDElementSetValue_ptr addr: " + g__IOHIDElementSetValue_ptr)

    Interceptor.attach(g__IOHIDElementSetValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDElementSetValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDElementSetValue");
        }
    });        
 
    const g__IOHIDEventCopyAttachment_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventCopyAttachment');
    console.log("[i] g__IOHIDEventCopyAttachment_ptr addr: " + g__IOHIDEventCopyAttachment_ptr)

    Interceptor.attach(g__IOHIDEventCopyAttachment_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventCopyAttachment")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventCopyAttachment");
        }
    });        
 
    const g__IOHIDEventCreate_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventCreate');
    console.log("[i] g__IOHIDEventCreate_ptr addr: " + g__IOHIDEventCreate_ptr)

    Interceptor.attach(g__IOHIDEventCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventCreate");
        }
    });        
 
    const g__IOHIDEventEqual_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventEqual');
    console.log("[i] g__IOHIDEventEqual_ptr addr: " + g__IOHIDEventEqual_ptr)

    Interceptor.attach(g__IOHIDEventEqual_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventEqual")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventEqual");
        }
    });        
 
    const g__IOHIDEventGetContext_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventGetContext');
    console.log("[i] g__IOHIDEventGetContext_ptr addr: " + g__IOHIDEventGetContext_ptr)

    Interceptor.attach(g__IOHIDEventGetContext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventGetContext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventGetContext");
        }
    });        
 
    const g__IOHIDEventQueueSerializeState_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventQueueSerializeState');
    console.log("[i] g__IOHIDEventQueueSerializeState_ptr addr: " + g__IOHIDEventQueueSerializeState_ptr)

    Interceptor.attach(g__IOHIDEventQueueSerializeState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventQueueSerializeState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventQueueSerializeState");
        }
    });        
 
    const g__IOHIDEventRemoveAttachment_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventRemoveAttachment');
    console.log("[i] g__IOHIDEventRemoveAttachment_ptr addr: " + g__IOHIDEventRemoveAttachment_ptr)

    Interceptor.attach(g__IOHIDEventRemoveAttachment_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventRemoveAttachment")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventRemoveAttachment");
        }
    });        
 
    const g__IOHIDEventSetAttachment_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSetAttachment');
    console.log("[i] g__IOHIDEventSetAttachment_ptr addr: " + g__IOHIDEventSetAttachment_ptr)

    Interceptor.attach(g__IOHIDEventSetAttachment_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSetAttachment")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSetAttachment");
        }
    });        
 
    const g__IOHIDEventSetContext_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSetContext');
    console.log("[i] g__IOHIDEventSetContext_ptr addr: " + g__IOHIDEventSetContext_ptr)

    Interceptor.attach(g__IOHIDEventSetContext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSetContext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSetContext");
        }
    });        
 
    const g__IOHIDEventSystemAddConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemAddConnection');
    console.log("[i] g__IOHIDEventSystemAddConnection_ptr addr: " + g__IOHIDEventSystemAddConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemAddConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemAddConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemAddConnection");
        }
    });        
 
    const g__IOHIDEventSystemAddService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemAddService');
    console.log("[i] g__IOHIDEventSystemAddService_ptr addr: " + g__IOHIDEventSystemAddService_ptr)

    Interceptor.attach(g__IOHIDEventSystemAddService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemAddService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemAddService");
        }
    });        
 
    const g__IOHIDEventSystemAddServiceForConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemAddServiceForConnection');
    console.log("[i] g__IOHIDEventSystemAddServiceForConnection_ptr addr: " + g__IOHIDEventSystemAddServiceForConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemAddServiceForConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemAddServiceForConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemAddServiceForConnection");
        }
    });        
 
    const g__IOHIDEventSystemClientCopyEventForService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientCopyEventForService');
    console.log("[i] g__IOHIDEventSystemClientCopyEventForService_ptr addr: " + g__IOHIDEventSystemClientCopyEventForService_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientCopyEventForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientCopyEventForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientCopyEventForService");
        }
    });        
 
    const g__IOHIDEventSystemClientCopyMatchingEventForService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientCopyMatchingEventForService');
    console.log("[i] g__IOHIDEventSystemClientCopyMatchingEventForService_ptr addr: " + g__IOHIDEventSystemClientCopyMatchingEventForService_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientCopyMatchingEventForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientCopyMatchingEventForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientCopyMatchingEventForService");
        }
    });        
 
    const g__IOHIDEventSystemClientCopyPropertiesForService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientCopyPropertiesForService');
    console.log("[i] g__IOHIDEventSystemClientCopyPropertiesForService_ptr addr: " + g__IOHIDEventSystemClientCopyPropertiesForService_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientCopyPropertiesForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientCopyPropertiesForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientCopyPropertiesForService");
        }
    });        
 
    const g__IOHIDEventSystemClientCopyPropertyForService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientCopyPropertyForService');
    console.log("[i] g__IOHIDEventSystemClientCopyPropertyForService_ptr addr: " + g__IOHIDEventSystemClientCopyPropertyForService_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientCopyPropertyForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientCopyPropertyForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientCopyPropertyForService");
        }
    });        
 
    const g__IOHIDEventSystemClientDispatchEventFilter_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientDispatchEventFilter');
    console.log("[i] g__IOHIDEventSystemClientDispatchEventFilter_ptr addr: " + g__IOHIDEventSystemClientDispatchEventFilter_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientDispatchEventFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientDispatchEventFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientDispatchEventFilter");
        }
    });        
 
    const g__IOHIDEventSystemClientDispatchPropertiesChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientDispatchPropertiesChanged');
    console.log("[i] g__IOHIDEventSystemClientDispatchPropertiesChanged_ptr addr: " + g__IOHIDEventSystemClientDispatchPropertiesChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientDispatchPropertiesChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientDispatchPropertiesChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientDispatchPropertiesChanged");
        }
    });        
 
    const g__IOHIDEventSystemClientRegisterClientRecordsChangedBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientRegisterClientRecordsChangedBlock');
    console.log("[i] g__IOHIDEventSystemClientRegisterClientRecordsChangedBlock_ptr addr: " + g__IOHIDEventSystemClientRegisterClientRecordsChangedBlock_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientRegisterClientRecordsChangedBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientRegisterClientRecordsChangedBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientRegisterClientRecordsChangedBlock");
        }
    });        
 
    const g__IOHIDEventSystemClientRegisterClientRecordsChangedCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientRegisterClientRecordsChangedCallback');
    console.log("[i] g__IOHIDEventSystemClientRegisterClientRecordsChangedCallback_ptr addr: " + g__IOHIDEventSystemClientRegisterClientRecordsChangedCallback_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientRegisterClientRecordsChangedCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientRegisterClientRecordsChangedCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientRegisterClientRecordsChangedCallback");
        }
    });        
 
    const g__IOHIDEventSystemClientRegisterServiceRecordsChangedBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientRegisterServiceRecordsChangedBlock');
    console.log("[i] g__IOHIDEventSystemClientRegisterServiceRecordsChangedBlock_ptr addr: " + g__IOHIDEventSystemClientRegisterServiceRecordsChangedBlock_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientRegisterServiceRecordsChangedBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientRegisterServiceRecordsChangedBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientRegisterServiceRecordsChangedBlock");
        }
    });        
 
    const g__IOHIDEventSystemClientRegisterServiceRecordsChangedCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientRegisterServiceRecordsChangedCallback');
    console.log("[i] g__IOHIDEventSystemClientRegisterServiceRecordsChangedCallback_ptr addr: " + g__IOHIDEventSystemClientRegisterServiceRecordsChangedCallback_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientRegisterServiceRecordsChangedCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientRegisterServiceRecordsChangedCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientRegisterServiceRecordsChangedCallback");
        }
    });        
 
    const g__IOHIDEventSystemClientServiceConformsTo_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientServiceConformsTo');
    console.log("[i] g__IOHIDEventSystemClientServiceConformsTo_ptr addr: " + g__IOHIDEventSystemClientServiceConformsTo_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientServiceConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientServiceConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientServiceConformsTo");
        }
    });        
 
    const g__IOHIDEventSystemClientSetElementValueForService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientSetElementValueForService');
    console.log("[i] g__IOHIDEventSystemClientSetElementValueForService_ptr addr: " + g__IOHIDEventSystemClientSetElementValueForService_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientSetElementValueForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientSetElementValueForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientSetElementValueForService");
        }
    });        
 
    const g__IOHIDEventSystemClientSetPropertyForService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientSetPropertyForService');
    console.log("[i] g__IOHIDEventSystemClientSetPropertyForService_ptr addr: " + g__IOHIDEventSystemClientSetPropertyForService_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientSetPropertyForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientSetPropertyForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientSetPropertyForService");
        }
    });        
 
    const g__IOHIDEventSystemClientUnregisterClientRecordsChangedBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientUnregisterClientRecordsChangedBlock');
    console.log("[i] g__IOHIDEventSystemClientUnregisterClientRecordsChangedBlock_ptr addr: " + g__IOHIDEventSystemClientUnregisterClientRecordsChangedBlock_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientUnregisterClientRecordsChangedBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientUnregisterClientRecordsChangedBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientUnregisterClientRecordsChangedBlock");
        }
    });        
 
    const g__IOHIDEventSystemClientUnregisterClientRecordsChangedCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientUnregisterClientRecordsChangedCallback');
    console.log("[i] g__IOHIDEventSystemClientUnregisterClientRecordsChangedCallback_ptr addr: " + g__IOHIDEventSystemClientUnregisterClientRecordsChangedCallback_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientUnregisterClientRecordsChangedCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientUnregisterClientRecordsChangedCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientUnregisterClientRecordsChangedCallback");
        }
    });        
 
    const g__IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock');
    console.log("[i] g__IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock_ptr addr: " + g__IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientUnregisterServiceRecordsChangedBlock");
        }
    });        
 
    const g__IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback');
    console.log("[i] g__IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback_ptr addr: " + g__IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback_ptr)

    Interceptor.attach(g__IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemClientUnregisterServiceRecordsChangedCallback");
        }
    });        
 
    const g__IOHIDEventSystemConnectionAddNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionAddNotification');
    console.log("[i] g__IOHIDEventSystemConnectionAddNotification_ptr addr: " + g__IOHIDEventSystemConnectionAddNotification_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionAddNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionAddNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionAddNotification");
        }
    });        
 
    const g__IOHIDEventSystemConnectionAddServices_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionAddServices');
    console.log("[i] g__IOHIDEventSystemConnectionAddServices_ptr addr: " + g__IOHIDEventSystemConnectionAddServices_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionAddServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionAddServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionAddServices");
        }
    });        
 
    const g__IOHIDEventSystemConnectionContainsService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionContainsService');
    console.log("[i] g__IOHIDEventSystemConnectionContainsService_ptr addr: " + g__IOHIDEventSystemConnectionContainsService_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionContainsService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionContainsService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionContainsService");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCopyEventCounts_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCopyEventCounts');
    console.log("[i] g__IOHIDEventSystemConnectionCopyEventCounts_ptr addr: " + g__IOHIDEventSystemConnectionCopyEventCounts_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCopyEventCounts_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCopyEventCounts")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCopyEventCounts");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCopyEventLog_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCopyEventLog');
    console.log("[i] g__IOHIDEventSystemConnectionCopyEventLog_ptr addr: " + g__IOHIDEventSystemConnectionCopyEventLog_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCopyEventLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCopyEventLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCopyEventLog");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCopyNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCopyNotification');
    console.log("[i] g__IOHIDEventSystemConnectionCopyNotification_ptr addr: " + g__IOHIDEventSystemConnectionCopyNotification_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCopyNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCopyNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCopyNotification");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCopyQueue_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCopyQueue');
    console.log("[i] g__IOHIDEventSystemConnectionCopyQueue_ptr addr: " + g__IOHIDEventSystemConnectionCopyQueue_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCopyQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCopyQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCopyQueue");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCopyRecord_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCopyRecord');
    console.log("[i] g__IOHIDEventSystemConnectionCopyRecord_ptr addr: " + g__IOHIDEventSystemConnectionCopyRecord_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCopyRecord_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCopyRecord")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCopyRecord");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCopyServices_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCopyServices');
    console.log("[i] g__IOHIDEventSystemConnectionCopyServices_ptr addr: " + g__IOHIDEventSystemConnectionCopyServices_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCopyServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCopyServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCopyServices");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCreate_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCreate');
    console.log("[i] g__IOHIDEventSystemConnectionCreate_ptr addr: " + g__IOHIDEventSystemConnectionCreate_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCreate");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCreatePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCreatePrivate');
    console.log("[i] g__IOHIDEventSystemConnectionCreatePrivate_ptr addr: " + g__IOHIDEventSystemConnectionCreatePrivate_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCreatePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCreatePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCreatePrivate");
        }
    });        
 
    const g__IOHIDEventSystemConnectionCreateVirtualService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionCreateVirtualService');
    console.log("[i] g__IOHIDEventSystemConnectionCreateVirtualService_ptr addr: " + g__IOHIDEventSystemConnectionCreateVirtualService_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionCreateVirtualService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionCreateVirtualService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionCreateVirtualService");
        }
    });        
 
    const g__IOHIDEventSystemConnectionDispatchEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionDispatchEvent');
    console.log("[i] g__IOHIDEventSystemConnectionDispatchEvent_ptr addr: " + g__IOHIDEventSystemConnectionDispatchEvent_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionDispatchEvent");
        }
    });        
 
    const g__IOHIDEventSystemConnectionDispatchEventForVirtualService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionDispatchEventForVirtualService');
    console.log("[i] g__IOHIDEventSystemConnectionDispatchEventForVirtualService_ptr addr: " + g__IOHIDEventSystemConnectionDispatchEventForVirtualService_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionDispatchEventForVirtualService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionDispatchEventForVirtualService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionDispatchEventForVirtualService");
        }
    });        
 
    const g__IOHIDEventSystemConnectionEventFilterCompare_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionEventFilterCompare');
    console.log("[i] g__IOHIDEventSystemConnectionEventFilterCompare_ptr addr: " + g__IOHIDEventSystemConnectionEventFilterCompare_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionEventFilterCompare_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionEventFilterCompare")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionEventFilterCompare");
        }
    });        
 
    const g__IOHIDEventSystemConnectionFilterEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionFilterEvent');
    console.log("[i] g__IOHIDEventSystemConnectionFilterEvent_ptr addr: " + g__IOHIDEventSystemConnectionFilterEvent_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionFilterEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionFilterEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionFilterEvent");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetDispatchQueue_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetDispatchQueue');
    console.log("[i] g__IOHIDEventSystemConnectionGetDispatchQueue_ptr addr: " + g__IOHIDEventSystemConnectionGetDispatchQueue_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetDispatchQueue");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetEventFilterPriority_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetEventFilterPriority');
    console.log("[i] g__IOHIDEventSystemConnectionGetEventFilterPriority_ptr addr: " + g__IOHIDEventSystemConnectionGetEventFilterPriority_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetEventFilterPriority_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetEventFilterPriority")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetEventFilterPriority");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetPID_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetPID');
    console.log("[i] g__IOHIDEventSystemConnectionGetPID_ptr addr: " + g__IOHIDEventSystemConnectionGetPID_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetPID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetPID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetPID");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetPort_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetPort');
    console.log("[i] g__IOHIDEventSystemConnectionGetPort_ptr addr: " + g__IOHIDEventSystemConnectionGetPort_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetPort");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetProperty_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetProperty');
    console.log("[i] g__IOHIDEventSystemConnectionGetProperty_ptr addr: " + g__IOHIDEventSystemConnectionGetProperty_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetProperty");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetReplyPort_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetReplyPort');
    console.log("[i] g__IOHIDEventSystemConnectionGetReplyPort_ptr addr: " + g__IOHIDEventSystemConnectionGetReplyPort_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetReplyPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetReplyPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetReplyPort");
        }
    });        
 
    const g__IOHIDEventSystemConnectionGetSystem_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionGetSystem');
    console.log("[i] g__IOHIDEventSystemConnectionGetSystem_ptr addr: " + g__IOHIDEventSystemConnectionGetSystem_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionGetSystem_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionGetSystem")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionGetSystem");
        }
    });        
 
    const g__IOHIDEventSystemConnectionInvalidate_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionInvalidate');
    console.log("[i] g__IOHIDEventSystemConnectionInvalidate_ptr addr: " + g__IOHIDEventSystemConnectionInvalidate_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionInvalidate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionInvalidate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionInvalidate");
        }
    });        
 
    const g__IOHIDEventSystemConnectionIsResponsive_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionIsResponsive');
    console.log("[i] g__IOHIDEventSystemConnectionIsResponsive_ptr addr: " + g__IOHIDEventSystemConnectionIsResponsive_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionIsResponsive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionIsResponsive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionIsResponsive");
        }
    });        
 
    const g__IOHIDEventSystemConnectionIsValid_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionIsValid');
    console.log("[i] g__IOHIDEventSystemConnectionIsValid_ptr addr: " + g__IOHIDEventSystemConnectionIsValid_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionIsValid_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionIsValid")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionIsValid");
        }
    });        
 
    const g__IOHIDEventSystemConnectionLogEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionLogEvent');
    console.log("[i] g__IOHIDEventSystemConnectionLogEvent_ptr addr: " + g__IOHIDEventSystemConnectionLogEvent_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionLogEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionLogEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionLogEvent");
        }
    });        
 
    const g__IOHIDEventSystemConnectionPropertyChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionPropertyChanged');
    console.log("[i] g__IOHIDEventSystemConnectionPropertyChanged_ptr addr: " + g__IOHIDEventSystemConnectionPropertyChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionPropertyChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionPropertyChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionPropertyChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionQueueStart_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionQueueStart');
    console.log("[i] g__IOHIDEventSystemConnectionQueueStart_ptr addr: " + g__IOHIDEventSystemConnectionQueueStart_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionQueueStart_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionQueueStart")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionQueueStart");
        }
    });        
 
    const g__IOHIDEventSystemConnectionQueueStop_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionQueueStop');
    console.log("[i] g__IOHIDEventSystemConnectionQueueStop_ptr addr: " + g__IOHIDEventSystemConnectionQueueStop_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionQueueStop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionQueueStop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionQueueStop");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRecordClientChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRecordClientChanged');
    console.log("[i] g__IOHIDEventSystemConnectionRecordClientChanged_ptr addr: " + g__IOHIDEventSystemConnectionRecordClientChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRecordClientChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRecordClientChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRecordClientChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRecordServiceChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRecordServiceChanged');
    console.log("[i] g__IOHIDEventSystemConnectionRecordServiceChanged_ptr addr: " + g__IOHIDEventSystemConnectionRecordServiceChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRecordServiceChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRecordServiceChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRecordServiceChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRegisterDemuxCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRegisterDemuxCallback');
    console.log("[i] g__IOHIDEventSystemConnectionRegisterDemuxCallback_ptr addr: " + g__IOHIDEventSystemConnectionRegisterDemuxCallback_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRegisterDemuxCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRegisterDemuxCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRegisterDemuxCallback");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRegisterEventFilter_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRegisterEventFilter');
    console.log("[i] g__IOHIDEventSystemConnectionRegisterEventFilter_ptr addr: " + g__IOHIDEventSystemConnectionRegisterEventFilter_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRegisterEventFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRegisterEventFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRegisterEventFilter");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRegisterPropertyChangedNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRegisterPropertyChangedNotification');
    console.log("[i] g__IOHIDEventSystemConnectionRegisterPropertyChangedNotification_ptr addr: " + g__IOHIDEventSystemConnectionRegisterPropertyChangedNotification_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRegisterPropertyChangedNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRegisterPropertyChangedNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRegisterPropertyChangedNotification");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRegisterRecordClientChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRegisterRecordClientChanged');
    console.log("[i] g__IOHIDEventSystemConnectionRegisterRecordClientChanged_ptr addr: " + g__IOHIDEventSystemConnectionRegisterRecordClientChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRegisterRecordClientChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRegisterRecordClientChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRegisterRecordClientChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRegisterRecordServiceChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRegisterRecordServiceChanged');
    console.log("[i] g__IOHIDEventSystemConnectionRegisterRecordServiceChanged_ptr addr: " + g__IOHIDEventSystemConnectionRegisterRecordServiceChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRegisterRecordServiceChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRegisterRecordServiceChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRegisterRecordServiceChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRegisterTerminationCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRegisterTerminationCallback');
    console.log("[i] g__IOHIDEventSystemConnectionRegisterTerminationCallback_ptr addr: " + g__IOHIDEventSystemConnectionRegisterTerminationCallback_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRegisterTerminationCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRegisterTerminationCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRegisterTerminationCallback");
        }
    });        
 
    const g__IOHIDEventSystemConnectionReleasePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionReleasePrivate');
    console.log("[i] g__IOHIDEventSystemConnectionReleasePrivate_ptr addr: " + g__IOHIDEventSystemConnectionReleasePrivate_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionReleasePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionReleasePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionReleasePrivate");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRemoveAllServices_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRemoveAllServices');
    console.log("[i] g__IOHIDEventSystemConnectionRemoveAllServices_ptr addr: " + g__IOHIDEventSystemConnectionRemoveAllServices_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRemoveAllServices_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRemoveAllServices")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRemoveAllServices");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRemoveNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRemoveNotification');
    console.log("[i] g__IOHIDEventSystemConnectionRemoveNotification_ptr addr: " + g__IOHIDEventSystemConnectionRemoveNotification_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRemoveNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRemoveNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRemoveNotification");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRemoveService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRemoveService');
    console.log("[i] g__IOHIDEventSystemConnectionRemoveService_ptr addr: " + g__IOHIDEventSystemConnectionRemoveService_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRemoveService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRemoveService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRemoveService");
        }
    });        
 
    const g__IOHIDEventSystemConnectionRemoveVirtualService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionRemoveVirtualService');
    console.log("[i] g__IOHIDEventSystemConnectionRemoveVirtualService_ptr addr: " + g__IOHIDEventSystemConnectionRemoveVirtualService_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionRemoveVirtualService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionRemoveVirtualService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionRemoveVirtualService");
        }
    });        
 
    const g__IOHIDEventSystemConnectionScheduleAsync_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionScheduleAsync');
    console.log("[i] g__IOHIDEventSystemConnectionScheduleAsync_ptr addr: " + g__IOHIDEventSystemConnectionScheduleAsync_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionScheduleAsync_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionScheduleAsync")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionScheduleAsync");
        }
    });        
 
    const g__IOHIDEventSystemConnectionSetProperty_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionSetProperty');
    console.log("[i] g__IOHIDEventSystemConnectionSetProperty_ptr addr: " + g__IOHIDEventSystemConnectionSetProperty_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionSetProperty");
        }
    });        
 
    const g__IOHIDEventSystemConnectionSetQueue_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionSetQueue');
    console.log("[i] g__IOHIDEventSystemConnectionSetQueue_ptr addr: " + g__IOHIDEventSystemConnectionSetQueue_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionSetQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionSetQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionSetQueue");
        }
    });        
 
    const g__IOHIDEventSystemConnectionUnregisterEventFilter_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionUnregisterEventFilter');
    console.log("[i] g__IOHIDEventSystemConnectionUnregisterEventFilter_ptr addr: " + g__IOHIDEventSystemConnectionUnregisterEventFilter_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionUnregisterEventFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionUnregisterEventFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionUnregisterEventFilter");
        }
    });        
 
    const g__IOHIDEventSystemConnectionUnregisterPropertyChangedNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionUnregisterPropertyChangedNotification');
    console.log("[i] g__IOHIDEventSystemConnectionUnregisterPropertyChangedNotification_ptr addr: " + g__IOHIDEventSystemConnectionUnregisterPropertyChangedNotification_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionUnregisterPropertyChangedNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionUnregisterPropertyChangedNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionUnregisterPropertyChangedNotification");
        }
    });        
 
    const g__IOHIDEventSystemConnectionUnregisterRecordClientChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionUnregisterRecordClientChanged');
    console.log("[i] g__IOHIDEventSystemConnectionUnregisterRecordClientChanged_ptr addr: " + g__IOHIDEventSystemConnectionUnregisterRecordClientChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionUnregisterRecordClientChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionUnregisterRecordClientChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionUnregisterRecordClientChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionUnregisterRecordServiceChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionUnregisterRecordServiceChanged');
    console.log("[i] g__IOHIDEventSystemConnectionUnregisterRecordServiceChanged_ptr addr: " + g__IOHIDEventSystemConnectionUnregisterRecordServiceChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionUnregisterRecordServiceChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionUnregisterRecordServiceChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionUnregisterRecordServiceChanged");
        }
    });        
 
    const g__IOHIDEventSystemConnectionUnscheduleAsync_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionUnscheduleAsync');
    console.log("[i] g__IOHIDEventSystemConnectionUnscheduleAsync_ptr addr: " + g__IOHIDEventSystemConnectionUnscheduleAsync_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionUnscheduleAsync_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionUnscheduleAsync")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionUnscheduleAsync");
        }
    });        
 
    const g__IOHIDEventSystemConnectionVirtualServiceNotify_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemConnectionVirtualServiceNotify');
    console.log("[i] g__IOHIDEventSystemConnectionVirtualServiceNotify_ptr addr: " + g__IOHIDEventSystemConnectionVirtualServiceNotify_ptr)

    Interceptor.attach(g__IOHIDEventSystemConnectionVirtualServiceNotify_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemConnectionVirtualServiceNotify")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemConnectionVirtualServiceNotify");
        }
    });        
 
    const g__IOHIDEventSystemCopyRecord_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemCopyRecord');
    console.log("[i] g__IOHIDEventSystemCopyRecord_ptr addr: " + g__IOHIDEventSystemCopyRecord_ptr)

    Interceptor.attach(g__IOHIDEventSystemCopyRecord_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemCopyRecord")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemCopyRecord");
        }
    });        
 
    const g__IOHIDEventSystemDispatchEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemDispatchEvent');
    console.log("[i] g__IOHIDEventSystemDispatchEvent_ptr addr: " + g__IOHIDEventSystemDispatchEvent_ptr)

    Interceptor.attach(g__IOHIDEventSystemDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemDispatchEvent");
        }
    });        
 
    const g__IOHIDEventSystemGetPropertyForConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemGetPropertyForConnection');
    console.log("[i] g__IOHIDEventSystemGetPropertyForConnection_ptr addr: " + g__IOHIDEventSystemGetPropertyForConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemGetPropertyForConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemGetPropertyForConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemGetPropertyForConnection");
        }
    });        
 
    const g__IOHIDEventSystemGetSession_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemGetSession');
    console.log("[i] g__IOHIDEventSystemGetSession_ptr addr: " + g__IOHIDEventSystemGetSession_ptr)

    Interceptor.attach(g__IOHIDEventSystemGetSession_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemGetSession")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemGetSession");
        }
    });        
 
    const g__IOHIDEventSystemPropertyChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemPropertyChanged');
    console.log("[i] g__IOHIDEventSystemPropertyChanged_ptr addr: " + g__IOHIDEventSystemPropertyChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemPropertyChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemPropertyChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemPropertyChanged");
        }
    });        
 
    const g__IOHIDEventSystemRegisterEventFilter_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRegisterEventFilter');
    console.log("[i] g__IOHIDEventSystemRegisterEventFilter_ptr addr: " + g__IOHIDEventSystemRegisterEventFilter_ptr)

    Interceptor.attach(g__IOHIDEventSystemRegisterEventFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRegisterEventFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRegisterEventFilter");
        }
    });        
 
    const g__IOHIDEventSystemRegisterRecordClientChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRegisterRecordClientChanged');
    console.log("[i] g__IOHIDEventSystemRegisterRecordClientChanged_ptr addr: " + g__IOHIDEventSystemRegisterRecordClientChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemRegisterRecordClientChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRegisterRecordClientChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRegisterRecordClientChanged");
        }
    });        
 
    const g__IOHIDEventSystemRegisterRecordServiceChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRegisterRecordServiceChanged');
    console.log("[i] g__IOHIDEventSystemRegisterRecordServiceChanged_ptr addr: " + g__IOHIDEventSystemRegisterRecordServiceChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemRegisterRecordServiceChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRegisterRecordServiceChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRegisterRecordServiceChanged");
        }
    });        
 
    const g__IOHIDEventSystemRemoveConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRemoveConnection');
    console.log("[i] g__IOHIDEventSystemRemoveConnection_ptr addr: " + g__IOHIDEventSystemRemoveConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemRemoveConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRemoveConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRemoveConnection");
        }
    });        
 
    const g__IOHIDEventSystemRemoveNotificationForConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRemoveNotificationForConnection');
    console.log("[i] g__IOHIDEventSystemRemoveNotificationForConnection_ptr addr: " + g__IOHIDEventSystemRemoveNotificationForConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemRemoveNotificationForConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRemoveNotificationForConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRemoveNotificationForConnection");
        }
    });        
 
    const g__IOHIDEventSystemRemoveService_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRemoveService');
    console.log("[i] g__IOHIDEventSystemRemoveService_ptr addr: " + g__IOHIDEventSystemRemoveService_ptr)

    Interceptor.attach(g__IOHIDEventSystemRemoveService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRemoveService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRemoveService");
        }
    });        
 
    const g__IOHIDEventSystemRemoveServicesForConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemRemoveServicesForConnection');
    console.log("[i] g__IOHIDEventSystemRemoveServicesForConnection_ptr addr: " + g__IOHIDEventSystemRemoveServicesForConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemRemoveServicesForConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemRemoveServicesForConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemRemoveServicesForConnection");
        }
    });        
 
    const g__IOHIDEventSystemSetPropertyForConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemSetPropertyForConnection');
    console.log("[i] g__IOHIDEventSystemSetPropertyForConnection_ptr addr: " + g__IOHIDEventSystemSetPropertyForConnection_ptr)

    Interceptor.attach(g__IOHIDEventSystemSetPropertyForConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemSetPropertyForConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemSetPropertyForConnection");
        }
    });        
 
    const g__IOHIDEventSystemUnregisterEventFilter_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemUnregisterEventFilter');
    console.log("[i] g__IOHIDEventSystemUnregisterEventFilter_ptr addr: " + g__IOHIDEventSystemUnregisterEventFilter_ptr)

    Interceptor.attach(g__IOHIDEventSystemUnregisterEventFilter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemUnregisterEventFilter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemUnregisterEventFilter");
        }
    });        
 
    const g__IOHIDEventSystemUnregisterRecordClientChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemUnregisterRecordClientChanged');
    console.log("[i] g__IOHIDEventSystemUnregisterRecordClientChanged_ptr addr: " + g__IOHIDEventSystemUnregisterRecordClientChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemUnregisterRecordClientChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemUnregisterRecordClientChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemUnregisterRecordClientChanged");
        }
    });        
 
    const g__IOHIDEventSystemUnregisterRecordServiceChanged_ptr = Module.getExportByName(g_proc_name, '_IOHIDEventSystemUnregisterRecordServiceChanged');
    console.log("[i] g__IOHIDEventSystemUnregisterRecordServiceChanged_ptr addr: " + g__IOHIDEventSystemUnregisterRecordServiceChanged_ptr)

    Interceptor.attach(g__IOHIDEventSystemUnregisterRecordServiceChanged_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDEventSystemUnregisterRecordServiceChanged")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDEventSystemUnregisterRecordServiceChanged");
        }
    });        
 
    const g__IOHIDGetMonotonicTime_ptr = Module.getExportByName(g_proc_name, '_IOHIDGetMonotonicTime');
    console.log("[i] g__IOHIDGetMonotonicTime_ptr addr: " + g__IOHIDGetMonotonicTime_ptr)

    Interceptor.attach(g__IOHIDGetMonotonicTime_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDGetMonotonicTime")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDGetMonotonicTime");
        }
    });        
 
    const g__IOHIDGetTimestampDelta_ptr = Module.getExportByName(g_proc_name, '_IOHIDGetTimestampDelta');
    console.log("[i] g__IOHIDGetTimestampDelta_ptr addr: " + g__IOHIDGetTimestampDelta_ptr)

    Interceptor.attach(g__IOHIDGetTimestampDelta_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDGetTimestampDelta")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDGetTimestampDelta");
        }
    });        
 
    const g__IOHIDIsSerializable_ptr = Module.getExportByName(g_proc_name, '_IOHIDIsSerializable');
    console.log("[i] g__IOHIDIsSerializable_ptr addr: " + g__IOHIDIsSerializable_ptr)

    Interceptor.attach(g__IOHIDIsSerializable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDIsSerializable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDIsSerializable");
        }
    });        
 
    const g__IOHIDLoadBundles_ptr = Module.getExportByName(g_proc_name, '_IOHIDLoadBundles');
    console.log("[i] g__IOHIDLoadBundles_ptr addr: " + g__IOHIDLoadBundles_ptr)

    Interceptor.attach(g__IOHIDLoadBundles_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDLoadBundles")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDLoadBundles");
        }
    });        
 
    const g__IOHIDLoadServiceFilterBundles_ptr = Module.getExportByName(g_proc_name, '_IOHIDLoadServiceFilterBundles');
    console.log("[i] g__IOHIDLoadServiceFilterBundles_ptr addr: " + g__IOHIDLoadServiceFilterBundles_ptr)

    Interceptor.attach(g__IOHIDLoadServiceFilterBundles_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDLoadServiceFilterBundles")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDLoadServiceFilterBundles");
        }
    });        
 
    const g__IOHIDLoadServicePluginBundles_ptr = Module.getExportByName(g_proc_name, '_IOHIDLoadServicePluginBundles');
    console.log("[i] g__IOHIDLoadServicePluginBundles_ptr addr: " + g__IOHIDLoadServicePluginBundles_ptr)

    Interceptor.attach(g__IOHIDLoadServicePluginBundles_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDLoadServicePluginBundles")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDLoadServicePluginBundles");
        }
    });        
 
    const g__IOHIDLoadSessionFilterBundles_ptr = Module.getExportByName(g_proc_name, '_IOHIDLoadSessionFilterBundles');
    console.log("[i] g__IOHIDLoadSessionFilterBundles_ptr addr: " + g__IOHIDLoadSessionFilterBundles_ptr)

    Interceptor.attach(g__IOHIDLoadSessionFilterBundles_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDLoadSessionFilterBundles")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDLoadSessionFilterBundles");
        }
    });        
 
    const g__IOHIDLog_ptr = Module.getExportByName(g_proc_name, '_IOHIDLog');
    console.log("[i] g__IOHIDLog_ptr addr: " + g__IOHIDLog_ptr)

    Interceptor.attach(g__IOHIDLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDLog");
        }
    });        
 
    const g__IOHIDLogCategory_ptr = Module.getExportByName(g_proc_name, '_IOHIDLogCategory');
    console.log("[i] g__IOHIDLogCategory_ptr addr: " + g__IOHIDLogCategory_ptr)

    Interceptor.attach(g__IOHIDLogCategory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDLogCategory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDLogCategory");
        }
    });        
 
    const g__IOHIDObjectCreateInstance_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectCreateInstance');
    console.log("[i] g__IOHIDObjectCreateInstance_ptr addr: " + g__IOHIDObjectCreateInstance_ptr)

    Interceptor.attach(g__IOHIDObjectCreateInstance_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectCreateInstance")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectCreateInstance");
        }
    });        
 
    const g__IOHIDObjectExtRetainCount_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectExtRetainCount');
    console.log("[i] g__IOHIDObjectExtRetainCount_ptr addr: " + g__IOHIDObjectExtRetainCount_ptr)

    Interceptor.attach(g__IOHIDObjectExtRetainCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectExtRetainCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectExtRetainCount");
        }
    });        
 
    const g__IOHIDObjectIntRetainCount_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectIntRetainCount');
    console.log("[i] g__IOHIDObjectIntRetainCount_ptr addr: " + g__IOHIDObjectIntRetainCount_ptr)

    Interceptor.attach(g__IOHIDObjectIntRetainCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectIntRetainCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectIntRetainCount");
        }
    });        
 
    const g__IOHIDObjectInternalRelease_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectInternalRelease');
    console.log("[i] g__IOHIDObjectInternalRelease_ptr addr: " + g__IOHIDObjectInternalRelease_ptr)

    Interceptor.attach(g__IOHIDObjectInternalRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectInternalRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectInternalRelease");
        }
    });        
 
    const g__IOHIDObjectInternalReleaseCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectInternalReleaseCallback');
    console.log("[i] g__IOHIDObjectInternalReleaseCallback_ptr addr: " + g__IOHIDObjectInternalReleaseCallback_ptr)

    Interceptor.attach(g__IOHIDObjectInternalReleaseCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectInternalReleaseCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectInternalReleaseCallback");
        }
    });        
 
    const g__IOHIDObjectInternalRetain_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectInternalRetain');
    console.log("[i] g__IOHIDObjectInternalRetain_ptr addr: " + g__IOHIDObjectInternalRetain_ptr)

    Interceptor.attach(g__IOHIDObjectInternalRetain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectInternalRetain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectInternalRetain");
        }
    });        
 
    const g__IOHIDObjectInternalRetainCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectInternalRetainCallback');
    console.log("[i] g__IOHIDObjectInternalRetainCallback_ptr addr: " + g__IOHIDObjectInternalRetainCallback_ptr)

    Interceptor.attach(g__IOHIDObjectInternalRetainCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectInternalRetainCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectInternalRetainCallback");
        }
    });        
 
    const g__IOHIDObjectRetainCount_ptr = Module.getExportByName(g_proc_name, '_IOHIDObjectRetainCount');
    console.log("[i] g__IOHIDObjectRetainCount_ptr addr: " + g__IOHIDObjectRetainCount_ptr)

    Interceptor.attach(g__IOHIDObjectRetainCount_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDObjectRetainCount")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDObjectRetainCount");
        }
    });        
 
    const g__IOHIDPlugInInstanceCacheAdd_ptr = Module.getExportByName(g_proc_name, '_IOHIDPlugInInstanceCacheAdd');
    console.log("[i] g__IOHIDPlugInInstanceCacheAdd_ptr addr: " + g__IOHIDPlugInInstanceCacheAdd_ptr)

    Interceptor.attach(g__IOHIDPlugInInstanceCacheAdd_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDPlugInInstanceCacheAdd")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDPlugInInstanceCacheAdd");
        }
    });        
 
    const g__IOHIDPlugInInstanceCacheClear_ptr = Module.getExportByName(g_proc_name, '_IOHIDPlugInInstanceCacheClear');
    console.log("[i] g__IOHIDPlugInInstanceCacheClear_ptr addr: " + g__IOHIDPlugInInstanceCacheClear_ptr)

    Interceptor.attach(g__IOHIDPlugInInstanceCacheClear_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDPlugInInstanceCacheClear")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDPlugInInstanceCacheClear");
        }
    });        
 
    const g__IOHIDPlugInInstanceCacheIsEmpty_ptr = Module.getExportByName(g_proc_name, '_IOHIDPlugInInstanceCacheIsEmpty');
    console.log("[i] g__IOHIDPlugInInstanceCacheIsEmpty_ptr addr: " + g__IOHIDPlugInInstanceCacheIsEmpty_ptr)

    Interceptor.attach(g__IOHIDPlugInInstanceCacheIsEmpty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDPlugInInstanceCacheIsEmpty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDPlugInInstanceCacheIsEmpty");
        }
    });        
 
    const g__IOHIDQueueCopyElements_ptr = Module.getExportByName(g_proc_name, '_IOHIDQueueCopyElements');
    console.log("[i] g__IOHIDQueueCopyElements_ptr addr: " + g__IOHIDQueueCopyElements_ptr)

    Interceptor.attach(g__IOHIDQueueCopyElements_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDQueueCopyElements")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDQueueCopyElements");
        }
    });        
 
    const g__IOHIDSerialize_ptr = Module.getExportByName(g_proc_name, '_IOHIDSerialize');
    console.log("[i] g__IOHIDSerialize_ptr addr: " + g__IOHIDSerialize_ptr)

    Interceptor.attach(g__IOHIDSerialize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSerialize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSerialize");
        }
    });        
 
    const g__IOHIDServiceAddConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceAddConnection');
    console.log("[i] g__IOHIDServiceAddConnection_ptr addr: " + g__IOHIDServiceAddConnection_ptr)

    Interceptor.attach(g__IOHIDServiceAddConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceAddConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceAddConnection");
        }
    });        
 
    const g__IOHIDServiceClientCacheProperties_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientCacheProperties');
    console.log("[i] g__IOHIDServiceClientCacheProperties_ptr addr: " + g__IOHIDServiceClientCacheProperties_ptr)

    Interceptor.attach(g__IOHIDServiceClientCacheProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientCacheProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientCacheProperties");
        }
    });        
 
    const g__IOHIDServiceClientCopyUsageProp_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientCopyUsageProp');
    console.log("[i] g__IOHIDServiceClientCopyUsageProp_ptr addr: " + g__IOHIDServiceClientCopyUsageProp_ptr)

    Interceptor.attach(g__IOHIDServiceClientCopyUsageProp_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientCopyUsageProp")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientCopyUsageProp");
        }
    });        
 
    const g__IOHIDServiceClientCreate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientCreate');
    console.log("[i] g__IOHIDServiceClientCreate_ptr addr: " + g__IOHIDServiceClientCreate_ptr)

    Interceptor.attach(g__IOHIDServiceClientCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientCreate");
        }
    });        
 
    const g__IOHIDServiceClientCreatePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientCreatePrivate');
    console.log("[i] g__IOHIDServiceClientCreatePrivate_ptr addr: " + g__IOHIDServiceClientCreatePrivate_ptr)

    Interceptor.attach(g__IOHIDServiceClientCreatePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientCreatePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientCreatePrivate");
        }
    });        
 
    const g__IOHIDServiceClientCreateVirtual_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientCreateVirtual');
    console.log("[i] g__IOHIDServiceClientCreateVirtual_ptr addr: " + g__IOHIDServiceClientCreateVirtual_ptr)

    Interceptor.attach(g__IOHIDServiceClientCreateVirtual_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientCreateVirtual")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientCreateVirtual");
        }
    });        
 
    const g__IOHIDServiceClientDispatchServiceRemoval_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientDispatchServiceRemoval');
    console.log("[i] g__IOHIDServiceClientDispatchServiceRemoval_ptr addr: " + g__IOHIDServiceClientDispatchServiceRemoval_ptr)

    Interceptor.attach(g__IOHIDServiceClientDispatchServiceRemoval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientDispatchServiceRemoval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientDispatchServiceRemoval");
        }
    });        
 
    const g__IOHIDServiceClientRefresh_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientRefresh');
    console.log("[i] g__IOHIDServiceClientRefresh_ptr addr: " + g__IOHIDServiceClientRefresh_ptr)

    Interceptor.attach(g__IOHIDServiceClientRefresh_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientRefresh")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientRefresh");
        }
    });        
 
    const g__IOHIDServiceClientReleasePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClientReleasePrivate');
    console.log("[i] g__IOHIDServiceClientReleasePrivate_ptr addr: " + g__IOHIDServiceClientReleasePrivate_ptr)

    Interceptor.attach(g__IOHIDServiceClientReleasePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClientReleasePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClientReleasePrivate");
        }
    });        
 
    const g__IOHIDServiceClose_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceClose');
    console.log("[i] g__IOHIDServiceClose_ptr addr: " + g__IOHIDServiceClose_ptr)

    Interceptor.attach(g__IOHIDServiceClose_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceClose")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceClose");
        }
    });        
 
    const g__IOHIDServiceContainsReportInterval_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceContainsReportInterval');
    console.log("[i] g__IOHIDServiceContainsReportInterval_ptr addr: " + g__IOHIDServiceContainsReportInterval_ptr)

    Interceptor.attach(g__IOHIDServiceContainsReportInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceContainsReportInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceContainsReportInterval");
        }
    });        
 
    const g__IOHIDServiceContainsReportIntervalForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceContainsReportIntervalForClient');
    console.log("[i] g__IOHIDServiceContainsReportIntervalForClient_ptr addr: " + g__IOHIDServiceContainsReportIntervalForClient_ptr)

    Interceptor.attach(g__IOHIDServiceContainsReportIntervalForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceContainsReportIntervalForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceContainsReportIntervalForClient");
        }
    });        
 
    const g__IOHIDServiceCopyConnectionCache_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyConnectionCache');
    console.log("[i] g__IOHIDServiceCopyConnectionCache_ptr addr: " + g__IOHIDServiceCopyConnectionCache_ptr)

    Interceptor.attach(g__IOHIDServiceCopyConnectionCache_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyConnectionCache")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyConnectionCache");
        }
    });        
 
    const g__IOHIDServiceCopyConnectionIntervals_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyConnectionIntervals');
    console.log("[i] g__IOHIDServiceCopyConnectionIntervals_ptr addr: " + g__IOHIDServiceCopyConnectionIntervals_ptr)

    Interceptor.attach(g__IOHIDServiceCopyConnectionIntervals_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyConnectionIntervals")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyConnectionIntervals");
        }
    });        
 
    const g__IOHIDServiceCopyConnections_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyConnections');
    console.log("[i] g__IOHIDServiceCopyConnections_ptr addr: " + g__IOHIDServiceCopyConnections_ptr)

    Interceptor.attach(g__IOHIDServiceCopyConnections_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyConnections")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyConnections");
        }
    });        
 
    const g__IOHIDServiceCopyDispatchQueue_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyDispatchQueue');
    console.log("[i] g__IOHIDServiceCopyDispatchQueue_ptr addr: " + g__IOHIDServiceCopyDispatchQueue_ptr)

    Interceptor.attach(g__IOHIDServiceCopyDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyDispatchQueue");
        }
    });        
 
    const g__IOHIDServiceCopyEventCounts_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyEventCounts');
    console.log("[i] g__IOHIDServiceCopyEventCounts_ptr addr: " + g__IOHIDServiceCopyEventCounts_ptr)

    Interceptor.attach(g__IOHIDServiceCopyEventCounts_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyEventCounts")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyEventCounts");
        }
    });        
 
    const g__IOHIDServiceCopyEventLog_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyEventLog');
    console.log("[i] g__IOHIDServiceCopyEventLog_ptr addr: " + g__IOHIDServiceCopyEventLog_ptr)

    Interceptor.attach(g__IOHIDServiceCopyEventLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyEventLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyEventLog");
        }
    });        
 
    const g__IOHIDServiceCopyFilterDebugInfoForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyFilterDebugInfoForClient');
    console.log("[i] g__IOHIDServiceCopyFilterDebugInfoForClient_ptr addr: " + g__IOHIDServiceCopyFilterDebugInfoForClient_ptr)

    Interceptor.attach(g__IOHIDServiceCopyFilterDebugInfoForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyFilterDebugInfoForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyFilterDebugInfoForClient");
        }
    });        
 
    const g__IOHIDServiceCopyPropertiesForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyPropertiesForClient');
    console.log("[i] g__IOHIDServiceCopyPropertiesForClient_ptr addr: " + g__IOHIDServiceCopyPropertiesForClient_ptr)

    Interceptor.attach(g__IOHIDServiceCopyPropertiesForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyPropertiesForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyPropertiesForClient");
        }
    });        
 
    const g__IOHIDServiceCopyPropertyForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyPropertyForClient');
    console.log("[i] g__IOHIDServiceCopyPropertyForClient_ptr addr: " + g__IOHIDServiceCopyPropertyForClient_ptr)

    Interceptor.attach(g__IOHIDServiceCopyPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyPropertyForClient");
        }
    });        
 
    const g__IOHIDServiceCopyProperyFromPlugin_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyProperyFromPlugin');
    console.log("[i] g__IOHIDServiceCopyProperyFromPlugin_ptr addr: " + g__IOHIDServiceCopyProperyFromPlugin_ptr)

    Interceptor.attach(g__IOHIDServiceCopyProperyFromPlugin_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyProperyFromPlugin")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyProperyFromPlugin");
        }
    });        
 
    const g__IOHIDServiceCopyServiceInfoForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyServiceInfoForClient');
    console.log("[i] g__IOHIDServiceCopyServiceInfoForClient_ptr addr: " + g__IOHIDServiceCopyServiceInfoForClient_ptr)

    Interceptor.attach(g__IOHIDServiceCopyServiceInfoForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyServiceInfoForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyServiceInfoForClient");
        }
    });        
 
    const g__IOHIDServiceCopyServiceRecordForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCopyServiceRecordForClient');
    console.log("[i] g__IOHIDServiceCopyServiceRecordForClient_ptr addr: " + g__IOHIDServiceCopyServiceRecordForClient_ptr)

    Interceptor.attach(g__IOHIDServiceCopyServiceRecordForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCopyServiceRecordForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCopyServiceRecordForClient");
        }
    });        
 
    const g__IOHIDServiceCreate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCreate');
    console.log("[i] g__IOHIDServiceCreate_ptr addr: " + g__IOHIDServiceCreate_ptr)

    Interceptor.attach(g__IOHIDServiceCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCreate");
        }
    });        
 
    const g__IOHIDServiceCreatePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCreatePrivate');
    console.log("[i] g__IOHIDServiceCreatePrivate_ptr addr: " + g__IOHIDServiceCreatePrivate_ptr)

    Interceptor.attach(g__IOHIDServiceCreatePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCreatePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCreatePrivate");
        }
    });        
 
    const g__IOHIDServiceCreateVirtual_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCreateVirtual');
    console.log("[i] g__IOHIDServiceCreateVirtual_ptr addr: " + g__IOHIDServiceCreateVirtual_ptr)

    Interceptor.attach(g__IOHIDServiceCreateVirtual_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCreateVirtual")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCreateVirtual");
        }
    });        
 
    const g__IOHIDServiceCreateVirtualForConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCreateVirtualForConnection');
    console.log("[i] g__IOHIDServiceCreateVirtualForConnection_ptr addr: " + g__IOHIDServiceCreateVirtualForConnection_ptr)

    Interceptor.attach(g__IOHIDServiceCreateVirtualForConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCreateVirtualForConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCreateVirtualForConnection");
        }
    });        
 
    const g__IOHIDServiceCurrentBatchInterval_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceCurrentBatchInterval');
    console.log("[i] g__IOHIDServiceCurrentBatchInterval_ptr addr: " + g__IOHIDServiceCurrentBatchInterval_ptr)

    Interceptor.attach(g__IOHIDServiceCurrentBatchInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceCurrentBatchInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceCurrentBatchInterval");
        }
    });        
 
    const g__IOHIDServiceDispatchEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceDispatchEvent');
    console.log("[i] g__IOHIDServiceDispatchEvent_ptr addr: " + g__IOHIDServiceDispatchEvent_ptr)

    Interceptor.attach(g__IOHIDServiceDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceDispatchEvent");
        }
    });        
 
    const g__IOHIDServiceGetEventDeadlineForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceGetEventDeadlineForClient');
    console.log("[i] g__IOHIDServiceGetEventDeadlineForClient_ptr addr: " + g__IOHIDServiceGetEventDeadlineForClient_ptr)

    Interceptor.attach(g__IOHIDServiceGetEventDeadlineForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceGetEventDeadlineForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceGetEventDeadlineForClient");
        }
    });        
 
    const g__IOHIDServiceGetOwner_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceGetOwner');
    console.log("[i] g__IOHIDServiceGetOwner_ptr addr: " + g__IOHIDServiceGetOwner_ptr)

    Interceptor.attach(g__IOHIDServiceGetOwner_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceGetOwner")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceGetOwner");
        }
    });        
 
    const g__IOHIDServiceGetReportInterval_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceGetReportInterval');
    console.log("[i] g__IOHIDServiceGetReportInterval_ptr addr: " + g__IOHIDServiceGetReportInterval_ptr)

    Interceptor.attach(g__IOHIDServiceGetReportInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceGetReportInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceGetReportInterval");
        }
    });        
 
    const g__IOHIDServiceGetReportIntervalForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceGetReportIntervalForClient');
    console.log("[i] g__IOHIDServiceGetReportIntervalForClient_ptr addr: " + g__IOHIDServiceGetReportIntervalForClient_ptr)

    Interceptor.attach(g__IOHIDServiceGetReportIntervalForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceGetReportIntervalForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceGetReportIntervalForClient");
        }
    });        
 
    const g__IOHIDServiceGetSenderID_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceGetSenderID');
    console.log("[i] g__IOHIDServiceGetSenderID_ptr addr: " + g__IOHIDServiceGetSenderID_ptr)

    Interceptor.attach(g__IOHIDServiceGetSenderID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceGetSenderID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceGetSenderID");
        }
    });        
 
    const g__IOHIDServiceHidden_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceHidden');
    console.log("[i] g__IOHIDServiceHidden_ptr addr: " + g__IOHIDServiceHidden_ptr)

    Interceptor.attach(g__IOHIDServiceHidden_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceHidden")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceHidden");
        }
    });        
 
    const g__IOHIDServiceInitVirtual_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceInitVirtual');
    console.log("[i] g__IOHIDServiceInitVirtual_ptr addr: " + g__IOHIDServiceInitVirtual_ptr)

    Interceptor.attach(g__IOHIDServiceInitVirtual_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceInitVirtual")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceInitVirtual");
        }
    });        
 
    const g__IOHIDServiceIsInactive_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceIsInactive');
    console.log("[i] g__IOHIDServiceIsInactive_ptr addr: " + g__IOHIDServiceIsInactive_ptr)

    Interceptor.attach(g__IOHIDServiceIsInactive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceIsInactive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceIsInactive");
        }
    });        
 
    const g__IOHIDServiceIsProtected_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceIsProtected');
    console.log("[i] g__IOHIDServiceIsProtected_ptr addr: " + g__IOHIDServiceIsProtected_ptr)

    Interceptor.attach(g__IOHIDServiceIsProtected_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceIsProtected")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceIsProtected");
        }
    });        
 
    const g__IOHIDServiceOpen_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceOpen');
    console.log("[i] g__IOHIDServiceOpen_ptr addr: " + g__IOHIDServiceOpen_ptr)

    Interceptor.attach(g__IOHIDServiceOpen_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceOpen")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceOpen");
        }
    });        
 
    const g__IOHIDServiceReleasePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceReleasePrivate');
    console.log("[i] g__IOHIDServiceReleasePrivate_ptr addr: " + g__IOHIDServiceReleasePrivate_ptr)

    Interceptor.attach(g__IOHIDServiceReleasePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceReleasePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceReleasePrivate");
        }
    });        
 
    const g__IOHIDServiceRemoveConnection_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceRemoveConnection');
    console.log("[i] g__IOHIDServiceRemoveConnection_ptr addr: " + g__IOHIDServiceRemoveConnection_ptr)

    Interceptor.attach(g__IOHIDServiceRemoveConnection_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceRemoveConnection")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceRemoveConnection");
        }
    });        
 
    const g__IOHIDServiceRemovePropertiesForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceRemovePropertiesForClient');
    console.log("[i] g__IOHIDServiceRemovePropertiesForClient_ptr addr: " + g__IOHIDServiceRemovePropertiesForClient_ptr)

    Interceptor.attach(g__IOHIDServiceRemovePropertiesForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceRemovePropertiesForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceRemovePropertiesForClient");
        }
    });        
 
    const g__IOHIDServiceScheduleAsync_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceScheduleAsync');
    console.log("[i] g__IOHIDServiceScheduleAsync_ptr addr: " + g__IOHIDServiceScheduleAsync_ptr)

    Interceptor.attach(g__IOHIDServiceScheduleAsync_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceScheduleAsync")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceScheduleAsync");
        }
    });        
 
    const g__IOHIDServiceSetBatchIntervalForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSetBatchIntervalForClient');
    console.log("[i] g__IOHIDServiceSetBatchIntervalForClient_ptr addr: " + g__IOHIDServiceSetBatchIntervalForClient_ptr)

    Interceptor.attach(g__IOHIDServiceSetBatchIntervalForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSetBatchIntervalForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSetBatchIntervalForClient");
        }
    });        
 
    const g__IOHIDServiceSetEventCallback_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSetEventCallback');
    console.log("[i] g__IOHIDServiceSetEventCallback_ptr addr: " + g__IOHIDServiceSetEventCallback_ptr)

    Interceptor.attach(g__IOHIDServiceSetEventCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSetEventCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSetEventCallback");
        }
    });        
 
    const g__IOHIDServiceSetEventDeadlineForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSetEventDeadlineForClient');
    console.log("[i] g__IOHIDServiceSetEventDeadlineForClient_ptr addr: " + g__IOHIDServiceSetEventDeadlineForClient_ptr)

    Interceptor.attach(g__IOHIDServiceSetEventDeadlineForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSetEventDeadlineForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSetEventDeadlineForClient");
        }
    });        
 
    const g__IOHIDServiceSetMiscDebugDebugInfo_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSetMiscDebugDebugInfo');
    console.log("[i] g__IOHIDServiceSetMiscDebugDebugInfo_ptr addr: " + g__IOHIDServiceSetMiscDebugDebugInfo_ptr)

    Interceptor.attach(g__IOHIDServiceSetMiscDebugDebugInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSetMiscDebugDebugInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSetMiscDebugDebugInfo");
        }
    });        
 
    const g__IOHIDServiceSetPropertyForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSetPropertyForClient');
    console.log("[i] g__IOHIDServiceSetPropertyForClient_ptr addr: " + g__IOHIDServiceSetPropertyForClient_ptr)

    Interceptor.attach(g__IOHIDServiceSetPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSetPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSetPropertyForClient");
        }
    });        
 
    const g__IOHIDServiceSetReportIntervalForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSetReportIntervalForClient');
    console.log("[i] g__IOHIDServiceSetReportIntervalForClient_ptr addr: " + g__IOHIDServiceSetReportIntervalForClient_ptr)

    Interceptor.attach(g__IOHIDServiceSetReportIntervalForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSetReportIntervalForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSetReportIntervalForClient");
        }
    });        
 
    const g__IOHIDServiceSupportReportLatency_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceSupportReportLatency');
    console.log("[i] g__IOHIDServiceSupportReportLatency_ptr addr: " + g__IOHIDServiceSupportReportLatency_ptr)

    Interceptor.attach(g__IOHIDServiceSupportReportLatency_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceSupportReportLatency")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceSupportReportLatency");
        }
    });        
 
    const g__IOHIDServiceTerminate_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceTerminate');
    console.log("[i] g__IOHIDServiceTerminate_ptr addr: " + g__IOHIDServiceTerminate_ptr)

    Interceptor.attach(g__IOHIDServiceTerminate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceTerminate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceTerminate");
        }
    });        
 
    const g__IOHIDServiceUnscheduleAsync_ptr = Module.getExportByName(g_proc_name, '_IOHIDServiceUnscheduleAsync');
    console.log("[i] g__IOHIDServiceUnscheduleAsync_ptr addr: " + g__IOHIDServiceUnscheduleAsync_ptr)

    Interceptor.attach(g__IOHIDServiceUnscheduleAsync_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDServiceUnscheduleAsync")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDServiceUnscheduleAsync");
        }
    });        
 
    const g__IOHIDSessionCreateActivityNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDSessionCreateActivityNotification');
    console.log("[i] g__IOHIDSessionCreateActivityNotification_ptr addr: " + g__IOHIDSessionCreateActivityNotification_ptr)

    Interceptor.attach(g__IOHIDSessionCreateActivityNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSessionCreateActivityNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSessionCreateActivityNotification");
        }
    });        
 
    const g__IOHIDSessionCreatePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDSessionCreatePrivate');
    console.log("[i] g__IOHIDSessionCreatePrivate_ptr addr: " + g__IOHIDSessionCreatePrivate_ptr)

    Interceptor.attach(g__IOHIDSessionCreatePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSessionCreatePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSessionCreatePrivate");
        }
    });        
 
    const g__IOHIDSessionDispatchEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDSessionDispatchEvent');
    console.log("[i] g__IOHIDSessionDispatchEvent_ptr addr: " + g__IOHIDSessionDispatchEvent_ptr)

    Interceptor.attach(g__IOHIDSessionDispatchEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSessionDispatchEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSessionDispatchEvent");
        }
    });        
 
    const g__IOHIDSessionGetPropertyForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDSessionGetPropertyForClient');
    console.log("[i] g__IOHIDSessionGetPropertyForClient_ptr addr: " + g__IOHIDSessionGetPropertyForClient_ptr)

    Interceptor.attach(g__IOHIDSessionGetPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSessionGetPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSessionGetPropertyForClient");
        }
    });        
 
    const g__IOHIDSessionReleasePrivate_ptr = Module.getExportByName(g_proc_name, '_IOHIDSessionReleasePrivate');
    console.log("[i] g__IOHIDSessionReleasePrivate_ptr addr: " + g__IOHIDSessionReleasePrivate_ptr)

    Interceptor.attach(g__IOHIDSessionReleasePrivate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSessionReleasePrivate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSessionReleasePrivate");
        }
    });        
 
    const g__IOHIDSessionSetPropertyForClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDSessionSetPropertyForClient');
    console.log("[i] g__IOHIDSessionSetPropertyForClient_ptr addr: " + g__IOHIDSessionSetPropertyForClient_ptr)

    Interceptor.attach(g__IOHIDSessionSetPropertyForClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSessionSetPropertyForClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSessionSetPropertyForClient");
        }
    });        
 
    const g__IOHIDSetFixedMouseLocation_ptr = Module.getExportByName(g_proc_name, '_IOHIDSetFixedMouseLocation');
    console.log("[i] g__IOHIDSetFixedMouseLocation_ptr addr: " + g__IOHIDSetFixedMouseLocation_ptr)

    Interceptor.attach(g__IOHIDSetFixedMouseLocation_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSetFixedMouseLocation")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSetFixedMouseLocation");
        }
    });        
 
    const g__IOHIDSimpleQueueApplyBlock_ptr = Module.getExportByName(g_proc_name, '_IOHIDSimpleQueueApplyBlock');
    console.log("[i] g__IOHIDSimpleQueueApplyBlock_ptr addr: " + g__IOHIDSimpleQueueApplyBlock_ptr)

    Interceptor.attach(g__IOHIDSimpleQueueApplyBlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSimpleQueueApplyBlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSimpleQueueApplyBlock");
        }
    });        
 
    const g__IOHIDSimpleQueueCreate_ptr = Module.getExportByName(g_proc_name, '_IOHIDSimpleQueueCreate');
    console.log("[i] g__IOHIDSimpleQueueCreate_ptr addr: " + g__IOHIDSimpleQueueCreate_ptr)

    Interceptor.attach(g__IOHIDSimpleQueueCreate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSimpleQueueCreate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSimpleQueueCreate");
        }
    });        
 
    const g__IOHIDSimpleQueueDequeue_ptr = Module.getExportByName(g_proc_name, '_IOHIDSimpleQueueDequeue');
    console.log("[i] g__IOHIDSimpleQueueDequeue_ptr addr: " + g__IOHIDSimpleQueueDequeue_ptr)

    Interceptor.attach(g__IOHIDSimpleQueueDequeue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSimpleQueueDequeue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSimpleQueueDequeue");
        }
    });        
 
    const g__IOHIDSimpleQueueEnqueue_ptr = Module.getExportByName(g_proc_name, '_IOHIDSimpleQueueEnqueue');
    console.log("[i] g__IOHIDSimpleQueueEnqueue_ptr addr: " + g__IOHIDSimpleQueueEnqueue_ptr)

    Interceptor.attach(g__IOHIDSimpleQueueEnqueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSimpleQueueEnqueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSimpleQueueEnqueue");
        }
    });        
 
    const g__IOHIDSimpleQueuePeek_ptr = Module.getExportByName(g_proc_name, '_IOHIDSimpleQueuePeek');
    console.log("[i] g__IOHIDSimpleQueuePeek_ptr addr: " + g__IOHIDSimpleQueuePeek_ptr)

    Interceptor.attach(g__IOHIDSimpleQueuePeek_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDSimpleQueuePeek")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDSimpleQueuePeek");
        }
    });        
 
    const g__IOHIDStringAppendIndendationAndFormat_ptr = Module.getExportByName(g_proc_name, '_IOHIDStringAppendIndendationAndFormat');
    console.log("[i] g__IOHIDStringAppendIndendationAndFormat_ptr addr: " + g__IOHIDStringAppendIndendationAndFormat_ptr)

    Interceptor.attach(g__IOHIDStringAppendIndendationAndFormat_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDStringAppendIndendationAndFormat")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDStringAppendIndendationAndFormat");
        }
    });        
 
    const g__IOHIDUnserializeAndVMDealloc_ptr = Module.getExportByName(g_proc_name, '_IOHIDUnserializeAndVMDealloc');
    console.log("[i] g__IOHIDUnserializeAndVMDealloc_ptr addr: " + g__IOHIDUnserializeAndVMDealloc_ptr)

    Interceptor.attach(g__IOHIDUnserializeAndVMDealloc_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDUnserializeAndVMDealloc")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDUnserializeAndVMDealloc");
        }
    });        
 
    const g__IOHIDUnserializeAndVMDeallocWithTypeID_ptr = Module.getExportByName(g_proc_name, '_IOHIDUnserializeAndVMDeallocWithTypeID');
    console.log("[i] g__IOHIDUnserializeAndVMDeallocWithTypeID_ptr addr: " + g__IOHIDUnserializeAndVMDeallocWithTypeID_ptr)

    Interceptor.attach(g__IOHIDUnserializeAndVMDeallocWithTypeID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDUnserializeAndVMDeallocWithTypeID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDUnserializeAndVMDeallocWithTypeID");
        }
    });        
 
    const g__IOHIDValueCopyToElementValueHeader_ptr = Module.getExportByName(g_proc_name, '_IOHIDValueCopyToElementValueHeader');
    console.log("[i] g__IOHIDValueCopyToElementValueHeader_ptr addr: " + g__IOHIDValueCopyToElementValueHeader_ptr)

    Interceptor.attach(g__IOHIDValueCopyToElementValueHeader_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDValueCopyToElementValueHeader")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDValueCopyToElementValueHeader");
        }
    });        
 
    const g__IOHIDValueCopyToElementValuePtr_ptr = Module.getExportByName(g_proc_name, '_IOHIDValueCopyToElementValuePtr');
    console.log("[i] g__IOHIDValueCopyToElementValuePtr_ptr addr: " + g__IOHIDValueCopyToElementValuePtr_ptr)

    Interceptor.attach(g__IOHIDValueCopyToElementValuePtr_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDValueCopyToElementValuePtr")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDValueCopyToElementValuePtr");
        }
    });        
 
    const g__IOHIDValueCreateWithElementValuePtr_ptr = Module.getExportByName(g_proc_name, '_IOHIDValueCreateWithElementValuePtr');
    console.log("[i] g__IOHIDValueCreateWithElementValuePtr_ptr addr: " + g__IOHIDValueCreateWithElementValuePtr_ptr)

    Interceptor.attach(g__IOHIDValueCreateWithElementValuePtr_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDValueCreateWithElementValuePtr")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDValueCreateWithElementValuePtr");
        }
    });        
 
    const g__IOHIDValueCreateWithStruct_ptr = Module.getExportByName(g_proc_name, '_IOHIDValueCreateWithStruct');
    console.log("[i] g__IOHIDValueCreateWithStruct_ptr addr: " + g__IOHIDValueCreateWithStruct_ptr)

    Interceptor.attach(g__IOHIDValueCreateWithStruct_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDValueCreateWithStruct")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDValueCreateWithStruct");
        }
    });        
 
    const g__IOHIDValueCreateWithValue_ptr = Module.getExportByName(g_proc_name, '_IOHIDValueCreateWithValue');
    console.log("[i] g__IOHIDValueCreateWithValue_ptr addr: " + g__IOHIDValueCreateWithValue_ptr)

    Interceptor.attach(g__IOHIDValueCreateWithValue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDValueCreateWithValue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDValueCreateWithValue");
        }
    });        
 
    const g__IOHIDValueGetFlags_ptr = Module.getExportByName(g_proc_name, '_IOHIDValueGetFlags');
    console.log("[i] g__IOHIDValueGetFlags_ptr addr: " + g__IOHIDValueGetFlags_ptr)

    Interceptor.attach(g__IOHIDValueGetFlags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDValueGetFlags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDValueGetFlags");
        }
    });        
 
    const g__IOHIDVirtuaServiceClientGetEventSystemClient_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtuaServiceClientGetEventSystemClient');
    console.log("[i] g__IOHIDVirtuaServiceClientGetEventSystemClient_ptr addr: " + g__IOHIDVirtuaServiceClientGetEventSystemClient_ptr)

    Interceptor.attach(g__IOHIDVirtuaServiceClientGetEventSystemClient_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtuaServiceClientGetEventSystemClient")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtuaServiceClientGetEventSystemClient");
        }
    });        
 
    const g__IOHIDVirtualServiceClientCopyEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtualServiceClientCopyEvent');
    console.log("[i] g__IOHIDVirtualServiceClientCopyEvent_ptr addr: " + g__IOHIDVirtualServiceClientCopyEvent_ptr)

    Interceptor.attach(g__IOHIDVirtualServiceClientCopyEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtualServiceClientCopyEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtualServiceClientCopyEvent");
        }
    });        
 
    const g__IOHIDVirtualServiceClientCopyMatchingEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtualServiceClientCopyMatchingEvent');
    console.log("[i] g__IOHIDVirtualServiceClientCopyMatchingEvent_ptr addr: " + g__IOHIDVirtualServiceClientCopyMatchingEvent_ptr)

    Interceptor.attach(g__IOHIDVirtualServiceClientCopyMatchingEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtualServiceClientCopyMatchingEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtualServiceClientCopyMatchingEvent");
        }
    });        
 
    const g__IOHIDVirtualServiceClientCopyProperty_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtualServiceClientCopyProperty');
    console.log("[i] g__IOHIDVirtualServiceClientCopyProperty_ptr addr: " + g__IOHIDVirtualServiceClientCopyProperty_ptr)

    Interceptor.attach(g__IOHIDVirtualServiceClientCopyProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtualServiceClientCopyProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtualServiceClientCopyProperty");
        }
    });        
 
    const g__IOHIDVirtualServiceClientNotification_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtualServiceClientNotification');
    console.log("[i] g__IOHIDVirtualServiceClientNotification_ptr addr: " + g__IOHIDVirtualServiceClientNotification_ptr)

    Interceptor.attach(g__IOHIDVirtualServiceClientNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtualServiceClientNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtualServiceClientNotification");
        }
    });        
 
    const g__IOHIDVirtualServiceClientSetOputputEvent_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtualServiceClientSetOputputEvent');
    console.log("[i] g__IOHIDVirtualServiceClientSetOputputEvent_ptr addr: " + g__IOHIDVirtualServiceClientSetOputputEvent_ptr)

    Interceptor.attach(g__IOHIDVirtualServiceClientSetOputputEvent_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtualServiceClientSetOputputEvent")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtualServiceClientSetOputputEvent");
        }
    });        
 
    const g__IOHIDVirtualServiceClientSetProperty_ptr = Module.getExportByName(g_proc_name, '_IOHIDVirtualServiceClientSetProperty');
    console.log("[i] g__IOHIDVirtualServiceClientSetProperty_ptr addr: " + g__IOHIDVirtualServiceClientSetProperty_ptr)

    Interceptor.attach(g__IOHIDVirtualServiceClientSetProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOHIDVirtualServiceClientSetProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOHIDVirtualServiceClientSetProperty");
        }
    });        
 
    const g__IOObjectCFRelease_ptr = Module.getExportByName(g_proc_name, '_IOObjectCFRelease');
    console.log("[i] g__IOObjectCFRelease_ptr addr: " + g__IOObjectCFRelease_ptr)

    Interceptor.attach(g__IOObjectCFRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOObjectCFRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOObjectCFRelease");
        }
    });        
 
    const g__IOObjectCFRetain_ptr = Module.getExportByName(g_proc_name, '_IOObjectCFRetain');
    console.log("[i] g__IOObjectCFRetain_ptr addr: " + g__IOObjectCFRetain_ptr)

    Interceptor.attach(g__IOObjectCFRetain_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOObjectCFRetain")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOObjectCFRetain");
        }
    });        
 
    const g__IOObjectConformsTo_ptr = Module.getExportByName(g_proc_name, '_IOObjectConformsTo');
    console.log("[i] g__IOObjectConformsTo_ptr addr: " + g__IOObjectConformsTo_ptr)

    Interceptor.attach(g__IOObjectConformsTo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOObjectConformsTo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOObjectConformsTo");
        }
    });        
 
    const g__IOObjectCopyClass_ptr = Module.getExportByName(g_proc_name, '_IOObjectCopyClass');
    console.log("[i] g__IOObjectCopyClass_ptr addr: " + g__IOObjectCopyClass_ptr)

    Interceptor.attach(g__IOObjectCopyClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOObjectCopyClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOObjectCopyClass");
        }
    });        
 
    const g__IOObjectGetClass_ptr = Module.getExportByName(g_proc_name, '_IOObjectGetClass');
    console.log("[i] g__IOObjectGetClass_ptr addr: " + g__IOObjectGetClass_ptr)

    Interceptor.attach(g__IOObjectGetClass_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOObjectGetClass")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOObjectGetClass");
        }
    });        
 
    const g__IOReadBytesFromFile_ptr = Module.getExportByName(g_proc_name, '_IOReadBytesFromFile');
    console.log("[i] g__IOReadBytesFromFile_ptr addr: " + g__IOReadBytesFromFile_ptr)

    Interceptor.attach(g__IOReadBytesFromFile_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOReadBytesFromFile")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOReadBytesFromFile");
        }
    });        
 
    const g__IOServiceGetAuthorizationID_ptr = Module.getExportByName(g_proc_name, '_IOServiceGetAuthorizationID');
    console.log("[i] g__IOServiceGetAuthorizationID_ptr addr: " + g__IOServiceGetAuthorizationID_ptr)

    Interceptor.attach(g__IOServiceGetAuthorizationID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOServiceGetAuthorizationID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOServiceGetAuthorizationID");
        }
    });        
 
    const g__IOServiceSetAuthorizationID_ptr = Module.getExportByName(g_proc_name, '_IOServiceSetAuthorizationID');
    console.log("[i] g__IOServiceSetAuthorizationID_ptr addr: " + g__IOServiceSetAuthorizationID_ptr)

    Interceptor.attach(g__IOServiceSetAuthorizationID_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOServiceSetAuthorizationID")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOServiceSetAuthorizationID");
        }
    });        
 
    const g__IOWriteBytesToFile_ptr = Module.getExportByName(g_proc_name, '_IOWriteBytesToFile');
    console.log("[i] g__IOWriteBytesToFile_ptr addr: " + g__IOWriteBytesToFile_ptr)

    Interceptor.attach(g__IOWriteBytesToFile_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _IOWriteBytesToFile")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _IOWriteBytesToFile");
        }
    });        
 
    const g__KextManagerCreatePropertyValueArray_ptr = Module.getExportByName(g_proc_name, '_KextManagerCreatePropertyValueArray');
    console.log("[i] g__KextManagerCreatePropertyValueArray_ptr addr: " + g__KextManagerCreatePropertyValueArray_ptr)

    Interceptor.attach(g__KextManagerCreatePropertyValueArray_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _KextManagerCreatePropertyValueArray")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _KextManagerCreatePropertyValueArray");
        }
    });        
 
    const g__KextManagerStopExtension_ptr = Module.getExportByName(g_proc_name, '_KextManagerStopExtension');
    console.log("[i] g__KextManagerStopExtension_ptr addr: " + g__KextManagerStopExtension_ptr)

    Interceptor.attach(g__KextManagerStopExtension_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _KextManagerStopExtension")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _KextManagerStopExtension");
        }
    });        
 
    const g__KextManagerUpdateExtension_ptr = Module.getExportByName(g_proc_name, '_KextManagerUpdateExtension');
    console.log("[i] g__KextManagerUpdateExtension_ptr addr: " + g__KextManagerUpdateExtension_ptr)

    Interceptor.attach(g__KextManagerUpdateExtension_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _KextManagerUpdateExtension")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _KextManagerUpdateExtension");
        }
    });        
 
    const g__KextManagerValidateExtension_ptr = Module.getExportByName(g_proc_name, '_KextManagerValidateExtension');
    console.log("[i] g__KextManagerValidateExtension_ptr addr: " + g__KextManagerValidateExtension_ptr)

    Interceptor.attach(g__KextManagerValidateExtension_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _KextManagerValidateExtension")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _KextManagerValidateExtension");
        }
    });        
 
    const g__OSKextBasicFilesystemAuthentication_ptr = Module.getExportByName(g_proc_name, '_OSKextBasicFilesystemAuthentication');
    console.log("[i] g__OSKextBasicFilesystemAuthentication_ptr addr: " + g__OSKextBasicFilesystemAuthentication_ptr)

    Interceptor.attach(g__OSKextBasicFilesystemAuthentication_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextBasicFilesystemAuthentication")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextBasicFilesystemAuthentication");
        }
    });        
 
    const g__OSKextCopyKernelRequests_ptr = Module.getExportByName(g_proc_name, '_OSKextCopyKernelRequests');
    console.log("[i] g__OSKextCopyKernelRequests_ptr addr: " + g__OSKextCopyKernelRequests_ptr)

    Interceptor.attach(g__OSKextCopyKernelRequests_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextCopyKernelRequests")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextCopyKernelRequests");
        }
    });        
 
    const g__OSKextCreateFolderForCacheURL_ptr = Module.getExportByName(g_proc_name, '_OSKextCreateFolderForCacheURL');
    console.log("[i] g__OSKextCreateFolderForCacheURL_ptr addr: " + g__OSKextCreateFolderForCacheURL_ptr)

    Interceptor.attach(g__OSKextCreateFolderForCacheURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextCreateFolderForCacheURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextCreateFolderForCacheURL");
        }
    });        
 
    const g__OSKextIdentifierHasApplePrefix_ptr = Module.getExportByName(g_proc_name, '_OSKextIdentifierHasApplePrefix');
    console.log("[i] g__OSKextIdentifierHasApplePrefix_ptr addr: " + g__OSKextIdentifierHasApplePrefix_ptr)

    Interceptor.attach(g__OSKextIdentifierHasApplePrefix_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextIdentifierHasApplePrefix")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextIdentifierHasApplePrefix");
        }
    });        
 
    const g__OSKextReadCache_ptr = Module.getExportByName(g_proc_name, '_OSKextReadCache');
    console.log("[i] g__OSKextReadCache_ptr addr: " + g__OSKextReadCache_ptr)

    Interceptor.attach(g__OSKextReadCache_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextReadCache")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextReadCache");
        }
    });        
 
    const g__OSKextReadFromIdentifierCacheForFolder_ptr = Module.getExportByName(g_proc_name, '_OSKextReadFromIdentifierCacheForFolder');
    console.log("[i] g__OSKextReadFromIdentifierCacheForFolder_ptr addr: " + g__OSKextReadFromIdentifierCacheForFolder_ptr)

    Interceptor.attach(g__OSKextReadFromIdentifierCacheForFolder_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextReadFromIdentifierCacheForFolder")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextReadFromIdentifierCacheForFolder");
        }
    });        
 
    const g__OSKextSendResource_ptr = Module.getExportByName(g_proc_name, '_OSKextSendResource');
    console.log("[i] g__OSKextSendResource_ptr addr: " + g__OSKextSendResource_ptr)

    Interceptor.attach(g__OSKextSendResource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextSendResource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextSendResource");
        }
    });        
 
    const g__OSKextSetAuthenticationFunction_ptr = Module.getExportByName(g_proc_name, '_OSKextSetAuthenticationFunction');
    console.log("[i] g__OSKextSetAuthenticationFunction_ptr addr: " + g__OSKextSetAuthenticationFunction_ptr)

    Interceptor.attach(g__OSKextSetAuthenticationFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextSetAuthenticationFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextSetAuthenticationFunction");
        }
    });        
 
    const g__OSKextSetLoadAuditFunction_ptr = Module.getExportByName(g_proc_name, '_OSKextSetLoadAuditFunction');
    console.log("[i] g__OSKextSetLoadAuditFunction_ptr addr: " + g__OSKextSetLoadAuditFunction_ptr)

    Interceptor.attach(g__OSKextSetLoadAuditFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextSetLoadAuditFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextSetLoadAuditFunction");
        }
    });        
 
    const g__OSKextSetPersonalityPatcherFunction_ptr = Module.getExportByName(g_proc_name, '_OSKextSetPersonalityPatcherFunction');
    console.log("[i] g__OSKextSetPersonalityPatcherFunction_ptr addr: " + g__OSKextSetPersonalityPatcherFunction_ptr)

    Interceptor.attach(g__OSKextSetPersonalityPatcherFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextSetPersonalityPatcherFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextSetPersonalityPatcherFunction");
        }
    });        
 
    const g__OSKextSetStrictAuthentication_ptr = Module.getExportByName(g_proc_name, '_OSKextSetStrictAuthentication');
    console.log("[i] g__OSKextSetStrictAuthentication_ptr addr: " + g__OSKextSetStrictAuthentication_ptr)

    Interceptor.attach(g__OSKextSetStrictAuthentication_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextSetStrictAuthentication")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextSetStrictAuthentication");
        }
    });        
 
    const g__OSKextSetStrictRecordingByLastOpened_ptr = Module.getExportByName(g_proc_name, '_OSKextSetStrictRecordingByLastOpened');
    console.log("[i] g__OSKextSetStrictRecordingByLastOpened_ptr addr: " + g__OSKextSetStrictRecordingByLastOpened_ptr)

    Interceptor.attach(g__OSKextSetStrictRecordingByLastOpened_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextSetStrictRecordingByLastOpened")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextSetStrictRecordingByLastOpened");
        }
    });        
 
    const g__OSKextWriteCache_ptr = Module.getExportByName(g_proc_name, '_OSKextWriteCache');
    console.log("[i] g__OSKextWriteCache_ptr addr: " + g__OSKextWriteCache_ptr)

    Interceptor.attach(g__OSKextWriteCache_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextWriteCache")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextWriteCache");
        }
    });        
 
    const g__OSKextWriteIdentifierCacheForKextsInDirectory_ptr = Module.getExportByName(g_proc_name, '_OSKextWriteIdentifierCacheForKextsInDirectory');
    console.log("[i] g__OSKextWriteIdentifierCacheForKextsInDirectory_ptr addr: " + g__OSKextWriteIdentifierCacheForKextsInDirectory_ptr)

    Interceptor.attach(g__OSKextWriteIdentifierCacheForKextsInDirectory_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _OSKextWriteIdentifierCacheForKextsInDirectory")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _OSKextWriteIdentifierCacheForKextsInDirectory");
        }
    });        
 
    const g__ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE_ptr = Module.getExportByName(g_proc_name, '_ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE');
    console.log("[i] g__ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE_ptr addr: " + g__ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE_ptr)

    Interceptor.attach(g__ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _ZN5kcgen26adjustKextSegmentLocationsE8ArchPairPhRKNSt3__16vectorIyNS2_9allocatorIyEEEES8_S8_S8_RNS3_IPvNS4_IS9_EEEE");
        }
    });        
 
    const g___ConnectionFunctionPickBatchInterval_ptr = Module.getExportByName(g_proc_name, '__ConnectionFunctionPickBatchInterval');
    console.log("[i] g___ConnectionFunctionPickBatchInterval_ptr addr: " + g___ConnectionFunctionPickBatchInterval_ptr)

    Interceptor.attach(g___ConnectionFunctionPickBatchInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __ConnectionFunctionPickBatchInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __ConnectionFunctionPickBatchInterval");
        }
    });        
 
    const g___CopyRecordForCientFunction_ptr = Module.getExportByName(g_proc_name, '__CopyRecordForCientFunction');
    console.log("[i] g___CopyRecordForCientFunction_ptr addr: " + g___CopyRecordForCientFunction_ptr)

    Interceptor.attach(g___CopyRecordForCientFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __CopyRecordForCientFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __CopyRecordForCientFunction");
        }
    });        
 
    const g___FunctionApplierForParameters_ptr = Module.getExportByName(g_proc_name, '__FunctionApplierForParameters');
    console.log("[i] g___FunctionApplierForParameters_ptr addr: " + g___FunctionApplierForParameters_ptr)

    Interceptor.attach(g___FunctionApplierForParameters_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __FunctionApplierForParameters")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __FunctionApplierForParameters");
        }
    });        
 
    const g___GDBIOHIDEventSystemDump_ptr = Module.getExportByName(g_proc_name, '__GDBIOHIDEventSystemDump');
    console.log("[i] g___GDBIOHIDEventSystemDump_ptr addr: " + g___GDBIOHIDEventSystemDump_ptr)

    Interceptor.attach(g___GDBIOHIDEventSystemDump_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __GDBIOHIDEventSystemDump")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __GDBIOHIDEventSystemDump");
        }
    });        
 
    const g___IOAVClassMatching_ptr = Module.getExportByName(g_proc_name, '__IOAVClassMatching');
    console.log("[i] g___IOAVClassMatching_ptr addr: " + g___IOAVClassMatching_ptr)

    Interceptor.attach(g___IOAVClassMatching_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOAVClassMatching")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOAVClassMatching");
        }
    });        
 
    const g___IOAVCopyFirstMatchingIOAVObjectOfType_ptr = Module.getExportByName(g_proc_name, '__IOAVCopyFirstMatchingIOAVObjectOfType');
    console.log("[i] g___IOAVCopyFirstMatchingIOAVObjectOfType_ptr addr: " + g___IOAVCopyFirstMatchingIOAVObjectOfType_ptr)

    Interceptor.attach(g___IOAVCopyFirstMatchingIOAVObjectOfType_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOAVCopyFirstMatchingIOAVObjectOfType")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOAVCopyFirstMatchingIOAVObjectOfType");
        }
    });        
 
    const g___IODataQueueDequeue_ptr = Module.getExportByName(g_proc_name, '__IODataQueueDequeue');
    console.log("[i] g___IODataQueueDequeue_ptr addr: " + g___IODataQueueDequeue_ptr)

    Interceptor.attach(g___IODataQueueDequeue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IODataQueueDequeue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IODataQueueDequeue");
        }
    });        
 
    const g___IODataQueuePeek_ptr = Module.getExportByName(g_proc_name, '__IODataQueuePeek');
    console.log("[i] g___IODataQueuePeek_ptr addr: " + g___IODataQueuePeek_ptr)

    Interceptor.attach(g___IODataQueuePeek_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IODataQueuePeek")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IODataQueuePeek");
        }
    });        
 
    const g___IOHIDApplyPropertiesToDeviceFromDictionary_ptr = Module.getExportByName(g_proc_name, '__IOHIDApplyPropertiesToDeviceFromDictionary');
    console.log("[i] g___IOHIDApplyPropertiesToDeviceFromDictionary_ptr addr: " + g___IOHIDApplyPropertiesToDeviceFromDictionary_ptr)

    Interceptor.attach(g___IOHIDApplyPropertiesToDeviceFromDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDApplyPropertiesToDeviceFromDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDApplyPropertiesToDeviceFromDictionary");
        }
    });        
 
    const g___IOHIDApplyPropertyToDeviceSet_ptr = Module.getExportByName(g_proc_name, '__IOHIDApplyPropertyToDeviceSet');
    console.log("[i] g___IOHIDApplyPropertyToDeviceSet_ptr addr: " + g___IOHIDApplyPropertyToDeviceSet_ptr)

    Interceptor.attach(g___IOHIDApplyPropertyToDeviceSet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDApplyPropertyToDeviceSet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDApplyPropertyToDeviceSet");
        }
    });        
 
    const g___IOHIDDeviceGetRootKey_ptr = Module.getExportByName(g_proc_name, '__IOHIDDeviceGetRootKey');
    console.log("[i] g___IOHIDDeviceGetRootKey_ptr addr: " + g___IOHIDDeviceGetRootKey_ptr)

    Interceptor.attach(g___IOHIDDeviceGetRootKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDDeviceGetRootKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDDeviceGetRootKey");
        }
    });        
 
    const g___IOHIDDeviceGetUUIDKey_ptr = Module.getExportByName(g_proc_name, '__IOHIDDeviceGetUUIDKey');
    console.log("[i] g___IOHIDDeviceGetUUIDKey_ptr addr: " + g___IOHIDDeviceGetUUIDKey_ptr)

    Interceptor.attach(g___IOHIDDeviceGetUUIDKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDDeviceGetUUIDKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDDeviceGetUUIDKey");
        }
    });        
 
    const g___IOHIDDeviceGetUUIDString_ptr = Module.getExportByName(g_proc_name, '__IOHIDDeviceGetUUIDString');
    console.log("[i] g___IOHIDDeviceGetUUIDString_ptr addr: " + g___IOHIDDeviceGetUUIDString_ptr)

    Interceptor.attach(g___IOHIDDeviceGetUUIDString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDDeviceGetUUIDString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDDeviceGetUUIDString");
        }
    });        
 
    const g___IOHIDDeviceLoadProperties_ptr = Module.getExportByName(g_proc_name, '__IOHIDDeviceLoadProperties');
    console.log("[i] g___IOHIDDeviceLoadProperties_ptr addr: " + g___IOHIDDeviceLoadProperties_ptr)

    Interceptor.attach(g___IOHIDDeviceLoadProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDDeviceLoadProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDDeviceLoadProperties");
        }
    });        
 
    const g___IOHIDDeviceSaveProperties_ptr = Module.getExportByName(g_proc_name, '__IOHIDDeviceSaveProperties');
    console.log("[i] g___IOHIDDeviceSaveProperties_ptr addr: " + g___IOHIDDeviceSaveProperties_ptr)

    Interceptor.attach(g___IOHIDDeviceSaveProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDDeviceSaveProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDDeviceSaveProperties");
        }
    });        
 
    const g___IOHIDElementGetRootKey_ptr = Module.getExportByName(g_proc_name, '__IOHIDElementGetRootKey');
    console.log("[i] g___IOHIDElementGetRootKey_ptr addr: " + g___IOHIDElementGetRootKey_ptr)

    Interceptor.attach(g___IOHIDElementGetRootKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDElementGetRootKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDElementGetRootKey");
        }
    });        
 
    const g___IOHIDElementLoadProperties_ptr = Module.getExportByName(g_proc_name, '__IOHIDElementLoadProperties');
    console.log("[i] g___IOHIDElementLoadProperties_ptr addr: " + g___IOHIDElementLoadProperties_ptr)

    Interceptor.attach(g___IOHIDElementLoadProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDElementLoadProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDElementLoadProperties");
        }
    });        
 
    const g___IOHIDElementSaveProperties_ptr = Module.getExportByName(g_proc_name, '__IOHIDElementSaveProperties');
    console.log("[i] g___IOHIDElementSaveProperties_ptr addr: " + g___IOHIDElementSaveProperties_ptr)

    Interceptor.attach(g___IOHIDElementSaveProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDElementSaveProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDElementSaveProperties");
        }
    });        
 
    const g___IOHIDEventSystemClientFinalizeStateHandler_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemClientFinalizeStateHandler');
    console.log("[i] g___IOHIDEventSystemClientFinalizeStateHandler_ptr addr: " + g___IOHIDEventSystemClientFinalizeStateHandler_ptr)

    Interceptor.attach(g___IOHIDEventSystemClientFinalizeStateHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemClientFinalizeStateHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemClientFinalizeStateHandler");
        }
    });        
 
    const g___IOHIDEventSystemClientInitReplyPort_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemClientInitReplyPort');
    console.log("[i] g___IOHIDEventSystemClientInitReplyPort_ptr addr: " + g___IOHIDEventSystemClientInitReplyPort_ptr)

    Interceptor.attach(g___IOHIDEventSystemClientInitReplyPort_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemClientInitReplyPort")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemClientInitReplyPort");
        }
    });        
 
    const g___IOHIDEventSystemClientRefresh_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemClientRefresh');
    console.log("[i] g___IOHIDEventSystemClientRefresh_ptr addr: " + g___IOHIDEventSystemClientRefresh_ptr)

    Interceptor.attach(g___IOHIDEventSystemClientRefresh_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemClientRefresh")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemClientRefresh");
        }
    });        
 
    const g___IOHIDEventSystemClientRefreshServiceCallback_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemClientRefreshServiceCallback');
    console.log("[i] g___IOHIDEventSystemClientRefreshServiceCallback_ptr addr: " + g___IOHIDEventSystemClientRefreshServiceCallback_ptr)

    Interceptor.attach(g___IOHIDEventSystemClientRefreshServiceCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemClientRefreshServiceCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemClientRefreshServiceCallback");
        }
    });        
 
    const g___IOHIDEventSystemClientServiceRefreshRemovedServiceCallback_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemClientServiceRefreshRemovedServiceCallback');
    console.log("[i] g___IOHIDEventSystemClientServiceRefreshRemovedServiceCallback_ptr addr: " + g___IOHIDEventSystemClientServiceRefreshRemovedServiceCallback_ptr)

    Interceptor.attach(g___IOHIDEventSystemClientServiceRefreshRemovedServiceCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemClientServiceRefreshRemovedServiceCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemClientServiceRefreshRemovedServiceCallback");
        }
    });        
 
    const g___IOHIDEventSystemClientServiceReplaceCallback_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemClientServiceReplaceCallback');
    console.log("[i] g___IOHIDEventSystemClientServiceReplaceCallback_ptr addr: " + g___IOHIDEventSystemClientServiceReplaceCallback_ptr)

    Interceptor.attach(g___IOHIDEventSystemClientServiceReplaceCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemClientServiceReplaceCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemClientServiceReplaceCallback");
        }
    });        
 
    const g___IOHIDEventSystemConnectionActivityNotification_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemConnectionActivityNotification');
    console.log("[i] g___IOHIDEventSystemConnectionActivityNotification_ptr addr: " + g___IOHIDEventSystemConnectionActivityNotification_ptr)

    Interceptor.attach(g___IOHIDEventSystemConnectionActivityNotification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemConnectionActivityNotification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemConnectionActivityNotification");
        }
    });        
 
    const g___IOHIDEventSystemConnectionUpdateActivityState_ptr = Module.getExportByName(g_proc_name, '__IOHIDEventSystemConnectionUpdateActivityState');
    console.log("[i] g___IOHIDEventSystemConnectionUpdateActivityState_ptr addr: " + g___IOHIDEventSystemConnectionUpdateActivityState_ptr)

    Interceptor.attach(g___IOHIDEventSystemConnectionUpdateActivityState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDEventSystemConnectionUpdateActivityState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDEventSystemConnectionUpdateActivityState");
        }
    });        
 
    const g___IOHIDLoadElementSet_ptr = Module.getExportByName(g_proc_name, '__IOHIDLoadElementSet');
    console.log("[i] g___IOHIDLoadElementSet_ptr addr: " + g___IOHIDLoadElementSet_ptr)

    Interceptor.attach(g___IOHIDLoadElementSet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDLoadElementSet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDLoadElementSet");
        }
    });        
 
    const g___IOHIDManagerGetRootKey_ptr = Module.getExportByName(g_proc_name, '__IOHIDManagerGetRootKey');
    console.log("[i] g___IOHIDManagerGetRootKey_ptr addr: " + g___IOHIDManagerGetRootKey_ptr)

    Interceptor.attach(g___IOHIDManagerGetRootKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDManagerGetRootKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDManagerGetRootKey");
        }
    });        
 
    const g___IOHIDManagerLoadProperties_ptr = Module.getExportByName(g_proc_name, '__IOHIDManagerLoadProperties');
    console.log("[i] g___IOHIDManagerLoadProperties_ptr addr: " + g___IOHIDManagerLoadProperties_ptr)

    Interceptor.attach(g___IOHIDManagerLoadProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDManagerLoadProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDManagerLoadProperties");
        }
    });        
 
    const g___IOHIDManagerRegister_ptr = Module.getExportByName(g_proc_name, '__IOHIDManagerRegister');
    console.log("[i] g___IOHIDManagerRegister_ptr addr: " + g___IOHIDManagerRegister_ptr)

    Interceptor.attach(g___IOHIDManagerRegister_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDManagerRegister")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDManagerRegister");
        }
    });        
 
    const g___IOHIDManagerSaveProperties_ptr = Module.getExportByName(g_proc_name, '__IOHIDManagerSaveProperties');
    console.log("[i] g___IOHIDManagerSaveProperties_ptr addr: " + g___IOHIDManagerSaveProperties_ptr)

    Interceptor.attach(g___IOHIDManagerSaveProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDManagerSaveProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDManagerSaveProperties");
        }
    });        
 
    const g___IOHIDNotificationIntFinalize_ptr = Module.getExportByName(g_proc_name, '__IOHIDNotificationIntFinalize');
    console.log("[i] g___IOHIDNotificationIntFinalize_ptr addr: " + g___IOHIDNotificationIntFinalize_ptr)

    Interceptor.attach(g___IOHIDNotificationIntFinalize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDNotificationIntFinalize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDNotificationIntFinalize");
        }
    });        
 
    const g___IOHIDNotificationInvalidateCompletion_ptr = Module.getExportByName(g_proc_name, '__IOHIDNotificationInvalidateCompletion');
    console.log("[i] g___IOHIDNotificationInvalidateCompletion_ptr addr: " + g___IOHIDNotificationInvalidateCompletion_ptr)

    Interceptor.attach(g___IOHIDNotificationInvalidateCompletion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDNotificationInvalidateCompletion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDNotificationInvalidateCompletion");
        }
    });        
 
    const g___IOHIDNotificationRegister_ptr = Module.getExportByName(g_proc_name, '__IOHIDNotificationRegister');
    console.log("[i] g___IOHIDNotificationRegister_ptr addr: " + g___IOHIDNotificationRegister_ptr)

    Interceptor.attach(g___IOHIDNotificationRegister_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDNotificationRegister")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDNotificationRegister");
        }
    });        
 
    const g___IOHIDPlugInInstanceCacheApplier_ptr = Module.getExportByName(g_proc_name, '__IOHIDPlugInInstanceCacheApplier');
    console.log("[i] g___IOHIDPlugInInstanceCacheApplier_ptr addr: " + g___IOHIDPlugInInstanceCacheApplier_ptr)

    Interceptor.attach(g___IOHIDPlugInInstanceCacheApplier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDPlugInInstanceCacheApplier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDPlugInInstanceCacheApplier");
        }
    });        
 
    const g___IOHIDPropertyLoadDictionaryFromKey_ptr = Module.getExportByName(g_proc_name, '__IOHIDPropertyLoadDictionaryFromKey');
    console.log("[i] g___IOHIDPropertyLoadDictionaryFromKey_ptr addr: " + g___IOHIDPropertyLoadDictionaryFromKey_ptr)

    Interceptor.attach(g___IOHIDPropertyLoadDictionaryFromKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDPropertyLoadDictionaryFromKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDPropertyLoadDictionaryFromKey");
        }
    });        
 
    const g___IOHIDPropertyLoadFromKeyWithSpecialKeys_ptr = Module.getExportByName(g_proc_name, '__IOHIDPropertyLoadFromKeyWithSpecialKeys');
    console.log("[i] g___IOHIDPropertyLoadFromKeyWithSpecialKeys_ptr addr: " + g___IOHIDPropertyLoadFromKeyWithSpecialKeys_ptr)

    Interceptor.attach(g___IOHIDPropertyLoadFromKeyWithSpecialKeys_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDPropertyLoadFromKeyWithSpecialKeys")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDPropertyLoadFromKeyWithSpecialKeys");
        }
    });        
 
    const g___IOHIDPropertySaveToKeyWithSpecialKeys_ptr = Module.getExportByName(g_proc_name, '__IOHIDPropertySaveToKeyWithSpecialKeys');
    console.log("[i] g___IOHIDPropertySaveToKeyWithSpecialKeys_ptr addr: " + g___IOHIDPropertySaveToKeyWithSpecialKeys_ptr)

    Interceptor.attach(g___IOHIDPropertySaveToKeyWithSpecialKeys_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDPropertySaveToKeyWithSpecialKeys")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDPropertySaveToKeyWithSpecialKeys");
        }
    });        
 
    const g___IOHIDPropertySaveWithContext_ptr = Module.getExportByName(g_proc_name, '__IOHIDPropertySaveWithContext');
    console.log("[i] g___IOHIDPropertySaveWithContext_ptr addr: " + g___IOHIDPropertySaveWithContext_ptr)

    Interceptor.attach(g___IOHIDPropertySaveWithContext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDPropertySaveWithContext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDPropertySaveWithContext");
        }
    });        
 
    const g___IOHIDQueueRegister_ptr = Module.getExportByName(g_proc_name, '__IOHIDQueueRegister');
    console.log("[i] g___IOHIDQueueRegister_ptr addr: " + g___IOHIDQueueRegister_ptr)

    Interceptor.attach(g___IOHIDQueueRegister_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDQueueRegister")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDQueueRegister");
        }
    });        
 
    const g___IOHIDSaveDeviceSet_ptr = Module.getExportByName(g_proc_name, '__IOHIDSaveDeviceSet');
    console.log("[i] g___IOHIDSaveDeviceSet_ptr addr: " + g___IOHIDSaveDeviceSet_ptr)

    Interceptor.attach(g___IOHIDSaveDeviceSet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDSaveDeviceSet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDSaveDeviceSet");
        }
    });        
 
    const g___IOHIDSaveElementSet_ptr = Module.getExportByName(g_proc_name, '__IOHIDSaveElementSet');
    console.log("[i] g___IOHIDSaveElementSet_ptr addr: " + g___IOHIDSaveElementSet_ptr)

    Interceptor.attach(g___IOHIDSaveElementSet_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDSaveElementSet")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDSaveElementSet");
        }
    });        
 
    const g___IOHIDServiceClientCopyDebugDescription_ptr = Module.getExportByName(g_proc_name, '__IOHIDServiceClientCopyDebugDescription');
    console.log("[i] g___IOHIDServiceClientCopyDebugDescription_ptr addr: " + g___IOHIDServiceClientCopyDebugDescription_ptr)

    Interceptor.attach(g___IOHIDServiceClientCopyDebugDescription_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServiceClientCopyDebugDescription")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServiceClientCopyDebugDescription");
        }
    });        
 
    const g___IOHIDServiceCompleteInProgressEvents_ptr = Module.getExportByName(g_proc_name, '__IOHIDServiceCompleteInProgressEvents');
    console.log("[i] g___IOHIDServiceCompleteInProgressEvents_ptr addr: " + g___IOHIDServiceCompleteInProgressEvents_ptr)

    Interceptor.attach(g___IOHIDServiceCompleteInProgressEvents_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServiceCompleteInProgressEvents")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServiceCompleteInProgressEvents");
        }
    });        
 
    const g___IOHIDServiceCreateAndCopyConnectionCache_ptr = Module.getExportByName(g_proc_name, '__IOHIDServiceCreateAndCopyConnectionCache');
    console.log("[i] g___IOHIDServiceCreateAndCopyConnectionCache_ptr addr: " + g___IOHIDServiceCreateAndCopyConnectionCache_ptr)

    Interceptor.attach(g___IOHIDServiceCreateAndCopyConnectionCache_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServiceCreateAndCopyConnectionCache")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServiceCreateAndCopyConnectionCache");
        }
    });        
 
    const g___IOHIDServiceCreateVirtualNoInit_ptr = Module.getExportByName(g_proc_name, '__IOHIDServiceCreateVirtualNoInit');
    console.log("[i] g___IOHIDServiceCreateVirtualNoInit_ptr addr: " + g___IOHIDServiceCreateVirtualNoInit_ptr)

    Interceptor.attach(g___IOHIDServiceCreateVirtualNoInit_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServiceCreateVirtualNoInit")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServiceCreateVirtualNoInit");
        }
    });        
 
    const g___IOHIDServiceHandleCancelTimerTimeout_ptr = Module.getExportByName(g_proc_name, '__IOHIDServiceHandleCancelTimerTimeout');
    console.log("[i] g___IOHIDServiceHandleCancelTimerTimeout_ptr addr: " + g___IOHIDServiceHandleCancelTimerTimeout_ptr)

    Interceptor.attach(g___IOHIDServiceHandleCancelTimerTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServiceHandleCancelTimerTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServiceHandleCancelTimerTimeout");
        }
    });        
 
    const g___IOHIDServicePassiveMatchToFilterPlugin_ptr = Module.getExportByName(g_proc_name, '__IOHIDServicePassiveMatchToFilterPlugin');
    console.log("[i] g___IOHIDServicePassiveMatchToFilterPlugin_ptr addr: " + g___IOHIDServicePassiveMatchToFilterPlugin_ptr)

    Interceptor.attach(g___IOHIDServicePassiveMatchToFilterPlugin_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServicePassiveMatchToFilterPlugin")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServicePassiveMatchToFilterPlugin");
        }
    });        
 
    const g___IOHIDServicePickBatchInterval_ptr = Module.getExportByName(g_proc_name, '__IOHIDServicePickBatchInterval');
    console.log("[i] g___IOHIDServicePickBatchInterval_ptr addr: " + g___IOHIDServicePickBatchInterval_ptr)

    Interceptor.attach(g___IOHIDServicePickBatchInterval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDServicePickBatchInterval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDServicePickBatchInterval");
        }
    });        
 
    const g___IOHIDSessionActivityNotificationRelease_ptr = Module.getExportByName(g_proc_name, '__IOHIDSessionActivityNotificationRelease');
    console.log("[i] g___IOHIDSessionActivityNotificationRelease_ptr addr: " + g___IOHIDSessionActivityNotificationRelease_ptr)

    Interceptor.attach(g___IOHIDSessionActivityNotificationRelease_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDSessionActivityNotificationRelease")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDSessionActivityNotificationRelease");
        }
    });        
 
    const g___IOHIDSystemEnumerationQueueDidExecute_ptr = Module.getExportByName(g_proc_name, '__IOHIDSystemEnumerationQueueDidExecute');
    console.log("[i] g___IOHIDSystemEnumerationQueueDidExecute_ptr addr: " + g___IOHIDSystemEnumerationQueueDidExecute_ptr)

    Interceptor.attach(g___IOHIDSystemEnumerationQueueDidExecute_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDSystemEnumerationQueueDidExecute")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDSystemEnumerationQueueDidExecute");
        }
    });        
 
    const g___IOHIDSystemEnumerationQueueWillExecute_ptr = Module.getExportByName(g_proc_name, '__IOHIDSystemEnumerationQueueWillExecute');
    console.log("[i] g___IOHIDSystemEnumerationQueueWillExecute_ptr addr: " + g___IOHIDSystemEnumerationQueueWillExecute_ptr)

    Interceptor.attach(g___IOHIDSystemEnumerationQueueWillExecute_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDSystemEnumerationQueueWillExecute")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDSystemEnumerationQueueWillExecute");
        }
    });        
 
    const g___IOHIDTransactionRegister_ptr = Module.getExportByName(g_proc_name, '__IOHIDTransactionRegister');
    console.log("[i] g___IOHIDTransactionRegister_ptr addr: " + g___IOHIDTransactionRegister_ptr)

    Interceptor.attach(g___IOHIDTransactionRegister_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDTransactionRegister")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDTransactionRegister");
        }
    });        
 
    const g___IOHIDUserDeviceFinalizeStateHandler_ptr = Module.getExportByName(g_proc_name, '__IOHIDUserDeviceFinalizeStateHandler');
    console.log("[i] g___IOHIDUserDeviceFinalizeStateHandler_ptr addr: " + g___IOHIDUserDeviceFinalizeStateHandler_ptr)

    Interceptor.attach(g___IOHIDUserDeviceFinalizeStateHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDUserDeviceFinalizeStateHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDUserDeviceFinalizeStateHandler");
        }
    });        
 
    const g___IOHIDUserDeviceSerializeState_ptr = Module.getExportByName(g_proc_name, '__IOHIDUserDeviceSerializeState');
    console.log("[i] g___IOHIDUserDeviceSerializeState_ptr addr: " + g___IOHIDUserDeviceSerializeState_ptr)

    Interceptor.attach(g___IOHIDUserDeviceSerializeState_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDUserDeviceSerializeState")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDUserDeviceSerializeState");
        }
    });        
 
    const g___IOHIDUserDeviceStateHandler_ptr = Module.getExportByName(g_proc_name, '__IOHIDUserDeviceStateHandler');
    console.log("[i] g___IOHIDUserDeviceStateHandler_ptr addr: " + g___IOHIDUserDeviceStateHandler_ptr)

    Interceptor.attach(g___IOHIDUserDeviceStateHandler_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDUserDeviceStateHandler")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDUserDeviceStateHandler");
        }
    });        
 
    const g___IOHIDValueRegister_ptr = Module.getExportByName(g_proc_name, '__IOHIDValueRegister');
    console.log("[i] g___IOHIDValueRegister_ptr addr: " + g___IOHIDValueRegister_ptr)

    Interceptor.attach(g___IOHIDValueRegister_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __IOHIDValueRegister")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __IOHIDValueRegister");
        }
    });        
 
    const g___KextManagerSendLoadKextRequest_ptr = Module.getExportByName(g_proc_name, '__KextManagerSendLoadKextRequest');
    console.log("[i] g___KextManagerSendLoadKextRequest_ptr addr: " + g___KextManagerSendLoadKextRequest_ptr)

    Interceptor.attach(g___KextManagerSendLoadKextRequest_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __KextManagerSendLoadKextRequest")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __KextManagerSendLoadKextRequest");
        }
    });        
 
    const g___NotificationApplier_ptr = Module.getExportByName(g_proc_name, '__NotificationApplier');
    console.log("[i] g___NotificationApplier_ptr addr: " + g___NotificationApplier_ptr)

    Interceptor.attach(g___NotificationApplier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __NotificationApplier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __NotificationApplier");
        }
    });        
 
    const g___OSKextBundleIDCompare_ptr = Module.getExportByName(g_proc_name, '__OSKextBundleIDCompare');
    console.log("[i] g___OSKextBundleIDCompare_ptr addr: " + g___OSKextBundleIDCompare_ptr)

    Interceptor.attach(g___OSKextBundleIDCompare_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextBundleIDCompare")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextBundleIDCompare");
        }
    });        
 
    const g___OSKextCacheNeedsUpdate_ptr = Module.getExportByName(g_proc_name, '__OSKextCacheNeedsUpdate');
    console.log("[i] g___OSKextCacheNeedsUpdate_ptr addr: " + g___OSKextCacheNeedsUpdate_ptr)

    Interceptor.attach(g___OSKextCacheNeedsUpdate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCacheNeedsUpdate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCacheNeedsUpdate");
        }
    });        
 
    const g___OSKextCheckURL_ptr = Module.getExportByName(g_proc_name, '__OSKextCheckURL');
    console.log("[i] g___OSKextCheckURL_ptr addr: " + g___OSKextCheckURL_ptr)

    Interceptor.attach(g___OSKextCheckURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCheckURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCheckURL");
        }
    });        
 
    const g___OSKextClearHasAllDependenciesOnKext_ptr = Module.getExportByName(g_proc_name, '__OSKextClearHasAllDependenciesOnKext');
    console.log("[i] g___OSKextClearHasAllDependenciesOnKext_ptr addr: " + g___OSKextClearHasAllDependenciesOnKext_ptr)

    Interceptor.attach(g___OSKextClearHasAllDependenciesOnKext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextClearHasAllDependenciesOnKext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextClearHasAllDependenciesOnKext");
        }
    });        
 
    const g___OSKextCompareIdentifiers_ptr = Module.getExportByName(g_proc_name, '__OSKextCompareIdentifiers');
    console.log("[i] g___OSKextCompareIdentifiers_ptr addr: " + g___OSKextCompareIdentifiers_ptr)

    Interceptor.attach(g___OSKextCompareIdentifiers_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCompareIdentifiers")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCompareIdentifiers");
        }
    });        
 
    const g___OSKextCopyExecutableRelativePath_ptr = Module.getExportByName(g_proc_name, '__OSKextCopyExecutableRelativePath');
    console.log("[i] g___OSKextCopyExecutableRelativePath_ptr addr: " + g___OSKextCopyExecutableRelativePath_ptr)

    Interceptor.attach(g___OSKextCopyExecutableRelativePath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCopyExecutableRelativePath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCopyExecutableRelativePath");
        }
    });        
 
    const g___OSKextCopyStrippedExecutable_ptr = Module.getExportByName(g_proc_name, '__OSKextCopyStrippedExecutable');
    console.log("[i] g___OSKextCopyStrippedExecutable_ptr addr: " + g___OSKextCopyStrippedExecutable_ptr)

    Interceptor.attach(g___OSKextCopyStrippedExecutable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCopyStrippedExecutable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCopyStrippedExecutable");
        }
    });        
 
    const g___OSKextCreateCacheFileURL_ptr = Module.getExportByName(g_proc_name, '__OSKextCreateCacheFileURL');
    console.log("[i] g___OSKextCreateCacheFileURL_ptr addr: " + g___OSKextCreateCacheFileURL_ptr)

    Interceptor.attach(g___OSKextCreateCacheFileURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCreateCacheFileURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCreateCacheFileURL");
        }
    });        
 
    const g___OSKextCreateCompositeKey_ptr = Module.getExportByName(g_proc_name, '__OSKextCreateCompositeKey');
    console.log("[i] g___OSKextCreateCompositeKey_ptr addr: " + g___OSKextCreateCompositeKey_ptr)

    Interceptor.attach(g___OSKextCreateCompositeKey_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCreateCompositeKey")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCreateCompositeKey");
        }
    });        
 
    const g___OSKextCreateFromIdentifierCacheDict_ptr = Module.getExportByName(g_proc_name, '__OSKextCreateFromIdentifierCacheDict');
    console.log("[i] g___OSKextCreateFromIdentifierCacheDict_ptr addr: " + g___OSKextCreateFromIdentifierCacheDict_ptr)

    Interceptor.attach(g___OSKextCreateFromIdentifierCacheDict_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCreateFromIdentifierCacheDict")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCreateFromIdentifierCacheDict");
        }
    });        
 
    const g___OSKextCreateIdentifierCacheDict_ptr = Module.getExportByName(g_proc_name, '__OSKextCreateIdentifierCacheDict');
    console.log("[i] g___OSKextCreateIdentifierCacheDict_ptr addr: " + g___OSKextCreateIdentifierCacheDict_ptr)

    Interceptor.attach(g___OSKextCreateIdentifierCacheDict_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCreateIdentifierCacheDict")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCreateIdentifierCacheDict");
        }
    });        
 
    const g___OSKextCreateKextRequest_ptr = Module.getExportByName(g_proc_name, '__OSKextCreateKextRequest');
    console.log("[i] g___OSKextCreateKextRequest_ptr addr: " + g___OSKextCreateKextRequest_ptr)

    Interceptor.attach(g___OSKextCreateKextRequest_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextCreateKextRequest")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextCreateKextRequest");
        }
    });        
 
    const g___OSKextDeallocateMmapBuffer_ptr = Module.getExportByName(g_proc_name, '__OSKextDeallocateMmapBuffer');
    console.log("[i] g___OSKextDeallocateMmapBuffer_ptr addr: " + g___OSKextDeallocateMmapBuffer_ptr)

    Interceptor.attach(g___OSKextDeallocateMmapBuffer_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextDeallocateMmapBuffer")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextDeallocateMmapBuffer");
        }
    });        
 
    const g___OSKextExtractDebugSymbols_ptr = Module.getExportByName(g_proc_name, '__OSKextExtractDebugSymbols');
    console.log("[i] g___OSKextExtractDebugSymbols_ptr addr: " + g___OSKextExtractDebugSymbols_ptr)

    Interceptor.attach(g___OSKextExtractDebugSymbols_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextExtractDebugSymbols")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextExtractDebugSymbols");
        }
    });        
 
    const g___OSKextGetBleedthroughFlag_ptr = Module.getExportByName(g_proc_name, '__OSKextGetBleedthroughFlag');
    console.log("[i] g___OSKextGetBleedthroughFlag_ptr addr: " + g___OSKextGetBleedthroughFlag_ptr)

    Interceptor.attach(g___OSKextGetBleedthroughFlag_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextGetBleedthroughFlag")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextGetBleedthroughFlag");
        }
    });        
 
    const g___OSKextInitKXLDDependency_ptr = Module.getExportByName(g_proc_name, '__OSKextInitKXLDDependency');
    console.log("[i] g___OSKextInitKXLDDependency_ptr addr: " + g___OSKextInitKXLDDependency_ptr)

    Interceptor.attach(g___OSKextInitKXLDDependency_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextInitKXLDDependency")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextInitKXLDDependency");
        }
    });        
 
    const g___OSKextLogDependencyGraphApplierFunction_ptr = Module.getExportByName(g_proc_name, '__OSKextLogDependencyGraphApplierFunction');
    console.log("[i] g___OSKextLogDependencyGraphApplierFunction_ptr addr: " + g___OSKextLogDependencyGraphApplierFunction_ptr)

    Interceptor.attach(g___OSKextLogDependencyGraphApplierFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextLogDependencyGraphApplierFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextLogDependencyGraphApplierFunction");
        }
    });        
 
    const g___OSKextLogKernelMessages_ptr = Module.getExportByName(g_proc_name, '__OSKextLogKernelMessages');
    console.log("[i] g___OSKextLogKernelMessages_ptr addr: " + g___OSKextLogKernelMessages_ptr)

    Interceptor.attach(g___OSKextLogKernelMessages_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextLogKernelMessages")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextLogKernelMessages");
        }
    });        
 
    const g___OSKextMapExecutable_ptr = Module.getExportByName(g_proc_name, '__OSKextMapExecutable');
    console.log("[i] g___OSKextMapExecutable_ptr addr: " + g___OSKextMapExecutable_ptr)

    Interceptor.attach(g___OSKextMapExecutable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextMapExecutable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextMapExecutable");
        }
    });        
 
    const g___OSKextProcessKextRequestResults_ptr = Module.getExportByName(g_proc_name, '__OSKextProcessKextRequestResults');
    console.log("[i] g___OSKextProcessKextRequestResults_ptr addr: " + g___OSKextProcessKextRequestResults_ptr)

    Interceptor.attach(g___OSKextProcessKextRequestResults_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextProcessKextRequestResults")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextProcessKextRequestResults");
        }
    });        
 
    const g___OSKextReadRegistryNumberProperty_ptr = Module.getExportByName(g_proc_name, '__OSKextReadRegistryNumberProperty');
    console.log("[i] g___OSKextReadRegistryNumberProperty_ptr addr: " + g___OSKextReadRegistryNumberProperty_ptr)

    Interceptor.attach(g___OSKextReadRegistryNumberProperty_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextReadRegistryNumberProperty")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextReadRegistryNumberProperty");
        }
    });        
 
    const g___OSKextRealize_ptr = Module.getExportByName(g_proc_name, '__OSKextRealize');
    console.log("[i] g___OSKextRealize_ptr addr: " + g___OSKextRealize_ptr)

    Interceptor.attach(g___OSKextRealize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextRealize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextRealize");
        }
    });        
 
    const g___OSKextRealizeKextsWithIdentifier_ptr = Module.getExportByName(g_proc_name, '__OSKextRealizeKextsWithIdentifier');
    console.log("[i] g___OSKextRealizeKextsWithIdentifier_ptr addr: " + g___OSKextRealizeKextsWithIdentifier_ptr)

    Interceptor.attach(g___OSKextRealizeKextsWithIdentifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextRealizeKextsWithIdentifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextRealizeKextsWithIdentifier");
        }
    });        
 
    const g___OSKextRemoveIdentifierCacheForKext_ptr = Module.getExportByName(g_proc_name, '__OSKextRemoveIdentifierCacheForKext');
    console.log("[i] g___OSKextRemoveIdentifierCacheForKext_ptr addr: " + g___OSKextRemoveIdentifierCacheForKext_ptr)

    Interceptor.attach(g___OSKextRemoveIdentifierCacheForKext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextRemoveIdentifierCacheForKext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextRemoveIdentifierCacheForKext");
        }
    });        
 
    const g___OSKextRemovePersonalities_ptr = Module.getExportByName(g_proc_name, '__OSKextRemovePersonalities');
    console.log("[i] g___OSKextRemovePersonalities_ptr addr: " + g___OSKextRemovePersonalities_ptr)

    Interceptor.attach(g___OSKextRemovePersonalities_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextRemovePersonalities")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextRemovePersonalities");
        }
    });        
 
    const g___OSKextSendKextRequest_ptr = Module.getExportByName(g_proc_name, '__OSKextSendKextRequest');
    console.log("[i] g___OSKextSendKextRequest_ptr addr: " + g___OSKextSendKextRequest_ptr)

    Interceptor.attach(g___OSKextSendKextRequest_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextSendKextRequest")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextSendKextRequest");
        }
    });        
 
    const g___OSKextSetLoadAddress_ptr = Module.getExportByName(g_proc_name, '__OSKextSetLoadAddress');
    console.log("[i] g___OSKextSetLoadAddress_ptr addr: " + g___OSKextSetLoadAddress_ptr)

    Interceptor.attach(g___OSKextSetLoadAddress_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextSetLoadAddress")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextSetLoadAddress");
        }
    });        
 
    const g___OSKextStatURL_ptr = Module.getExportByName(g_proc_name, '__OSKextStatURL');
    console.log("[i] g___OSKextStatURL_ptr addr: " + g___OSKextStatURL_ptr)

    Interceptor.attach(g___OSKextStatURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextStatURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextStatURL");
        }
    });        
 
    const g___OSKextStatURLsOrURL_ptr = Module.getExportByName(g_proc_name, '__OSKextStatURLsOrURL');
    console.log("[i] g___OSKextStatURLsOrURL_ptr addr: " + g___OSKextStatURLsOrURL_ptr)

    Interceptor.attach(g___OSKextStatURLsOrURL_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextStatURLsOrURL")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextStatURLsOrURL");
        }
    });        
 
    const g___OSKextURLIsSystemFolder_ptr = Module.getExportByName(g_proc_name, '__OSKextURLIsSystemFolder');
    console.log("[i] g___OSKextURLIsSystemFolder_ptr addr: " + g___OSKextURLIsSystemFolder_ptr)

    Interceptor.attach(g___OSKextURLIsSystemFolder_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextURLIsSystemFolder")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextURLIsSystemFolder");
        }
    });        
 
    const g___OSKextUUIDCallback_ptr = Module.getExportByName(g_proc_name, '__OSKextUUIDCallback');
    console.log("[i] g___OSKextUUIDCallback_ptr addr: " + g___OSKextUUIDCallback_ptr)

    Interceptor.attach(g___OSKextUUIDCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextUUIDCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextUUIDCallback");
        }
    });        
 
    const g___OSKextUnload_ptr = Module.getExportByName(g_proc_name, '__OSKextUnload');
    console.log("[i] g___OSKextUnload_ptr addr: " + g___OSKextUnload_ptr)

    Interceptor.attach(g___OSKextUnload_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __OSKextUnload")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __OSKextUnload");
        }
    });        
 
    const g___RegisterServiceWithSessionFunction_ptr = Module.getExportByName(g_proc_name, '__RegisterServiceWithSessionFunction');
    console.log("[i] g___RegisterServiceWithSessionFunction_ptr addr: " + g___RegisterServiceWithSessionFunction_ptr)

    Interceptor.attach(g___RegisterServiceWithSessionFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __RegisterServiceWithSessionFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __RegisterServiceWithSessionFunction");
        }
    });        
 
    const g___SetNumPropertyForService_ptr = Module.getExportByName(g_proc_name, '__SetNumPropertyForService');
    console.log("[i] g___SetNumPropertyForService_ptr addr: " + g___SetNumPropertyForService_ptr)

    Interceptor.attach(g___SetNumPropertyForService_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __SetNumPropertyForService")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __SetNumPropertyForService");
        }
    });        
 
    const g___VirtualServiceNotifier_ptr = Module.getExportByName(g_proc_name, '__VirtualServiceNotifier');
    console.log("[i] g___VirtualServiceNotifier_ptr addr: " + g___VirtualServiceNotifier_ptr)

    Interceptor.attach(g___VirtualServiceNotifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __VirtualServiceNotifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __VirtualServiceNotifier");
        }
    });        
 
    const g___VirtualServicesApplier_ptr = Module.getExportByName(g_proc_name, '__VirtualServicesApplier');
    console.log("[i] g___VirtualServicesApplier_ptr addr: " + g___VirtualServicesApplier_ptr)

    Interceptor.attach(g___VirtualServicesApplier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __VirtualServicesApplier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __VirtualServicesApplier");
        }
    });        
 
    const g___absPathOnVolume_ptr = Module.getExportByName(g_proc_name, '__absPathOnVolume');
    console.log("[i] g___absPathOnVolume_ptr addr: " + g___absPathOnVolume_ptr)

    Interceptor.attach(g___absPathOnVolume_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __absPathOnVolume")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __absPathOnVolume");
        }
    });        
 
    const g___hid_dispatch_queue_context_destructor_ptr = Module.getExportByName(g_proc_name, '__hid_dispatch_queue_context_destructor');
    console.log("[i] g___hid_dispatch_queue_context_destructor_ptr addr: " + g___hid_dispatch_queue_context_destructor_ptr)

    Interceptor.attach(g___hid_dispatch_queue_context_destructor_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __hid_dispatch_queue_context_destructor")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __hid_dispatch_queue_context_destructor");
        }
    });        
 
    const g___sOSKextDefaultLogFunction_ptr = Module.getExportByName(g_proc_name, '__sOSKextDefaultLogFunction');
    console.log("[i] g___sOSKextDefaultLogFunction_ptr addr: " + g___sOSKextDefaultLogFunction_ptr)

    Interceptor.attach(g___sOSKextDefaultLogFunction_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __sOSKextDefaultLogFunction")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __sOSKextDefaultLogFunction");
        }
    });        
 
    const g___uuid_callback_ptr = Module.getExportByName(g_proc_name, '__uuid_callback');
    console.log("[i] g___uuid_callback_ptr addr: " + g___uuid_callback_ptr)

    Interceptor.attach(g___uuid_callback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: __uuid_callback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: __uuid_callback");
        }
    });        
 
    const g__copySleepPreventersList_ptr = Module.getExportByName(g_proc_name, '_copySleepPreventersList');
    console.log("[i] g__copySleepPreventersList_ptr addr: " + g__copySleepPreventersList_ptr)

    Interceptor.attach(g__copySleepPreventersList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _copySleepPreventersList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _copySleepPreventersList");
        }
    });        
 
    const g__getPSDispatchQueue_ptr = Module.getExportByName(g_proc_name, '_getPSDispatchQueue');
    console.log("[i] g__getPSDispatchQueue_ptr addr: " + g__getPSDispatchQueue_ptr)

    Interceptor.attach(g__getPSDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _getPSDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _getPSDispatchQueue");
        }
    });        
 
    const g__io_hideventsystem_clear_service_cache_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_clear_service_cache');
    console.log("[i] g__io_hideventsystem_clear_service_cache_ptr addr: " + g__io_hideventsystem_clear_service_cache_ptr)

    Interceptor.attach(g__io_hideventsystem_clear_service_cache_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_clear_service_cache")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_clear_service_cache");
        }
    });        
 
    const g__io_hideventsystem_copy_event_for_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_copy_event_for_service');
    console.log("[i] g__io_hideventsystem_copy_event_for_service_ptr addr: " + g__io_hideventsystem_copy_event_for_service_ptr)

    Interceptor.attach(g__io_hideventsystem_copy_event_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_copy_event_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_copy_event_for_service");
        }
    });        
 
    const g__io_hideventsystem_copy_matching_event_for_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_copy_matching_event_for_service');
    console.log("[i] g__io_hideventsystem_copy_matching_event_for_service_ptr addr: " + g__io_hideventsystem_copy_matching_event_for_service_ptr)

    Interceptor.attach(g__io_hideventsystem_copy_matching_event_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_copy_matching_event_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_copy_matching_event_for_service");
        }
    });        
 
    const g__io_hideventsystem_copy_matching_services_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_copy_matching_services');
    console.log("[i] g__io_hideventsystem_copy_matching_services_ptr addr: " + g__io_hideventsystem_copy_matching_services_ptr)

    Interceptor.attach(g__io_hideventsystem_copy_matching_services_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_copy_matching_services")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_copy_matching_services");
        }
    });        
 
    const g__io_hideventsystem_copy_properties_for_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_copy_properties_for_service');
    console.log("[i] g__io_hideventsystem_copy_properties_for_service_ptr addr: " + g__io_hideventsystem_copy_properties_for_service_ptr)

    Interceptor.attach(g__io_hideventsystem_copy_properties_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_copy_properties_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_copy_properties_for_service");
        }
    });        
 
    const g__io_hideventsystem_copy_property_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_copy_property');
    console.log("[i] g__io_hideventsystem_copy_property_ptr addr: " + g__io_hideventsystem_copy_property_ptr)

    Interceptor.attach(g__io_hideventsystem_copy_property_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_copy_property")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_copy_property");
        }
    });        
 
    const g__io_hideventsystem_copy_property_for_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_copy_property_for_service');
    console.log("[i] g__io_hideventsystem_copy_property_for_service_ptr addr: " + g__io_hideventsystem_copy_property_for_service_ptr)

    Interceptor.attach(g__io_hideventsystem_copy_property_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_copy_property_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_copy_property_for_service");
        }
    });        
 
    const g__io_hideventsystem_create_virtual_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_create_virtual_service');
    console.log("[i] g__io_hideventsystem_create_virtual_service_ptr addr: " + g__io_hideventsystem_create_virtual_service_ptr)

    Interceptor.attach(g__io_hideventsystem_create_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_create_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_create_virtual_service");
        }
    });        
 
    const g__io_hideventsystem_dispatch_event_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_dispatch_event');
    console.log("[i] g__io_hideventsystem_dispatch_event_ptr addr: " + g__io_hideventsystem_dispatch_event_ptr)

    Interceptor.attach(g__io_hideventsystem_dispatch_event_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_dispatch_event")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_dispatch_event");
        }
    });        
 
    const g__io_hideventsystem_dispatch_event_for_virtual_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_dispatch_event_for_virtual_service');
    console.log("[i] g__io_hideventsystem_dispatch_event_for_virtual_service_ptr addr: " + g__io_hideventsystem_dispatch_event_for_virtual_service_ptr)

    Interceptor.attach(g__io_hideventsystem_dispatch_event_for_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_dispatch_event_for_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_dispatch_event_for_virtual_service");
        }
    });        
 
    const g__io_hideventsystem_do_client_refresh_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_do_client_refresh');
    console.log("[i] g__io_hideventsystem_do_client_refresh_ptr addr: " + g__io_hideventsystem_do_client_refresh_ptr)

    Interceptor.attach(g__io_hideventsystem_do_client_refresh_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_do_client_refresh")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_do_client_refresh");
        }
    });        
 
    const g__io_hideventsystem_open_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_open');
    console.log("[i] g__io_hideventsystem_open_ptr addr: " + g__io_hideventsystem_open_ptr)

    Interceptor.attach(g__io_hideventsystem_open_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_open")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_open");
        }
    });        
 
    const g__io_hideventsystem_queue_create_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_queue_create');
    console.log("[i] g__io_hideventsystem_queue_create_ptr addr: " + g__io_hideventsystem_queue_create_ptr)

    Interceptor.attach(g__io_hideventsystem_queue_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_queue_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_queue_create");
        }
    });        
 
    const g__io_hideventsystem_queue_start_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_queue_start');
    console.log("[i] g__io_hideventsystem_queue_start_ptr addr: " + g__io_hideventsystem_queue_start_ptr)

    Interceptor.attach(g__io_hideventsystem_queue_start_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_queue_start")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_queue_start");
        }
    });        
 
    const g__io_hideventsystem_queue_stop_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_queue_stop');
    console.log("[i] g__io_hideventsystem_queue_stop_ptr addr: " + g__io_hideventsystem_queue_stop_ptr)

    Interceptor.attach(g__io_hideventsystem_queue_stop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_queue_stop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_queue_stop");
        }
    });        
 
    const g__io_hideventsystem_register_event_filter_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_register_event_filter');
    console.log("[i] g__io_hideventsystem_register_event_filter_ptr addr: " + g__io_hideventsystem_register_event_filter_ptr)

    Interceptor.attach(g__io_hideventsystem_register_event_filter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_register_event_filter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_register_event_filter");
        }
    });        
 
    const g__io_hideventsystem_register_property_changed_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_register_property_changed_notification');
    console.log("[i] g__io_hideventsystem_register_property_changed_notification_ptr addr: " + g__io_hideventsystem_register_property_changed_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_register_property_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_register_property_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_register_property_changed_notification");
        }
    });        
 
    const g__io_hideventsystem_register_record_client_changed_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_register_record_client_changed_notification');
    console.log("[i] g__io_hideventsystem_register_record_client_changed_notification_ptr addr: " + g__io_hideventsystem_register_record_client_changed_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_register_record_client_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_register_record_client_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_register_record_client_changed_notification");
        }
    });        
 
    const g__io_hideventsystem_register_record_service_changed_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_register_record_service_changed_notification');
    console.log("[i] g__io_hideventsystem_register_record_service_changed_notification_ptr addr: " + g__io_hideventsystem_register_record_service_changed_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_register_record_service_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_register_record_service_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_register_record_service_changed_notification");
        }
    });        
 
    const g__io_hideventsystem_release_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_release_notification');
    console.log("[i] g__io_hideventsystem_release_notification_ptr addr: " + g__io_hideventsystem_release_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_release_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_release_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_release_notification");
        }
    });        
 
    const g__io_hideventsystem_remove_virtual_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_remove_virtual_service');
    console.log("[i] g__io_hideventsystem_remove_virtual_service_ptr addr: " + g__io_hideventsystem_remove_virtual_service_ptr)

    Interceptor.attach(g__io_hideventsystem_remove_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_remove_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_remove_virtual_service");
        }
    });        
 
    const g__io_hideventsystem_service_conforms_to_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_service_conforms_to');
    console.log("[i] g__io_hideventsystem_service_conforms_to_ptr addr: " + g__io_hideventsystem_service_conforms_to_ptr)

    Interceptor.attach(g__io_hideventsystem_service_conforms_to_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_service_conforms_to")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_service_conforms_to");
        }
    });        
 
    const g__io_hideventsystem_set_element_value_for_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_set_element_value_for_service');
    console.log("[i] g__io_hideventsystem_set_element_value_for_service_ptr addr: " + g__io_hideventsystem_set_element_value_for_service_ptr)

    Interceptor.attach(g__io_hideventsystem_set_element_value_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_set_element_value_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_set_element_value_for_service");
        }
    });        
 
    const g__io_hideventsystem_set_properties_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_set_properties');
    console.log("[i] g__io_hideventsystem_set_properties_ptr addr: " + g__io_hideventsystem_set_properties_ptr)

    Interceptor.attach(g__io_hideventsystem_set_properties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_set_properties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_set_properties");
        }
    });        
 
    const g__io_hideventsystem_set_properties_for_service_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_set_properties_for_service');
    console.log("[i] g__io_hideventsystem_set_properties_for_service_ptr addr: " + g__io_hideventsystem_set_properties_for_service_ptr)

    Interceptor.attach(g__io_hideventsystem_set_properties_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_set_properties_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_set_properties_for_service");
        }
    });        
 
    const g__io_hideventsystem_unregister_event_filter_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_unregister_event_filter');
    console.log("[i] g__io_hideventsystem_unregister_event_filter_ptr addr: " + g__io_hideventsystem_unregister_event_filter_ptr)

    Interceptor.attach(g__io_hideventsystem_unregister_event_filter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_unregister_event_filter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_unregister_event_filter");
        }
    });        
 
    const g__io_hideventsystem_unregister_property_changed_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_unregister_property_changed_notification');
    console.log("[i] g__io_hideventsystem_unregister_property_changed_notification_ptr addr: " + g__io_hideventsystem_unregister_property_changed_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_unregister_property_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_unregister_property_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_unregister_property_changed_notification");
        }
    });        
 
    const g__io_hideventsystem_unregister_record_client_changed_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_unregister_record_client_changed_notification');
    console.log("[i] g__io_hideventsystem_unregister_record_client_changed_notification_ptr addr: " + g__io_hideventsystem_unregister_record_client_changed_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_unregister_record_client_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_unregister_record_client_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_unregister_record_client_changed_notification");
        }
    });        
 
    const g__io_hideventsystem_unregister_record_service_changed_notification_ptr = Module.getExportByName(g_proc_name, '_io_hideventsystem_unregister_record_service_changed_notification');
    console.log("[i] g__io_hideventsystem_unregister_record_service_changed_notification_ptr addr: " + g__io_hideventsystem_unregister_record_service_changed_notification_ptr)

    Interceptor.attach(g__io_hideventsystem_unregister_record_service_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _io_hideventsystem_unregister_record_service_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _io_hideventsystem_unregister_record_service_changed_notification");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_client_records_changed_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_client_records_changed');
    console.log("[i] g__iohideventsystem_client_dispatch_client_records_changed_ptr addr: " + g__iohideventsystem_client_dispatch_client_records_changed_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_client_records_changed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_client_records_changed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_client_records_changed");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_event_filter_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_event_filter');
    console.log("[i] g__iohideventsystem_client_dispatch_event_filter_ptr addr: " + g__iohideventsystem_client_dispatch_event_filter_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_event_filter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_event_filter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_event_filter");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_notification_results_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_notification_results');
    console.log("[i] g__iohideventsystem_client_dispatch_notification_results_ptr addr: " + g__iohideventsystem_client_dispatch_notification_results_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_notification_results_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_notification_results")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_notification_results");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_properties_changed_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_properties_changed');
    console.log("[i] g__iohideventsystem_client_dispatch_properties_changed_ptr addr: " + g__iohideventsystem_client_dispatch_properties_changed_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_properties_changed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_properties_changed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_properties_changed");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_service_records_changed_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_service_records_changed');
    console.log("[i] g__iohideventsystem_client_dispatch_service_records_changed_ptr addr: " + g__iohideventsystem_client_dispatch_service_records_changed_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_service_records_changed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_service_records_changed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_service_records_changed");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_service_removal_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_service_removal');
    console.log("[i] g__iohideventsystem_client_dispatch_service_removal_ptr addr: " + g__iohideventsystem_client_dispatch_service_removal_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_service_removal_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_service_removal")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_service_removal");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_virtual_service_copy_property_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_virtual_service_copy_property');
    console.log("[i] g__iohideventsystem_client_dispatch_virtual_service_copy_property_ptr addr: " + g__iohideventsystem_client_dispatch_virtual_service_copy_property_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_virtual_service_copy_property_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_virtual_service_copy_property")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_virtual_service_copy_property");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_virtual_service_notification_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_virtual_service_notification');
    console.log("[i] g__iohideventsystem_client_dispatch_virtual_service_notification_ptr addr: " + g__iohideventsystem_client_dispatch_virtual_service_notification_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_virtual_service_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_virtual_service_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_virtual_service_notification");
        }
    });        
 
    const g__iohideventsystem_client_dispatch_virtual_service_set_property_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_dispatch_virtual_service_set_property');
    console.log("[i] g__iohideventsystem_client_dispatch_virtual_service_set_property_ptr addr: " + g__iohideventsystem_client_dispatch_virtual_service_set_property_ptr)

    Interceptor.attach(g__iohideventsystem_client_dispatch_virtual_service_set_property_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_dispatch_virtual_service_set_property")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_dispatch_virtual_service_set_property");
        }
    });        
 
    const g__iohideventsystem_client_refresh_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_client_refresh');
    console.log("[i] g__iohideventsystem_client_refresh_ptr addr: " + g__iohideventsystem_client_refresh_ptr)

    Interceptor.attach(g__iohideventsystem_client_refresh_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_client_refresh")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_client_refresh");
        }
    });        
 
    const g__iohideventsystem_copy_event_from_virtual_service_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_copy_event_from_virtual_service');
    console.log("[i] g__iohideventsystem_copy_event_from_virtual_service_ptr addr: " + g__iohideventsystem_copy_event_from_virtual_service_ptr)

    Interceptor.attach(g__iohideventsystem_copy_event_from_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_copy_event_from_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_copy_event_from_virtual_service");
        }
    });        
 
    const g__iohideventsystem_copy_matching_event_from_virtual_service_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_copy_matching_event_from_virtual_service');
    console.log("[i] g__iohideventsystem_copy_matching_event_from_virtual_service_ptr addr: " + g__iohideventsystem_copy_matching_event_from_virtual_service_ptr)

    Interceptor.attach(g__iohideventsystem_copy_matching_event_from_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_copy_matching_event_from_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_copy_matching_event_from_virtual_service");
        }
    });        
 
    const g__iohideventsystem_output_event_to_virtual_service_ptr = Module.getExportByName(g_proc_name, '_iohideventsystem_output_event_to_virtual_service');
    console.log("[i] g__iohideventsystem_output_event_to_virtual_service_ptr addr: " + g__iohideventsystem_output_event_to_virtual_service_ptr)

    Interceptor.attach(g__iohideventsystem_output_event_to_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _iohideventsystem_output_event_to_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _iohideventsystem_output_event_to_virtual_service");
        }
    });        
 
    const g__isArray_ptr = Module.getExportByName(g_proc_name, '_isArray');
    console.log("[i] g__isArray_ptr addr: " + g__isArray_ptr)

    Interceptor.attach(g__isArray_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _isArray")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _isArray");
        }
    });        
 
    const g__isDictionary_ptr = Module.getExportByName(g_proc_name, '_isDictionary');
    console.log("[i] g__isDictionary_ptr addr: " + g__isDictionary_ptr)

    Interceptor.attach(g__isDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _isDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _isDictionary");
        }
    });        
 
    const g__isString_ptr = Module.getExportByName(g_proc_name, '_isString');
    console.log("[i] g__isString_ptr addr: " + g__isString_ptr)

    Interceptor.attach(g__isString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _isString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _isString");
        }
    });        
 
    const g__kcgen_log_ptr = Module.getExportByName(g_proc_name, '_kcgen_log');
    console.log("[i] g__kcgen_log_ptr addr: " + g__kcgen_log_ptr)

    Interceptor.attach(g__kcgen_log_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _kcgen_log")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _kcgen_log");
        }
    });        
 
    const g__kcgen_terminate_ptr = Module.getExportByName(g_proc_name, '_kcgen_terminate');
    console.log("[i] g__kcgen_terminate_ptr addr: " + g__kcgen_terminate_ptr)

    Interceptor.attach(g__kcgen_terminate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _kcgen_terminate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _kcgen_terminate");
        }
    });        
 
    const g__kcgen_verboseLog_ptr = Module.getExportByName(g_proc_name, '_kcgen_verboseLog');
    console.log("[i] g__kcgen_verboseLog_ptr addr: " + g__kcgen_verboseLog_ptr)

    Interceptor.attach(g__kcgen_verboseLog_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _kcgen_verboseLog")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _kcgen_verboseLog");
        }
    });        
 
    const g__kcgen_warning_ptr = Module.getExportByName(g_proc_name, '_kcgen_warning');
    console.log("[i] g__kcgen_warning_ptr addr: " + g__kcgen_warning_ptr)

    Interceptor.attach(g__kcgen_warning_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _kcgen_warning")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _kcgen_warning");
        }
    });        
 
    const g__pm_connect_ptr = Module.getExportByName(g_proc_name, '_pm_connect');
    console.log("[i] g__pm_connect_ptr addr: " + g__pm_connect_ptr)

    Interceptor.attach(g__pm_connect_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _pm_connect")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _pm_connect");
        }
    });        
 
    const g__pm_disconnect_ptr = Module.getExportByName(g_proc_name, '_pm_disconnect');
    console.log("[i] g__pm_disconnect_ptr addr: " + g__pm_disconnect_ptr)

    Interceptor.attach(g__pm_disconnect_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _pm_disconnect")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _pm_disconnect");
        }
    });        
 
    const g__releaseAsycnAssertion_ptr = Module.getExportByName(g_proc_name, '_releaseAsycnAssertion');
    console.log("[i] g__releaseAsycnAssertion_ptr addr: " + g__releaseAsycnAssertion_ptr)

    Interceptor.attach(g__releaseAsycnAssertion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _releaseAsycnAssertion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _releaseAsycnAssertion");
        }
    });        
 
    const g__removePrivateKextInfo_ptr = Module.getExportByName(g_proc_name, '_removePrivateKextInfo');
    console.log("[i] g__removePrivateKextInfo_ptr addr: " + g__removePrivateKextInfo_ptr)

    Interceptor.attach(g__removePrivateKextInfo_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _removePrivateKextInfo")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _removePrivateKextInfo");
        }
    });        
 
    const g__systemPowerCallback_ptr = Module.getExportByName(g_proc_name, '_systemPowerCallback');
    console.log("[i] g__systemPowerCallback_ptr addr: " + g__systemPowerCallback_ptr)

    Interceptor.attach(g__systemPowerCallback_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: _systemPowerCallback")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: _systemPowerCallback");
        }
    });        
 
    const g_activateAsyncAssertion_ptr = Module.getExportByName(g_proc_name, 'activateAsyncAssertion');
    console.log("[i] g_activateAsyncAssertion_ptr addr: " + g_activateAsyncAssertion_ptr)

    Interceptor.attach(g_activateAsyncAssertion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: activateAsyncAssertion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: activateAsyncAssertion");
        }
    });        
 
    const g_activeAssertions_ptr = Module.getExportByName(g_proc_name, 'activeAssertions');
    console.log("[i] g_activeAssertions_ptr addr: " + g_activeAssertions_ptr)

    Interceptor.attach(g_activeAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: activeAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: activeAssertions");
        }
    });        
 
    const g_checkFeatureEnabled_ptr = Module.getExportByName(g_proc_name, 'checkFeatureEnabled');
    console.log("[i] g_checkFeatureEnabled_ptr addr: " + g_checkFeatureEnabled_ptr)

    Interceptor.attach(g_checkFeatureEnabled_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: checkFeatureEnabled")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: checkFeatureEnabled");
        }
    });        
 
    const g_comparePrefsToDefaults_ptr = Module.getExportByName(g_proc_name, 'comparePrefsToDefaults');
    console.log("[i] g_comparePrefsToDefaults_ptr addr: " + g_comparePrefsToDefaults_ptr)

    Interceptor.attach(g_comparePrefsToDefaults_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: comparePrefsToDefaults")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: comparePrefsToDefaults");
        }
    });        
 
    const g_copyPreferencesForSrc_ptr = Module.getExportByName(g_proc_name, 'copyPreferencesForSrc');
    console.log("[i] g_copyPreferencesForSrc_ptr addr: " + g_copyPreferencesForSrc_ptr)

    Interceptor.attach(g_copyPreferencesForSrc_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: copyPreferencesForSrc")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: copyPreferencesForSrc");
        }
    });        
 
    const g_createAsyncAssertion_ptr = Module.getExportByName(g_proc_name, 'createAsyncAssertion');
    console.log("[i] g_createAsyncAssertion_ptr addr: " + g_createAsyncAssertion_ptr)

    Interceptor.attach(g_createAsyncAssertion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: createAsyncAssertion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: createAsyncAssertion");
        }
    });        
 
    const g_createCFStringForData_ptr = Module.getExportByName(g_proc_name, 'createCFStringForData');
    console.log("[i] g_createCFStringForData_ptr addr: " + g_createCFStringForData_ptr)

    Interceptor.attach(g_createCFStringForData_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: createCFStringForData")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: createCFStringForData");
        }
    });        
 
    const g_createCFStringForPlist_new_ptr = Module.getExportByName(g_proc_name, 'createCFStringForPlist_new');
    console.log("[i] g_createCFStringForPlist_new_ptr addr: " + g_createCFStringForPlist_new_ptr)

    Interceptor.attach(g_createCFStringForPlist_new_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: createCFStringForPlist_new")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: createCFStringForPlist_new");
        }
    });        
 
    const g_createUTF8CStringForCFString_ptr = Module.getExportByName(g_proc_name, 'createUTF8CStringForCFString');
    console.log("[i] g_createUTF8CStringForCFString_ptr addr: " + g_createUTF8CStringForCFString_ptr)

    Interceptor.attach(g_createUTF8CStringForCFString_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: createUTF8CStringForCFString")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: createUTF8CStringForCFString");
        }
    });        
 
    const g_decodeIOPMUserIsActive_ptr = Module.getExportByName(g_proc_name, 'decodeIOPMUserIsActive');
    console.log("[i] g_decodeIOPMUserIsActive_ptr addr: " + g_decodeIOPMUserIsActive_ptr)

    Interceptor.attach(g_decodeIOPMUserIsActive_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: decodeIOPMUserIsActive")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: decodeIOPMUserIsActive");
        }
    });        
 
    const g_ev_try_lock_ptr = Module.getExportByName(g_proc_name, 'ev_try_lock');
    console.log("[i] g_ev_try_lock_ptr addr: " + g_ev_try_lock_ptr)

    Interceptor.attach(g_ev_try_lock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: ev_try_lock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: ev_try_lock");
        }
    });        
 
    const g_ev_unlock_ptr = Module.getExportByName(g_proc_name, 'ev_unlock');
    console.log("[i] g_ev_unlock_ptr addr: " + g_ev_unlock_ptr)

    Interceptor.attach(g_ev_unlock_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: ev_unlock")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: ev_unlock");
        }
    });        
 
    const g_fat_iterator_close_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_close');
    console.log("[i] g_fat_iterator_close_ptr addr: " + g_fat_iterator_close_ptr)

    Interceptor.attach(g_fat_iterator_close_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_close")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_close");
        }
    });        
 
    const g_fat_iterator_file_end_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_file_end');
    console.log("[i] g_fat_iterator_file_end_ptr addr: " + g_fat_iterator_file_end_ptr)

    Interceptor.attach(g_fat_iterator_file_end_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_file_end")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_file_end");
        }
    });        
 
    const g_fat_iterator_file_start_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_file_start');
    console.log("[i] g_fat_iterator_file_start_ptr addr: " + g_fat_iterator_file_start_ptr)

    Interceptor.attach(g_fat_iterator_file_start_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_file_start")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_file_start");
        }
    });        
 
    const g_fat_iterator_find_arch_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_find_arch');
    console.log("[i] g_fat_iterator_find_arch_ptr addr: " + g_fat_iterator_find_arch_ptr)

    Interceptor.attach(g_fat_iterator_find_arch_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_find_arch")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_find_arch");
        }
    });        
 
    const g_fat_iterator_find_fat_arch_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_find_fat_arch');
    console.log("[i] g_fat_iterator_find_fat_arch_ptr addr: " + g_fat_iterator_find_fat_arch_ptr)

    Interceptor.attach(g_fat_iterator_find_fat_arch_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_find_fat_arch")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_find_fat_arch");
        }
    });        
 
    const g_fat_iterator_find_host_arch_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_find_host_arch');
    console.log("[i] g_fat_iterator_find_host_arch_ptr addr: " + g_fat_iterator_find_host_arch_ptr)

    Interceptor.attach(g_fat_iterator_find_host_arch_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_find_host_arch")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_find_host_arch");
        }
    });        
 
    const g_fat_iterator_for_data_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_for_data');
    console.log("[i] g_fat_iterator_for_data_ptr addr: " + g_fat_iterator_for_data_ptr)

    Interceptor.attach(g_fat_iterator_for_data_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_for_data")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_for_data");
        }
    });        
 
    const g_fat_iterator_is_iterable_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_is_iterable');
    console.log("[i] g_fat_iterator_is_iterable_ptr addr: " + g_fat_iterator_is_iterable_ptr)

    Interceptor.attach(g_fat_iterator_is_iterable_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_is_iterable")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_is_iterable");
        }
    });        
 
    const g_fat_iterator_next_arch_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_next_arch');
    console.log("[i] g_fat_iterator_next_arch_ptr addr: " + g_fat_iterator_next_arch_ptr)

    Interceptor.attach(g_fat_iterator_next_arch_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_next_arch")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_next_arch");
        }
    });        
 
    const g_fat_iterator_num_arches_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_num_arches');
    console.log("[i] g_fat_iterator_num_arches_ptr addr: " + g_fat_iterator_num_arches_ptr)

    Interceptor.attach(g_fat_iterator_num_arches_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_num_arches")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_num_arches");
        }
    });        
 
    const g_fat_iterator_open_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_open');
    console.log("[i] g_fat_iterator_open_ptr addr: " + g_fat_iterator_open_ptr)

    Interceptor.attach(g_fat_iterator_open_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_open")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_open");
        }
    });        
 
    const g_fat_iterator_reset_ptr = Module.getExportByName(g_proc_name, 'fat_iterator_reset');
    console.log("[i] g_fat_iterator_reset_ptr addr: " + g_fat_iterator_reset_ptr)

    Interceptor.attach(g_fat_iterator_reset_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: fat_iterator_reset")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: fat_iterator_reset");
        }
    });        
 
    const g_getEffectivePageSize_ptr = Module.getExportByName(g_proc_name, 'getEffectivePageSize');
    console.log("[i] g_getEffectivePageSize_ptr addr: " + g_getEffectivePageSize_ptr)

    Interceptor.attach(g_getEffectivePageSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: getEffectivePageSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: getEffectivePageSize");
        }
    });        
 
    const g_getGenericPrefsPath_ptr = Module.getExportByName(g_proc_name, 'getGenericPrefsPath');
    console.log("[i] g_getGenericPrefsPath_ptr addr: " + g_getGenericPrefsPath_ptr)

    Interceptor.attach(g_getGenericPrefsPath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: getGenericPrefsPath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: getGenericPrefsPath");
        }
    });        
 
    const g_getHostPrefsPath_ptr = Module.getExportByName(g_proc_name, 'getHostPrefsPath');
    console.log("[i] g_getHostPrefsPath_ptr addr: " + g_getHostPrefsPath_ptr)

    Interceptor.attach(g_getHostPrefsPath_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: getHostPrefsPath")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: getHostPrefsPath");
        }
    });        
 
    const g_getMonotonicTime_ptr = Module.getExportByName(g_proc_name, 'getMonotonicTime');
    console.log("[i] g_getMonotonicTime_ptr addr: " + g_getMonotonicTime_ptr)

    Interceptor.attach(g_getMonotonicTime_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: getMonotonicTime")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: getMonotonicTime");
        }
    });        
 
    const g_getPMQueue_ptr = Module.getExportByName(g_proc_name, 'getPMQueue');
    console.log("[i] g_getPMQueue_ptr addr: " + g_getPMQueue_ptr)

    Interceptor.attach(g_getPMQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: getPMQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: getPMQueue");
        }
    });        
 
    const g_getUserActiveValidDict_ptr = Module.getExportByName(g_proc_name, 'getUserActiveValidDict');
    console.log("[i] g_getUserActiveValidDict_ptr addr: " + g_getUserActiveValidDict_ptr)

    Interceptor.attach(g_getUserActiveValidDict_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: getUserActiveValidDict")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: getUserActiveValidDict");
        }
    });        
 
    const g_handleAssertionLevel_ptr = Module.getExportByName(g_proc_name, 'handleAssertionLevel');
    console.log("[i] g_handleAssertionLevel_ptr addr: " + g_handleAssertionLevel_ptr)

    Interceptor.attach(g_handleAssertionLevel_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: handleAssertionLevel")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: handleAssertionLevel");
        }
    });        
 
    const g_handleAssertionTimeout_ptr = Module.getExportByName(g_proc_name, 'handleAssertionTimeout');
    console.log("[i] g_handleAssertionTimeout_ptr addr: " + g_handleAssertionTimeout_ptr)

    Interceptor.attach(g_handleAssertionTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: handleAssertionTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: handleAssertionTimeout");
        }
    });        
 
    const g_hid_dispatch_pthread_root_queue_create_ptr = Module.getExportByName(g_proc_name, 'hid_dispatch_pthread_root_queue_create');
    console.log("[i] g_hid_dispatch_pthread_root_queue_create_ptr addr: " + g_hid_dispatch_pthread_root_queue_create_ptr)

    Interceptor.attach(g_hid_dispatch_pthread_root_queue_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: hid_dispatch_pthread_root_queue_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: hid_dispatch_pthread_root_queue_create");
        }
    });        
 
    const g_hid_dispatch_queue_create_ptr = Module.getExportByName(g_proc_name, 'hid_dispatch_queue_create');
    console.log("[i] g_hid_dispatch_queue_create_ptr addr: " + g_hid_dispatch_queue_create_ptr)

    Interceptor.attach(g_hid_dispatch_queue_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: hid_dispatch_queue_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: hid_dispatch_queue_create");
        }
    });        
 
    const g_hid_dispatch_queue_create_with_context_destructor_ptr = Module.getExportByName(g_proc_name, 'hid_dispatch_queue_create_with_context_destructor');
    console.log("[i] g_hid_dispatch_queue_create_with_context_destructor_ptr addr: " + g_hid_dispatch_queue_create_with_context_destructor_ptr)

    Interceptor.attach(g_hid_dispatch_queue_create_with_context_destructor_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: hid_dispatch_queue_create_with_context_destructor")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: hid_dispatch_queue_create_with_context_destructor");
        }
    });        
 
    const g_hid_dispatch_queue_release_ptr = Module.getExportByName(g_proc_name, 'hid_dispatch_queue_release');
    console.log("[i] g_hid_dispatch_queue_release_ptr addr: " + g_hid_dispatch_queue_release_ptr)

    Interceptor.attach(g_hid_dispatch_queue_release_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: hid_dispatch_queue_release")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: hid_dispatch_queue_release");
        }
    });        
 
    const g_hid_pthread_attr_init_ptr = Module.getExportByName(g_proc_name, 'hid_pthread_attr_init');
    console.log("[i] g_hid_pthread_attr_init_ptr addr: " + g_hid_pthread_attr_init_ptr)

    Interceptor.attach(g_hid_pthread_attr_init_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: hid_pthread_attr_init")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: hid_pthread_attr_init");
        }
    });        
 
    const g_hid_workloop_create_ptr = Module.getExportByName(g_proc_name, 'hid_workloop_create');
    console.log("[i] g_hid_workloop_create_ptr addr: " + g_hid_workloop_create_ptr)

    Interceptor.attach(g_hid_workloop_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: hid_workloop_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: hid_workloop_create");
        }
    });        
 
    const g_initialSetup_ptr = Module.getExportByName(g_proc_name, 'initialSetup');
    console.log("[i] g_initialSetup_ptr addr: " + g_initialSetup_ptr)

    Interceptor.attach(g_initialSetup_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: initialSetup")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: initialSetup");
        }
    });        
 
    const g_insertIntoTimedList_ptr = Module.getExportByName(g_proc_name, 'insertIntoTimedList');
    console.log("[i] g_insertIntoTimedList_ptr addr: " + g_insertIntoTimedList_ptr)

    Interceptor.attach(g_insertIntoTimedList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: insertIntoTimedList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: insertIntoTimedList");
        }
    });        
 
    const g_io_hideventsystem_clear_service_cache_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_clear_service_cache');
    console.log("[i] g_io_hideventsystem_clear_service_cache_ptr addr: " + g_io_hideventsystem_clear_service_cache_ptr)

    Interceptor.attach(g_io_hideventsystem_clear_service_cache_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_clear_service_cache")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_clear_service_cache");
        }
    });        
 
    const g_io_hideventsystem_copy_event_for_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_copy_event_for_service');
    console.log("[i] g_io_hideventsystem_copy_event_for_service_ptr addr: " + g_io_hideventsystem_copy_event_for_service_ptr)

    Interceptor.attach(g_io_hideventsystem_copy_event_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_copy_event_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_copy_event_for_service");
        }
    });        
 
    const g_io_hideventsystem_copy_matching_event_for_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_copy_matching_event_for_service');
    console.log("[i] g_io_hideventsystem_copy_matching_event_for_service_ptr addr: " + g_io_hideventsystem_copy_matching_event_for_service_ptr)

    Interceptor.attach(g_io_hideventsystem_copy_matching_event_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_copy_matching_event_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_copy_matching_event_for_service");
        }
    });        
 
    const g_io_hideventsystem_copy_matching_services_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_copy_matching_services');
    console.log("[i] g_io_hideventsystem_copy_matching_services_ptr addr: " + g_io_hideventsystem_copy_matching_services_ptr)

    Interceptor.attach(g_io_hideventsystem_copy_matching_services_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_copy_matching_services")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_copy_matching_services");
        }
    });        
 
    const g_io_hideventsystem_copy_properties_for_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_copy_properties_for_service');
    console.log("[i] g_io_hideventsystem_copy_properties_for_service_ptr addr: " + g_io_hideventsystem_copy_properties_for_service_ptr)

    Interceptor.attach(g_io_hideventsystem_copy_properties_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_copy_properties_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_copy_properties_for_service");
        }
    });        
 
    const g_io_hideventsystem_copy_property_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_copy_property');
    console.log("[i] g_io_hideventsystem_copy_property_ptr addr: " + g_io_hideventsystem_copy_property_ptr)

    Interceptor.attach(g_io_hideventsystem_copy_property_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_copy_property")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_copy_property");
        }
    });        
 
    const g_io_hideventsystem_copy_property_for_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_copy_property_for_service');
    console.log("[i] g_io_hideventsystem_copy_property_for_service_ptr addr: " + g_io_hideventsystem_copy_property_for_service_ptr)

    Interceptor.attach(g_io_hideventsystem_copy_property_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_copy_property_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_copy_property_for_service");
        }
    });        
 
    const g_io_hideventsystem_create_virtual_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_create_virtual_service');
    console.log("[i] g_io_hideventsystem_create_virtual_service_ptr addr: " + g_io_hideventsystem_create_virtual_service_ptr)

    Interceptor.attach(g_io_hideventsystem_create_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_create_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_create_virtual_service");
        }
    });        
 
    const g_io_hideventsystem_dispatch_event_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_dispatch_event');
    console.log("[i] g_io_hideventsystem_dispatch_event_ptr addr: " + g_io_hideventsystem_dispatch_event_ptr)

    Interceptor.attach(g_io_hideventsystem_dispatch_event_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_dispatch_event")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_dispatch_event");
        }
    });        
 
    const g_io_hideventsystem_dispatch_event_for_virtual_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_dispatch_event_for_virtual_service');
    console.log("[i] g_io_hideventsystem_dispatch_event_for_virtual_service_ptr addr: " + g_io_hideventsystem_dispatch_event_for_virtual_service_ptr)

    Interceptor.attach(g_io_hideventsystem_dispatch_event_for_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_dispatch_event_for_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_dispatch_event_for_virtual_service");
        }
    });        
 
    const g_io_hideventsystem_do_client_refresh_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_do_client_refresh');
    console.log("[i] g_io_hideventsystem_do_client_refresh_ptr addr: " + g_io_hideventsystem_do_client_refresh_ptr)

    Interceptor.attach(g_io_hideventsystem_do_client_refresh_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_do_client_refresh")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_do_client_refresh");
        }
    });        
 
    const g_io_hideventsystem_open_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_open');
    console.log("[i] g_io_hideventsystem_open_ptr addr: " + g_io_hideventsystem_open_ptr)

    Interceptor.attach(g_io_hideventsystem_open_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_open")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_open");
        }
    });        
 
    const g_io_hideventsystem_queue_create_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_queue_create');
    console.log("[i] g_io_hideventsystem_queue_create_ptr addr: " + g_io_hideventsystem_queue_create_ptr)

    Interceptor.attach(g_io_hideventsystem_queue_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_queue_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_queue_create");
        }
    });        
 
    const g_io_hideventsystem_queue_start_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_queue_start');
    console.log("[i] g_io_hideventsystem_queue_start_ptr addr: " + g_io_hideventsystem_queue_start_ptr)

    Interceptor.attach(g_io_hideventsystem_queue_start_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_queue_start")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_queue_start");
        }
    });        
 
    const g_io_hideventsystem_queue_stop_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_queue_stop');
    console.log("[i] g_io_hideventsystem_queue_stop_ptr addr: " + g_io_hideventsystem_queue_stop_ptr)

    Interceptor.attach(g_io_hideventsystem_queue_stop_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_queue_stop")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_queue_stop");
        }
    });        
 
    const g_io_hideventsystem_register_event_filter_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_register_event_filter');
    console.log("[i] g_io_hideventsystem_register_event_filter_ptr addr: " + g_io_hideventsystem_register_event_filter_ptr)

    Interceptor.attach(g_io_hideventsystem_register_event_filter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_register_event_filter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_register_event_filter");
        }
    });        
 
    const g_io_hideventsystem_register_property_changed_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_register_property_changed_notification');
    console.log("[i] g_io_hideventsystem_register_property_changed_notification_ptr addr: " + g_io_hideventsystem_register_property_changed_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_register_property_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_register_property_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_register_property_changed_notification");
        }
    });        
 
    const g_io_hideventsystem_register_record_client_changed_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_register_record_client_changed_notification');
    console.log("[i] g_io_hideventsystem_register_record_client_changed_notification_ptr addr: " + g_io_hideventsystem_register_record_client_changed_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_register_record_client_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_register_record_client_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_register_record_client_changed_notification");
        }
    });        
 
    const g_io_hideventsystem_register_record_service_changed_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_register_record_service_changed_notification');
    console.log("[i] g_io_hideventsystem_register_record_service_changed_notification_ptr addr: " + g_io_hideventsystem_register_record_service_changed_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_register_record_service_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_register_record_service_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_register_record_service_changed_notification");
        }
    });        
 
    const g_io_hideventsystem_release_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_release_notification');
    console.log("[i] g_io_hideventsystem_release_notification_ptr addr: " + g_io_hideventsystem_release_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_release_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_release_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_release_notification");
        }
    });        
 
    const g_io_hideventsystem_remove_virtual_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_remove_virtual_service');
    console.log("[i] g_io_hideventsystem_remove_virtual_service_ptr addr: " + g_io_hideventsystem_remove_virtual_service_ptr)

    Interceptor.attach(g_io_hideventsystem_remove_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_remove_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_remove_virtual_service");
        }
    });        
 
    const g_io_hideventsystem_service_conforms_to_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_service_conforms_to');
    console.log("[i] g_io_hideventsystem_service_conforms_to_ptr addr: " + g_io_hideventsystem_service_conforms_to_ptr)

    Interceptor.attach(g_io_hideventsystem_service_conforms_to_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_service_conforms_to")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_service_conforms_to");
        }
    });        
 
    const g_io_hideventsystem_set_element_value_for_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_set_element_value_for_service');
    console.log("[i] g_io_hideventsystem_set_element_value_for_service_ptr addr: " + g_io_hideventsystem_set_element_value_for_service_ptr)

    Interceptor.attach(g_io_hideventsystem_set_element_value_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_set_element_value_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_set_element_value_for_service");
        }
    });        
 
    const g_io_hideventsystem_set_properties_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_set_properties');
    console.log("[i] g_io_hideventsystem_set_properties_ptr addr: " + g_io_hideventsystem_set_properties_ptr)

    Interceptor.attach(g_io_hideventsystem_set_properties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_set_properties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_set_properties");
        }
    });        
 
    const g_io_hideventsystem_set_properties_for_service_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_set_properties_for_service');
    console.log("[i] g_io_hideventsystem_set_properties_for_service_ptr addr: " + g_io_hideventsystem_set_properties_for_service_ptr)

    Interceptor.attach(g_io_hideventsystem_set_properties_for_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_set_properties_for_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_set_properties_for_service");
        }
    });        
 
    const g_io_hideventsystem_unregister_event_filter_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_unregister_event_filter');
    console.log("[i] g_io_hideventsystem_unregister_event_filter_ptr addr: " + g_io_hideventsystem_unregister_event_filter_ptr)

    Interceptor.attach(g_io_hideventsystem_unregister_event_filter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_unregister_event_filter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_unregister_event_filter");
        }
    });        
 
    const g_io_hideventsystem_unregister_property_changed_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_unregister_property_changed_notification');
    console.log("[i] g_io_hideventsystem_unregister_property_changed_notification_ptr addr: " + g_io_hideventsystem_unregister_property_changed_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_unregister_property_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_unregister_property_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_unregister_property_changed_notification");
        }
    });        
 
    const g_io_hideventsystem_unregister_record_client_changed_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_unregister_record_client_changed_notification');
    console.log("[i] g_io_hideventsystem_unregister_record_client_changed_notification_ptr addr: " + g_io_hideventsystem_unregister_record_client_changed_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_unregister_record_client_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_unregister_record_client_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_unregister_record_client_changed_notification");
        }
    });        
 
    const g_io_hideventsystem_unregister_record_service_changed_notification_ptr = Module.getExportByName(g_proc_name, 'io_hideventsystem_unregister_record_service_changed_notification');
    console.log("[i] g_io_hideventsystem_unregister_record_service_changed_notification_ptr addr: " + g_io_hideventsystem_unregister_record_service_changed_notification_ptr)

    Interceptor.attach(g_io_hideventsystem_unregister_record_service_changed_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_hideventsystem_unregister_record_service_changed_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_hideventsystem_unregister_record_service_changed_notification");
        }
    });        
 
    const g_io_pm_assertion_activity_aggregate_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_activity_aggregate');
    console.log("[i] g_io_pm_assertion_activity_aggregate_ptr addr: " + g_io_pm_assertion_activity_aggregate_ptr)

    Interceptor.attach(g_io_pm_assertion_activity_aggregate_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_activity_aggregate")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_activity_aggregate");
        }
    });        
 
    const g_io_pm_assertion_activity_log_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_activity_log');
    console.log("[i] g_io_pm_assertion_activity_log_ptr addr: " + g_io_pm_assertion_activity_log_ptr)

    Interceptor.attach(g_io_pm_assertion_activity_log_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_activity_log")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_activity_log");
        }
    });        
 
    const g_io_pm_assertion_copy_details_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_copy_details');
    console.log("[i] g_io_pm_assertion_copy_details_ptr addr: " + g_io_pm_assertion_copy_details_ptr)

    Interceptor.attach(g_io_pm_assertion_copy_details_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_copy_details")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_copy_details");
        }
    });        
 
    const g_io_pm_assertion_create_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_create');
    console.log("[i] g_io_pm_assertion_create_ptr addr: " + g_io_pm_assertion_create_ptr)

    Interceptor.attach(g_io_pm_assertion_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_create");
        }
    });        
 
    const g_io_pm_assertion_notify_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_notify');
    console.log("[i] g_io_pm_assertion_notify_ptr addr: " + g_io_pm_assertion_notify_ptr)

    Interceptor.attach(g_io_pm_assertion_notify_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_notify")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_notify");
        }
    });        
 
    const g_io_pm_assertion_retain_release_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_retain_release');
    console.log("[i] g_io_pm_assertion_retain_release_ptr addr: " + g_io_pm_assertion_retain_release_ptr)

    Interceptor.attach(g_io_pm_assertion_retain_release_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_retain_release")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_retain_release");
        }
    });        
 
    const g_io_pm_assertion_set_properties_ptr = Module.getExportByName(g_proc_name, 'io_pm_assertion_set_properties');
    console.log("[i] g_io_pm_assertion_set_properties_ptr addr: " + g_io_pm_assertion_set_properties_ptr)

    Interceptor.attach(g_io_pm_assertion_set_properties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_assertion_set_properties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_assertion_set_properties");
        }
    });        
 
    const g_io_pm_cancel_repeat_events_ptr = Module.getExportByName(g_proc_name, 'io_pm_cancel_repeat_events');
    console.log("[i] g_io_pm_cancel_repeat_events_ptr addr: " + g_io_pm_cancel_repeat_events_ptr)

    Interceptor.attach(g_io_pm_cancel_repeat_events_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_cancel_repeat_events")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_cancel_repeat_events");
        }
    });        
 
    const g_io_pm_change_sa_assertion_behavior_ptr = Module.getExportByName(g_proc_name, 'io_pm_change_sa_assertion_behavior');
    console.log("[i] g_io_pm_change_sa_assertion_behavior_ptr addr: " + g_io_pm_change_sa_assertion_behavior_ptr)

    Interceptor.attach(g_io_pm_change_sa_assertion_behavior_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_change_sa_assertion_behavior")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_change_sa_assertion_behavior");
        }
    });        
 
    const g_io_pm_connection_acknowledge_event_ptr = Module.getExportByName(g_proc_name, 'io_pm_connection_acknowledge_event');
    console.log("[i] g_io_pm_connection_acknowledge_event_ptr addr: " + g_io_pm_connection_acknowledge_event_ptr)

    Interceptor.attach(g_io_pm_connection_acknowledge_event_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_connection_acknowledge_event")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_connection_acknowledge_event");
        }
    });        
 
    const g_io_pm_connection_create_ptr = Module.getExportByName(g_proc_name, 'io_pm_connection_create');
    console.log("[i] g_io_pm_connection_create_ptr addr: " + g_io_pm_connection_create_ptr)

    Interceptor.attach(g_io_pm_connection_create_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_connection_create")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_connection_create");
        }
    });        
 
    const g_io_pm_connection_release_ptr = Module.getExportByName(g_proc_name, 'io_pm_connection_release');
    console.log("[i] g_io_pm_connection_release_ptr addr: " + g_io_pm_connection_release_ptr)

    Interceptor.attach(g_io_pm_connection_release_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_connection_release")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_connection_release");
        }
    });        
 
    const g_io_pm_connection_schedule_notification_ptr = Module.getExportByName(g_proc_name, 'io_pm_connection_schedule_notification');
    console.log("[i] g_io_pm_connection_schedule_notification_ptr addr: " + g_io_pm_connection_schedule_notification_ptr)

    Interceptor.attach(g_io_pm_connection_schedule_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_connection_schedule_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_connection_schedule_notification");
        }
    });        
 
    const g_io_pm_ctl_assertion_type_ptr = Module.getExportByName(g_proc_name, 'io_pm_ctl_assertion_type');
    console.log("[i] g_io_pm_ctl_assertion_type_ptr addr: " + g_io_pm_ctl_assertion_type_ptr)

    Interceptor.attach(g_io_pm_ctl_assertion_type_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_ctl_assertion_type")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_ctl_assertion_type");
        }
    });        
 
    const g_io_pm_declare_network_client_active_ptr = Module.getExportByName(g_proc_name, 'io_pm_declare_network_client_active');
    console.log("[i] g_io_pm_declare_network_client_active_ptr addr: " + g_io_pm_declare_network_client_active_ptr)

    Interceptor.attach(g_io_pm_declare_network_client_active_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_declare_network_client_active")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_declare_network_client_active");
        }
    });        
 
    const g_io_pm_declare_system_active_ptr = Module.getExportByName(g_proc_name, 'io_pm_declare_system_active');
    console.log("[i] g_io_pm_declare_system_active_ptr addr: " + g_io_pm_declare_system_active_ptr)

    Interceptor.attach(g_io_pm_declare_system_active_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_declare_system_active")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_declare_system_active");
        }
    });        
 
    const g_io_pm_declare_user_active_ptr = Module.getExportByName(g_proc_name, 'io_pm_declare_user_active');
    console.log("[i] g_io_pm_declare_user_active_ptr addr: " + g_io_pm_declare_user_active_ptr)

    Interceptor.attach(g_io_pm_declare_user_active_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_declare_user_active")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_declare_user_active");
        }
    });        
 
    const g_io_pm_force_active_settings_ptr = Module.getExportByName(g_proc_name, 'io_pm_force_active_settings');
    console.log("[i] g_io_pm_force_active_settings_ptr addr: " + g_io_pm_force_active_settings_ptr)

    Interceptor.attach(g_io_pm_force_active_settings_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_force_active_settings")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_force_active_settings");
        }
    });        
 
    const g_io_pm_get_capability_bits_ptr = Module.getExportByName(g_proc_name, 'io_pm_get_capability_bits');
    console.log("[i] g_io_pm_get_capability_bits_ptr addr: " + g_io_pm_get_capability_bits_ptr)

    Interceptor.attach(g_io_pm_get_capability_bits_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_get_capability_bits")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_get_capability_bits");
        }
    });        
 
    const g_io_pm_get_uuid_ptr = Module.getExportByName(g_proc_name, 'io_pm_get_uuid');
    console.log("[i] g_io_pm_get_uuid_ptr addr: " + g_io_pm_get_uuid_ptr)

    Interceptor.attach(g_io_pm_get_uuid_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_get_uuid")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_get_uuid");
        }
    });        
 
    const g_io_pm_get_value_int_ptr = Module.getExportByName(g_proc_name, 'io_pm_get_value_int');
    console.log("[i] g_io_pm_get_value_int_ptr addr: " + g_io_pm_get_value_int_ptr)

    Interceptor.attach(g_io_pm_get_value_int_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_get_value_int")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_get_value_int");
        }
    });        
 
    const g_io_pm_hid_event_copy_history_ptr = Module.getExportByName(g_proc_name, 'io_pm_hid_event_copy_history');
    console.log("[i] g_io_pm_hid_event_copy_history_ptr addr: " + g_io_pm_hid_event_copy_history_ptr)

    Interceptor.attach(g_io_pm_hid_event_copy_history_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_hid_event_copy_history")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_hid_event_copy_history");
        }
    });        
 
    const g_io_pm_hid_event_report_activity_ptr = Module.getExportByName(g_proc_name, 'io_pm_hid_event_report_activity');
    console.log("[i] g_io_pm_hid_event_report_activity_ptr addr: " + g_io_pm_hid_event_report_activity_ptr)

    Interceptor.attach(g_io_pm_hid_event_report_activity_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_hid_event_report_activity")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_hid_event_report_activity");
        }
    });        
 
    const g_io_pm_last_wake_time_ptr = Module.getExportByName(g_proc_name, 'io_pm_last_wake_time');
    console.log("[i] g_io_pm_last_wake_time_ptr addr: " + g_io_pm_last_wake_time_ptr)

    Interceptor.attach(g_io_pm_last_wake_time_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_last_wake_time")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_last_wake_time");
        }
    });        
 
    const g_io_pm_schedule_power_event_ptr = Module.getExportByName(g_proc_name, 'io_pm_schedule_power_event');
    console.log("[i] g_io_pm_schedule_power_event_ptr addr: " + g_io_pm_schedule_power_event_ptr)

    Interceptor.attach(g_io_pm_schedule_power_event_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_schedule_power_event")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_schedule_power_event");
        }
    });        
 
    const g_io_pm_schedule_repeat_event_ptr = Module.getExportByName(g_proc_name, 'io_pm_schedule_repeat_event');
    console.log("[i] g_io_pm_schedule_repeat_event_ptr addr: " + g_io_pm_schedule_repeat_event_ptr)

    Interceptor.attach(g_io_pm_schedule_repeat_event_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_schedule_repeat_event")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_schedule_repeat_event");
        }
    });        
 
    const g_io_pm_set_bt_wake_interval_ptr = Module.getExportByName(g_proc_name, 'io_pm_set_bt_wake_interval');
    console.log("[i] g_io_pm_set_bt_wake_interval_ptr addr: " + g_io_pm_set_bt_wake_interval_ptr)

    Interceptor.attach(g_io_pm_set_bt_wake_interval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_set_bt_wake_interval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_set_bt_wake_interval");
        }
    });        
 
    const g_io_pm_set_debug_flags_ptr = Module.getExportByName(g_proc_name, 'io_pm_set_debug_flags');
    console.log("[i] g_io_pm_set_debug_flags_ptr addr: " + g_io_pm_set_debug_flags_ptr)

    Interceptor.attach(g_io_pm_set_debug_flags_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_set_debug_flags")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_set_debug_flags");
        }
    });        
 
    const g_io_pm_set_dw_linger_interval_ptr = Module.getExportByName(g_proc_name, 'io_pm_set_dw_linger_interval');
    console.log("[i] g_io_pm_set_dw_linger_interval_ptr addr: " + g_io_pm_set_dw_linger_interval_ptr)

    Interceptor.attach(g_io_pm_set_dw_linger_interval_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_set_dw_linger_interval")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_set_dw_linger_interval");
        }
    });        
 
    const g_io_pm_set_exception_limits_ptr = Module.getExportByName(g_proc_name, 'io_pm_set_exception_limits');
    console.log("[i] g_io_pm_set_exception_limits_ptr addr: " + g_io_pm_set_exception_limits_ptr)

    Interceptor.attach(g_io_pm_set_exception_limits_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_set_exception_limits")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_set_exception_limits");
        }
    });        
 
    const g_io_pm_set_sleepservice_wake_time_cap_ptr = Module.getExportByName(g_proc_name, 'io_pm_set_sleepservice_wake_time_cap');
    console.log("[i] g_io_pm_set_sleepservice_wake_time_cap_ptr addr: " + g_io_pm_set_sleepservice_wake_time_cap_ptr)

    Interceptor.attach(g_io_pm_set_sleepservice_wake_time_cap_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_set_sleepservice_wake_time_cap")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_set_sleepservice_wake_time_cap");
        }
    });        
 
    const g_io_pm_set_value_int_ptr = Module.getExportByName(g_proc_name, 'io_pm_set_value_int');
    console.log("[i] g_io_pm_set_value_int_ptr addr: " + g_io_pm_set_value_int_ptr)

    Interceptor.attach(g_io_pm_set_value_int_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_pm_set_value_int")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_pm_set_value_int");
        }
    });        
 
    const g_io_ps_copy_powersources_info_ptr = Module.getExportByName(g_proc_name, 'io_ps_copy_powersources_info');
    console.log("[i] g_io_ps_copy_powersources_info_ptr addr: " + g_io_ps_copy_powersources_info_ptr)

    Interceptor.attach(g_io_ps_copy_powersources_info_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_ps_copy_powersources_info")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_ps_copy_powersources_info");
        }
    });        
 
    const g_io_ps_new_pspowersource_ptr = Module.getExportByName(g_proc_name, 'io_ps_new_pspowersource');
    console.log("[i] g_io_ps_new_pspowersource_ptr addr: " + g_io_ps_new_pspowersource_ptr)

    Interceptor.attach(g_io_ps_new_pspowersource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_ps_new_pspowersource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_ps_new_pspowersource");
        }
    });        
 
    const g_io_ps_release_pspowersource_ptr = Module.getExportByName(g_proc_name, 'io_ps_release_pspowersource');
    console.log("[i] g_io_ps_release_pspowersource_ptr addr: " + g_io_ps_release_pspowersource_ptr)

    Interceptor.attach(g_io_ps_release_pspowersource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_ps_release_pspowersource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_ps_release_pspowersource");
        }
    });        
 
    const g_io_ps_update_pspowersource_ptr = Module.getExportByName(g_proc_name, 'io_ps_update_pspowersource');
    console.log("[i] g_io_ps_update_pspowersource_ptr addr: " + g_io_ps_update_pspowersource_ptr)

    Interceptor.attach(g_io_ps_update_pspowersource_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: io_ps_update_pspowersource")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: io_ps_update_pspowersource");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_client_records_changed_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_client_records_changed');
    console.log("[i] g_iohideventsystem_client_dispatch_client_records_changed_ptr addr: " + g_iohideventsystem_client_dispatch_client_records_changed_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_client_records_changed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_client_records_changed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_client_records_changed");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_event_filter_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_event_filter');
    console.log("[i] g_iohideventsystem_client_dispatch_event_filter_ptr addr: " + g_iohideventsystem_client_dispatch_event_filter_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_event_filter_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_event_filter")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_event_filter");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_notification_results_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_notification_results');
    console.log("[i] g_iohideventsystem_client_dispatch_notification_results_ptr addr: " + g_iohideventsystem_client_dispatch_notification_results_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_notification_results_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_notification_results")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_notification_results");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_properties_changed_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_properties_changed');
    console.log("[i] g_iohideventsystem_client_dispatch_properties_changed_ptr addr: " + g_iohideventsystem_client_dispatch_properties_changed_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_properties_changed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_properties_changed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_properties_changed");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_service_records_changed_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_service_records_changed');
    console.log("[i] g_iohideventsystem_client_dispatch_service_records_changed_ptr addr: " + g_iohideventsystem_client_dispatch_service_records_changed_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_service_records_changed_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_service_records_changed")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_service_records_changed");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_service_removal_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_service_removal');
    console.log("[i] g_iohideventsystem_client_dispatch_service_removal_ptr addr: " + g_iohideventsystem_client_dispatch_service_removal_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_service_removal_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_service_removal")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_service_removal");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_virtual_service_copy_property_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_virtual_service_copy_property');
    console.log("[i] g_iohideventsystem_client_dispatch_virtual_service_copy_property_ptr addr: " + g_iohideventsystem_client_dispatch_virtual_service_copy_property_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_virtual_service_copy_property_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_virtual_service_copy_property")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_virtual_service_copy_property");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_virtual_service_notification_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_virtual_service_notification');
    console.log("[i] g_iohideventsystem_client_dispatch_virtual_service_notification_ptr addr: " + g_iohideventsystem_client_dispatch_virtual_service_notification_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_virtual_service_notification_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_virtual_service_notification")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_virtual_service_notification");
        }
    });        
 
    const g_iohideventsystem_client_dispatch_virtual_service_set_property_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_dispatch_virtual_service_set_property');
    console.log("[i] g_iohideventsystem_client_dispatch_virtual_service_set_property_ptr addr: " + g_iohideventsystem_client_dispatch_virtual_service_set_property_ptr)

    Interceptor.attach(g_iohideventsystem_client_dispatch_virtual_service_set_property_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_dispatch_virtual_service_set_property")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_dispatch_virtual_service_set_property");
        }
    });        
 
    const g_iohideventsystem_client_refresh_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_refresh');
    console.log("[i] g_iohideventsystem_client_refresh_ptr addr: " + g_iohideventsystem_client_refresh_ptr)

    Interceptor.attach(g_iohideventsystem_client_refresh_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_refresh")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_refresh");
        }
    });        
 
    const g_iohideventsystem_client_server_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_server');
    console.log("[i] g_iohideventsystem_client_server_ptr addr: " + g_iohideventsystem_client_server_ptr)

    Interceptor.attach(g_iohideventsystem_client_server_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_server")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_server");
        }
    });        
 
    const g_iohideventsystem_client_server_routine_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_client_server_routine');
    console.log("[i] g_iohideventsystem_client_server_routine_ptr addr: " + g_iohideventsystem_client_server_routine_ptr)

    Interceptor.attach(g_iohideventsystem_client_server_routine_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_client_server_routine")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_client_server_routine");
        }
    });        
 
    const g_iohideventsystem_copy_event_from_virtual_service_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_copy_event_from_virtual_service');
    console.log("[i] g_iohideventsystem_copy_event_from_virtual_service_ptr addr: " + g_iohideventsystem_copy_event_from_virtual_service_ptr)

    Interceptor.attach(g_iohideventsystem_copy_event_from_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_copy_event_from_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_copy_event_from_virtual_service");
        }
    });        
 
    const g_iohideventsystem_copy_matching_event_from_virtual_service_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_copy_matching_event_from_virtual_service');
    console.log("[i] g_iohideventsystem_copy_matching_event_from_virtual_service_ptr addr: " + g_iohideventsystem_copy_matching_event_from_virtual_service_ptr)

    Interceptor.attach(g_iohideventsystem_copy_matching_event_from_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_copy_matching_event_from_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_copy_matching_event_from_virtual_service");
        }
    });        
 
    const g_iohideventsystem_output_event_to_virtual_service_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_output_event_to_virtual_service');
    console.log("[i] g_iohideventsystem_output_event_to_virtual_service_ptr addr: " + g_iohideventsystem_output_event_to_virtual_service_ptr)

    Interceptor.attach(g_iohideventsystem_output_event_to_virtual_service_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_output_event_to_virtual_service")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_output_event_to_virtual_service");
        }
    });        
 
    const g_iohideventsystem_server_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_server');
    console.log("[i] g_iohideventsystem_server_ptr addr: " + g_iohideventsystem_server_ptr)

    Interceptor.attach(g_iohideventsystem_server_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_server")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_server");
        }
    });        
 
    const g_iohideventsystem_server_routine_ptr = Module.getExportByName(g_proc_name, 'iohideventsystem_server_routine');
    console.log("[i] g_iohideventsystem_server_routine_ptr addr: " + g_iohideventsystem_server_routine_ptr)

    Interceptor.attach(g_iohideventsystem_server_routine_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iohideventsystem_server_routine")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iohideventsystem_server_routine");
        }
    });        
 
    const g_iokit_user_client_trap_ptr = Module.getExportByName(g_proc_name, 'iokit_user_client_trap');
    console.log("[i] g_iokit_user_client_trap_ptr addr: " + g_iokit_user_client_trap_ptr)

    Interceptor.attach(g_iokit_user_client_trap_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: iokit_user_client_trap")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: iokit_user_client_trap");
        }
    });        
 
    const g_isA_GenericPref_ptr = Module.getExportByName(g_proc_name, 'isA_GenericPref');
    console.log("[i] g_isA_GenericPref_ptr addr: " + g_isA_GenericPref_ptr)

    Interceptor.attach(g_isA_GenericPref_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: isA_GenericPref")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: isA_GenericPref");
        }
    });        
 
    const g_isCrossLinking_ptr = Module.getExportByName(g_proc_name, 'isCrossLinking');
    console.log("[i] g_isCrossLinking_ptr addr: " + g_isCrossLinking_ptr)

    Interceptor.attach(g_isCrossLinking_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: isCrossLinking")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: isCrossLinking");
        }
    });        
 
    const g_kcgen_adjustKextSegmentLocations_ptr = Module.getExportByName(g_proc_name, 'kcgen_adjustKextSegmentLocations');
    console.log("[i] g_kcgen_adjustKextSegmentLocations_ptr addr: " + g_kcgen_adjustKextSegmentLocations_ptr)

    Interceptor.attach(g_kcgen_adjustKextSegmentLocations_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kcgen_adjustKextSegmentLocations")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kcgen_adjustKextSegmentLocations");
        }
    });        
 
    const g_kernelmanagement_load_kext_identifier_ptr = Module.getExportByName(g_proc_name, 'kernelmanagement_load_kext_identifier');
    console.log("[i] g_kernelmanagement_load_kext_identifier_ptr addr: " + g_kernelmanagement_load_kext_identifier_ptr)

    Interceptor.attach(g_kernelmanagement_load_kext_identifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kernelmanagement_load_kext_identifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kernelmanagement_load_kext_identifier");
        }
    });        
 
    const g_kernelmanagement_load_kext_url_ptr = Module.getExportByName(g_proc_name, 'kernelmanagement_load_kext_url');
    console.log("[i] g_kernelmanagement_load_kext_url_ptr addr: " + g_kernelmanagement_load_kext_url_ptr)

    Interceptor.attach(g_kernelmanagement_load_kext_url_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kernelmanagement_load_kext_url")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kernelmanagement_load_kext_url");
        }
    });        
 
    const g_kernelmanagement_path_for_bundle_id_ptr = Module.getExportByName(g_proc_name, 'kernelmanagement_path_for_bundle_id');
    console.log("[i] g_kernelmanagement_path_for_bundle_id_ptr addr: " + g_kernelmanagement_path_for_bundle_id_ptr)

    Interceptor.attach(g_kernelmanagement_path_for_bundle_id_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kernelmanagement_path_for_bundle_id")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kernelmanagement_path_for_bundle_id");
        }
    });        
 
    const g_kernelmanagement_unload_kext_identifier_ptr = Module.getExportByName(g_proc_name, 'kernelmanagement_unload_kext_identifier');
    console.log("[i] g_kernelmanagement_unload_kext_identifier_ptr addr: " + g_kernelmanagement_unload_kext_identifier_ptr)

    Interceptor.attach(g_kernelmanagement_unload_kext_identifier_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kernelmanagement_unload_kext_identifier")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kernelmanagement_unload_kext_identifier");
        }
    });        
 
    const g_kextmanager_create_property_value_array_ptr = Module.getExportByName(g_proc_name, 'kextmanager_create_property_value_array');
    console.log("[i] g_kextmanager_create_property_value_array_ptr addr: " + g_kextmanager_create_property_value_array_ptr)

    Interceptor.attach(g_kextmanager_create_property_value_array_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_create_property_value_array")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_create_property_value_array");
        }
    });        
 
    const g_kextmanager_load_kext_ptr = Module.getExportByName(g_proc_name, 'kextmanager_load_kext');
    console.log("[i] g_kextmanager_load_kext_ptr addr: " + g_kextmanager_load_kext_ptr)

    Interceptor.attach(g_kextmanager_load_kext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_load_kext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_load_kext");
        }
    });        
 
    const g_kextmanager_lock_kextload_ptr = Module.getExportByName(g_proc_name, 'kextmanager_lock_kextload');
    console.log("[i] g_kextmanager_lock_kextload_ptr addr: " + g_kextmanager_lock_kextload_ptr)

    Interceptor.attach(g_kextmanager_lock_kextload_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_lock_kextload")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_lock_kextload");
        }
    });        
 
    const g_kextmanager_lock_reboot_ptr = Module.getExportByName(g_proc_name, 'kextmanager_lock_reboot');
    console.log("[i] g_kextmanager_lock_reboot_ptr addr: " + g_kextmanager_lock_reboot_ptr)

    Interceptor.attach(g_kextmanager_lock_reboot_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_lock_reboot")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_lock_reboot");
        }
    });        
 
    const g_kextmanager_lock_volume_ptr = Module.getExportByName(g_proc_name, 'kextmanager_lock_volume');
    console.log("[i] g_kextmanager_lock_volume_ptr addr: " + g_kextmanager_lock_volume_ptr)

    Interceptor.attach(g_kextmanager_lock_volume_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_lock_volume")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_lock_volume");
        }
    });        
 
    const g_kextmanager_path_for_bundle_id_ptr = Module.getExportByName(g_proc_name, 'kextmanager_path_for_bundle_id');
    console.log("[i] g_kextmanager_path_for_bundle_id_ptr addr: " + g_kextmanager_path_for_bundle_id_ptr)

    Interceptor.attach(g_kextmanager_path_for_bundle_id_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_path_for_bundle_id")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_path_for_bundle_id");
        }
    });        
 
    const g_kextmanager_stop_ext_ptr = Module.getExportByName(g_proc_name, 'kextmanager_stop_ext');
    console.log("[i] g_kextmanager_stop_ext_ptr addr: " + g_kextmanager_stop_ext_ptr)

    Interceptor.attach(g_kextmanager_stop_ext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_stop_ext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_stop_ext");
        }
    });        
 
    const g_kextmanager_unlock_kextload_ptr = Module.getExportByName(g_proc_name, 'kextmanager_unlock_kextload');
    console.log("[i] g_kextmanager_unlock_kextload_ptr addr: " + g_kextmanager_unlock_kextload_ptr)

    Interceptor.attach(g_kextmanager_unlock_kextload_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_unlock_kextload")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_unlock_kextload");
        }
    });        
 
    const g_kextmanager_unlock_volume_ptr = Module.getExportByName(g_proc_name, 'kextmanager_unlock_volume');
    console.log("[i] g_kextmanager_unlock_volume_ptr addr: " + g_kextmanager_unlock_volume_ptr)

    Interceptor.attach(g_kextmanager_unlock_volume_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_unlock_volume")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_unlock_volume");
        }
    });        
 
    const g_kextmanager_update_ext_ptr = Module.getExportByName(g_proc_name, 'kextmanager_update_ext');
    console.log("[i] g_kextmanager_update_ext_ptr addr: " + g_kextmanager_update_ext_ptr)

    Interceptor.attach(g_kextmanager_update_ext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_update_ext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_update_ext");
        }
    });        
 
    const g_kextmanager_validate_ext_ptr = Module.getExportByName(g_proc_name, 'kextmanager_validate_ext');
    console.log("[i] g_kextmanager_validate_ext_ptr addr: " + g_kextmanager_validate_ext_ptr)

    Interceptor.attach(g_kextmanager_validate_ext_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: kextmanager_validate_ext")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: kextmanager_validate_ext");
        }
    });        
 
    const g_macho_find_dysymtab_ptr = Module.getExportByName(g_proc_name, 'macho_find_dysymtab');
    console.log("[i] g_macho_find_dysymtab_ptr addr: " + g_macho_find_dysymtab_ptr)

    Interceptor.attach(g_macho_find_dysymtab_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_find_dysymtab")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_find_dysymtab");
        }
    });        
 
    const g_macho_find_section_numbered_ptr = Module.getExportByName(g_proc_name, 'macho_find_section_numbered');
    console.log("[i] g_macho_find_section_numbered_ptr addr: " + g_macho_find_section_numbered_ptr)

    Interceptor.attach(g_macho_find_section_numbered_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_find_section_numbered")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_find_section_numbered");
        }
    });        
 
    const g_macho_find_source_version_ptr = Module.getExportByName(g_proc_name, 'macho_find_source_version');
    console.log("[i] g_macho_find_source_version_ptr addr: " + g_macho_find_source_version_ptr)

    Interceptor.attach(g_macho_find_source_version_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_find_source_version")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_find_source_version");
        }
    });        
 
    const g_macho_find_symbol_ptr = Module.getExportByName(g_proc_name, 'macho_find_symbol');
    console.log("[i] g_macho_find_symbol_ptr addr: " + g_macho_find_symbol_ptr)

    Interceptor.attach(g_macho_find_symbol_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_find_symbol")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_find_symbol");
        }
    });        
 
    const g_macho_find_symtab_ptr = Module.getExportByName(g_proc_name, 'macho_find_symtab');
    console.log("[i] g_macho_find_symtab_ptr addr: " + g_macho_find_symtab_ptr)

    Interceptor.attach(g_macho_find_symtab_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_find_symtab")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_find_symtab");
        }
    });        
 
    const g_macho_find_uuid_ptr = Module.getExportByName(g_proc_name, 'macho_find_uuid');
    console.log("[i] g_macho_find_uuid_ptr addr: " + g_macho_find_uuid_ptr)

    Interceptor.attach(g_macho_find_uuid_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_find_uuid")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_find_uuid");
        }
    });        
 
    const g_macho_get_section_by_name_ptr = Module.getExportByName(g_proc_name, 'macho_get_section_by_name');
    console.log("[i] g_macho_get_section_by_name_ptr addr: " + g_macho_get_section_by_name_ptr)

    Interceptor.attach(g_macho_get_section_by_name_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_get_section_by_name")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_get_section_by_name");
        }
    });        
 
    const g_macho_get_section_by_name_64_ptr = Module.getExportByName(g_proc_name, 'macho_get_section_by_name_64');
    console.log("[i] g_macho_get_section_by_name_64_ptr addr: " + g_macho_get_section_by_name_64_ptr)

    Interceptor.attach(g_macho_get_section_by_name_64_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_get_section_by_name_64")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_get_section_by_name_64");
        }
    });        
 
    const g_macho_get_segment_by_name_ptr = Module.getExportByName(g_proc_name, 'macho_get_segment_by_name');
    console.log("[i] g_macho_get_segment_by_name_ptr addr: " + g_macho_get_segment_by_name_ptr)

    Interceptor.attach(g_macho_get_segment_by_name_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_get_segment_by_name")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_get_segment_by_name");
        }
    });        
 
    const g_macho_get_segment_by_name_64_ptr = Module.getExportByName(g_proc_name, 'macho_get_segment_by_name_64');
    console.log("[i] g_macho_get_segment_by_name_64_ptr addr: " + g_macho_get_segment_by_name_64_ptr)

    Interceptor.attach(g_macho_get_segment_by_name_64_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_get_segment_by_name_64")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_get_segment_by_name_64");
        }
    });        
 
    const g_macho_remove_linkedit_ptr = Module.getExportByName(g_proc_name, 'macho_remove_linkedit');
    console.log("[i] g_macho_remove_linkedit_ptr addr: " + g_macho_remove_linkedit_ptr)

    Interceptor.attach(g_macho_remove_linkedit_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_remove_linkedit")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_remove_linkedit");
        }
    });        
 
    const g_macho_scan_load_commands_ptr = Module.getExportByName(g_proc_name, 'macho_scan_load_commands');
    console.log("[i] g_macho_scan_load_commands_ptr addr: " + g_macho_scan_load_commands_ptr)

    Interceptor.attach(g_macho_scan_load_commands_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_scan_load_commands")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_scan_load_commands");
        }
    });        
 
    const g_macho_swap_ptr = Module.getExportByName(g_proc_name, 'macho_swap');
    console.log("[i] g_macho_swap_ptr addr: " + g_macho_swap_ptr)

    Interceptor.attach(g_macho_swap_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_swap")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_swap");
        }
    });        
 
    const g_macho_trim_linkedit_ptr = Module.getExportByName(g_proc_name, 'macho_trim_linkedit');
    console.log("[i] g_macho_trim_linkedit_ptr addr: " + g_macho_trim_linkedit_ptr)

    Interceptor.attach(g_macho_trim_linkedit_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_trim_linkedit")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_trim_linkedit");
        }
    });        
 
    const g_macho_unswap_ptr = Module.getExportByName(g_proc_name, 'macho_unswap');
    console.log("[i] g_macho_unswap_ptr addr: " + g_macho_unswap_ptr)

    Interceptor.attach(g_macho_unswap_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: macho_unswap")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: macho_unswap");
        }
    });        
 
    const g_offloadAssertions_ptr = Module.getExportByName(g_proc_name, 'offloadAssertions');
    console.log("[i] g_offloadAssertions_ptr addr: " + g_offloadAssertions_ptr)

    Interceptor.attach(g_offloadAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: offloadAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: offloadAssertions");
        }
    });        
 
    const g_pathsForURLs_ptr = Module.getExportByName(g_proc_name, 'pathsForURLs');
    console.log("[i] g_pathsForURLs_ptr addr: " + g_pathsForURLs_ptr)

    Interceptor.attach(g_pathsForURLs_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: pathsForURLs")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: pathsForURLs");
        }
    });        
 
    const g_previouslySerialized_ptr = Module.getExportByName(g_proc_name, 'previouslySerialized');
    console.log("[i] g_previouslySerialized_ptr addr: " + g_previouslySerialized_ptr)

    Interceptor.attach(g_previouslySerialized_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: previouslySerialized")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: previouslySerialized");
        }
    });        
 
    const g_printPList_new_ptr = Module.getExportByName(g_proc_name, 'printPList_new');
    console.log("[i] g_printPList_new_ptr addr: " + g_printPList_new_ptr)

    Interceptor.attach(g_printPList_new_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: printPList_new")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: printPList_new");
        }
    });        
 
    const g_processAssertionTimeout_ptr = Module.getExportByName(g_proc_name, 'processAssertionTimeout');
    console.log("[i] g_processAssertionTimeout_ptr addr: " + g_processAssertionTimeout_ptr)

    Interceptor.attach(g_processAssertionTimeout_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: processAssertionTimeout")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: processAssertionTimeout");
        }
    });        
 
    const g_processAssertionUpdateActivity_ptr = Module.getExportByName(g_proc_name, 'processAssertionUpdateActivity');
    console.log("[i] g_processAssertionUpdateActivity_ptr addr: " + g_processAssertionUpdateActivity_ptr)

    Interceptor.attach(g_processAssertionUpdateActivity_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: processAssertionUpdateActivity")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: processAssertionUpdateActivity");
        }
    });        
 
    const g_processCheckAssertionsMsg_ptr = Module.getExportByName(g_proc_name, 'processCheckAssertionsMsg');
    console.log("[i] g_processCheckAssertionsMsg_ptr addr: " + g_processCheckAssertionsMsg_ptr)

    Interceptor.attach(g_processCheckAssertionsMsg_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: processCheckAssertionsMsg")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: processCheckAssertionsMsg");
        }
    });        
 
    const g_processCurrentActiveAssertions_ptr = Module.getExportByName(g_proc_name, 'processCurrentActiveAssertions');
    console.log("[i] g_processCurrentActiveAssertions_ptr addr: " + g_processCurrentActiveAssertions_ptr)

    Interceptor.attach(g_processCurrentActiveAssertions_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: processCurrentActiveAssertions")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: processCurrentActiveAssertions");
        }
    });        
 
    const g_processRemoteMsg_ptr = Module.getExportByName(g_proc_name, 'processRemoteMsg');
    console.log("[i] g_processRemoteMsg_ptr addr: " + g_processRemoteMsg_ptr)

    Interceptor.attach(g_processRemoteMsg_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: processRemoteMsg")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: processRemoteMsg");
        }
    });        
 
    const g_processUserActivityMsg_ptr = Module.getExportByName(g_proc_name, 'processUserActivityMsg');
    console.log("[i] g_processUserActivityMsg_ptr addr: " + g_processUserActivityMsg_ptr)

    Interceptor.attach(g_processUserActivityMsg_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: processUserActivityMsg")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: processUserActivityMsg");
        }
    });        
 
    const g_recordObjectInIDRefDictionary_ptr = Module.getExportByName(g_proc_name, 'recordObjectInIDRefDictionary');
    console.log("[i] g_recordObjectInIDRefDictionary_ptr addr: " + g_recordObjectInIDRefDictionary_ptr)

    Interceptor.attach(g_recordObjectInIDRefDictionary_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: recordObjectInIDRefDictionary")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: recordObjectInIDRefDictionary");
        }
    });        
 
    const g_releaseAsyncAssertion_ptr = Module.getExportByName(g_proc_name, 'releaseAsyncAssertion');
    console.log("[i] g_releaseAsyncAssertion_ptr addr: " + g_releaseAsyncAssertion_ptr)

    Interceptor.attach(g_releaseAsyncAssertion_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: releaseAsyncAssertion")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: releaseAsyncAssertion");
        }
    });        
 
    const g_removeFromTimedList_ptr = Module.getExportByName(g_proc_name, 'removeFromTimedList');
    console.log("[i] g_removeFromTimedList_ptr addr: " + g_removeFromTimedList_ptr)

    Interceptor.attach(g_removeFromTimedList_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: removeFromTimedList")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: removeFromTimedList");
        }
    });        
 
    const g_roundPageCrossSafe_ptr = Module.getExportByName(g_proc_name, 'roundPageCrossSafe');
    console.log("[i] g_roundPageCrossSafe_ptr addr: " + g_roundPageCrossSafe_ptr)

    Interceptor.attach(g_roundPageCrossSafe_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: roundPageCrossSafe")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: roundPageCrossSafe");
        }
    });        
 
    const g_roundPageCrossSafeFixedWidth_ptr = Module.getExportByName(g_proc_name, 'roundPageCrossSafeFixedWidth');
    console.log("[i] g_roundPageCrossSafeFixedWidth_ptr addr: " + g_roundPageCrossSafeFixedWidth_ptr)

    Interceptor.attach(g_roundPageCrossSafeFixedWidth_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: roundPageCrossSafeFixedWidth")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: roundPageCrossSafeFixedWidth");
        }
    });        
 
    const g_sendAsyncAssertionMsg_ptr = Module.getExportByName(g_proc_name, 'sendAsyncAssertionMsg');
    console.log("[i] g_sendAsyncAssertionMsg_ptr addr: " + g_sendAsyncAssertionMsg_ptr)

    Interceptor.attach(g_sendAsyncAssertionMsg_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: sendAsyncAssertionMsg")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: sendAsyncAssertionMsg");
        }
    });        
 
    const g_sendAsyncReleaseMsg_ptr = Module.getExportByName(g_proc_name, 'sendAsyncReleaseMsg');
    console.log("[i] g_sendAsyncReleaseMsg_ptr addr: " + g_sendAsyncReleaseMsg_ptr)

    Interceptor.attach(g_sendAsyncReleaseMsg_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: sendAsyncReleaseMsg")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: sendAsyncReleaseMsg");
        }
    });        
 
    const g_sendUserActivityMsg_ptr = Module.getExportByName(g_proc_name, 'sendUserActivityMsg');
    console.log("[i] g_sendUserActivityMsg_ptr addr: " + g_sendUserActivityMsg_ptr)

    Interceptor.attach(g_sendUserActivityMsg_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: sendUserActivityMsg")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: sendUserActivityMsg");
        }
    });        
 
    const g_setAsyncAssertionProperties_ptr = Module.getExportByName(g_proc_name, 'setAsyncAssertionProperties');
    console.log("[i] g_setAsyncAssertionProperties_ptr addr: " + g_setAsyncAssertionProperties_ptr)

    Interceptor.attach(g_setAsyncAssertionProperties_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: setAsyncAssertionProperties")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: setAsyncAssertionProperties");
        }
    });        
 
    const g_setCrossLinkPageSize_ptr = Module.getExportByName(g_proc_name, 'setCrossLinkPageSize');
    console.log("[i] g_setCrossLinkPageSize_ptr addr: " + g_setCrossLinkPageSize_ptr)

    Interceptor.attach(g_setCrossLinkPageSize_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: setCrossLinkPageSize")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: setCrossLinkPageSize");
        }
    });        
 
    const g_setDispatchQueue_ptr = Module.getExportByName(g_proc_name, 'setDispatchQueue');
    console.log("[i] g_setDispatchQueue_ptr addr: " + g_setDispatchQueue_ptr)

    Interceptor.attach(g_setDispatchQueue_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: setDispatchQueue")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: setDispatchQueue");
        }
    });        
 
    const g_setPreferencesForSrc_ptr = Module.getExportByName(g_proc_name, 'setPreferencesForSrc');
    console.log("[i] g_setPreferencesForSrc_ptr addr: " + g_setPreferencesForSrc_ptr)

    Interceptor.attach(g_setPreferencesForSrc_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: setPreferencesForSrc")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: setPreferencesForSrc");
        }
    });        
 
    const g_setupLogging_ptr = Module.getExportByName(g_proc_name, 'setupLogging');
    console.log("[i] g_setupLogging_ptr addr: " + g_setupLogging_ptr)

    Interceptor.attach(g_setupLogging_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: setupLogging")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: setupLogging");
        }
    });        
 
    const g_shimmingEnabled_ptr = Module.getExportByName(g_proc_name, 'shimmingEnabled');
    console.log("[i] g_shimmingEnabled_ptr addr: " + g_shimmingEnabled_ptr)

    Interceptor.attach(g_shimmingEnabled_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: shimmingEnabled")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: shimmingEnabled");
        }
    });        
 
    const g_showPList_new_ptr = Module.getExportByName(g_proc_name, 'showPList_new');
    console.log("[i] g_showPList_new_ptr addr: " + g_showPList_new_ptr)

    Interceptor.attach(g_showPList_new_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: showPList_new")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: showPList_new");
        }
    });        
 
    const g_smcSupportsSilentRunning_ptr = Module.getExportByName(g_proc_name, 'smcSupportsSilentRunning');
    console.log("[i] g_smcSupportsSilentRunning_ptr addr: " + g_smcSupportsSilentRunning_ptr)

    Interceptor.attach(g_smcSupportsSilentRunning_ptr, {
        onEnter: function(args) {
            console.log("[*] onEnter: smcSupportsSilentRunning")
        },

        onLeave: function(retval)
        {
            console.log("[*] onLeave: smcSupportsSilentRunning");
        }
    });        

}
